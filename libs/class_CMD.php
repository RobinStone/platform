<?phpclass CMD {    public static function query($query, $not_ans=false) {        $cmd_text = str_replace("\xc2\xa0", ' ', $query);        $arr = $query ? explode(' ', $cmd_text) : 'uncnown';        switch($arr[0]) {            case 'titles':                $arr = [                        'cls' => [                                'descr'=>'Очищает окно командной строки',                                'type'=>'js'                        ],                        'sys' => [                                'descr'=>'Отправляет команду по сокет-соединению sys [command]',                                'type'=>'js'                        ],                        'listener' => [                                'descr'=>'Слушает всех посетителей',                                'type'=>'js'                        ],                        'cycle' => [                                'descr'=>'Устанавливает команду на прослушку в цикле (cycle [script_name] [iterations=50])',                                'type'=>'js'                        ],                        'dir' => [                                'descr'=>'Показывает все доступные команды',                                'type'=>'js'                        ],                        'quit' => [                                'descr'=>'Выход из командной строки',                                'type'=>'js'                        ],                        'sys' => [                                'descr'=>'Параметры сервера и текущее состояние системы',                                'type'=>'php'                        ],                        's' => [                                'descr'=>'Создаёт аудиограмму для аудио файллов ( s [sys_name_file.mp3])',                                'type'=>'php'                        ],                        'set' => [                                'descr'=>'Установить значение ( key = value )',                                'type'=>'php'                        ],                        'delete_shop' => [                                'descr'=>'Полное удаление магазина со всеми товарами (delete_shop [id])',                                'type'=>'php'                        ],                        'delete_room' => [                                'descr'=>'Полное удаление комнаты со всеми сообщениями в чате (delete_room [room hash])',                                'type'=>'php'                        ],                        'delete_all_rooms' => [                                'descr'=>'Полное удаление всех комнат со всеми сообщениями в чате (delete_all_rooms)',                                'type'=>'php'                        ],                        'delete_all_rooms_for_user' => [                                'descr'=>'Полное удаление всех комнат со всеми сообщениями в чате для пользователя (delete_all_rooms_for_user [id_user])',                                'type'=>'php'                        ],                        'add_in_group' => [                                'descr'=>'Добавить в группу ( add_in_group [name_group] [value] )',                                'type'=>'php'                        ],                        'rem_from_group' => [                                'descr'=>'Удалить из группы ( rem_from_group [name_group] [value] )',                                'type'=>'php'                        ],                        'isset_in_group' => [                                'descr'=>'Удалить из группы ( isset_in_group [name_group] [value] )',                                'type'=>'php'                        ],                        'count_in_group' => [                                'descr'=>'Удалить из группы ( count_in_group [name_group] )',                                'type'=>'php'                        ],                        'group_all' => [                                'descr'=>'Показать всех членов группы ( group_all [name_group] )',                                'type'=>'php'                        ],                        'get' => [                                'descr'=>'Получить значение ( get key )',                                'type'=>'php'                        ],                        'del' => [                                'descr'=>'Удалить ключ+значение ( del key )',                                'type'=>'php'                        ],                        'all' => [                                'descr'=>'Получить все значения',                                'type'=>'php'                        ],                        'clear_all' => [                                'descr'=>'Удалит все ключи REDIS',                                'type'=>'php'                        ],                        '++' => [                                'descr'=>'++ key_name (прибавит 1)',                                'type'=>'php'                        ],                        '--' => [                                'descr'=>'++ key_name (отнимет 1)',                                'type'=>'php'                        ],                        'send' => [                                'descr'=>'отправить сообщение в канал (send [chanal_name] [id_user] [message])',                                'type'=>'php'                        ],                        'send-' => [                                'descr'=>'отправить простой текст в канал (send [chanal_name] [text])',                                'type'=>'php'                        ],                        'chat' => [                                'descr'=>'читать сообщения из канала (chat [chanal_name] [offset] [count])',                                'type'=>'php'                        ],                        'chat_last_mess' => [                                'descr'=>'читать N сообщений с конца (chat_last_mess [chanal_name] [count] [pagination_num])',                                'type'=>'php'                        ],                        'chat_length' => [                                'descr'=>'количество сообщений в чате (chat [chanal_name])',                                'type'=>'php'                        ],                        'chats_list' => [                                'descr'=>'Список всех чатов (slow...)',                                'type'=>'php'                        ],                        'chat_del' => [                                'descr'=>'Удалить все сообщения из чата (chat_del [chanal_name])',                                'type'=>'php'                        ],                        'find' => [                                'descr'=>'найти индекс записи ([полная строка])',                                'type'=>'php'                        ],                        'chat_replace_item' => [                                'descr'=>'Изменить строку с индексом (chat_replace_item [chanal_name] [id of item] [new value])',                                'type'=>'php'                        ],                        'chat_delete_item' => [                                'descr'=>'Удалить строку с индексом (chat_delete_item [chanal_name] [id of item])',                                'type'=>'php'                        ],                        'chat_archive' => [                                'descr'=>'Архивировать чат (chat_archive [chanal_name])',                                'type'=>'php'                        ],                        'obj' => [                                'descr'=>'Показать объект (obj [obj_name])',                                'type'=>'php'                        ],                        'obj_del' => [                                'descr'=>'Удалить объект (obj_del [obj_name])',                                'type'=>'php'                        ],                        'update' => [                                'descr'=>'Обновить конфигурацию (update)',                                'type'=>'php'                        ],                        'get_all_support' => [                                'descr'=>'Получить все номера сервисной службы (get_all_support)',                                'type'=>'php'                        ],                        'del_all_support_chats' => [                                'descr'=>'Удалить все чаты сервисной службы (del_all_support_chats)',                                'type'=>'php'                        ],                        'delete_user_complite' => [                                'descr'=>'Удалить пользователя со всеми данными (id_user)',                                'type'=>'php'                        ],                        'del_all_product_chats' => [                                'descr'=>'Удалить все чаты покупки-продажи товаров (del_all_product_chats)',                                'type'=>'php'                        ],                        'del_room' => [                                'descr'=>'Удалить комнату с чатом и напоминаниями (del_room [id_room])',                                'type'=>'php'                        ],                        'com' => [                                'descr'=>'команда (com [com_name])',                                'type'=>'php'                        ],                        'dump_sql' => [                                'descr'=>'создание дампа из таблиц (таблицы), если параметров нет, то - вся БД (dump_sql [users|access|garbage])',                                'type'=>'php'                        ],                        'clear_connections' => [                                'descr'=>'Очистить неиспользуемые (незарегистрированные связи) (clear_connections)',                                'type'=>'js'                        ],                        'clear_sys_params_of_user' => [                                'descr'=>'Очистить все системные параметры пользователя (clear_sys_params_of_user [id_user])',                                'type'=>'php'                        ],                        'get_all_sys_params_of_user' => [                                'descr'=>'Показать все системные параметры пользователя (get_all_sys_params_of_user [id_user])',                                'type'=>'php'                        ],                ];                if(!$not_ans) {                    ans('titles', $arr);                }                break;            case 'send':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 3, count($arr)-3));                if(!$not_ans) {                    ans('string', $R->mess_send($arr[1], $arr[2], $txt));                }                break;            case 'dump_sql':                if(!empty($arr[1])) {                    $tables = explode('|', $arr[1]);                    SUBD::dump('mysqldump', $tables);                } else {                    SUBD::dump('mysqldump');                }                ans('string', "<a download='mysqldump.sql' href='".Core::$DOMAIN."RESURSES/SQL/mysqldump.sql'>Скачать архив</a>");                break;            case 'del_room':                $R = new REDISE();                $R->del($arr[1]);                q("DELETE FROM `rooms` WHERE `room_id` = '".db_secur($arr[1])."' ");                q("DELETE FROM `alerts` WHERE `room_id` = '".db_secur($arr[1])."' ");                if(is_dir('./DOWNLOAD/FILES_ROOMS/'.$arr[1])) {                    $itms = scandir('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/');                    foreach($itms as $v) {                        if(is_file('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/'.$v)) {                            unlink('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/'.$v);                            if(is_file('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img100x100/'.$v)) {                                unlink('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img100x100/'.$v);                            }                            if(is_file('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img300x300/'.$v)) {                                unlink('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img300x300/'.$v);                            }                            try{                                rmdir('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img100x100');                            } catch (Exception $e) {                            }                            try{                                rmdir('./DOWNLOAD/FILES_ROOMS/'.$arr[1].'/img300x300');                            } catch (Exception $e) {                            }                            try{                                rmdir('./DOWNLOAD/FILES_ROOMS/'.$arr[1]);                            } catch (Exception $e) {                            }                        }                    }                }                if(!$not_ans) {                    ans('string', 'ok');                }                break;            case 'send-':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 2, count($arr)-2));                if(!$not_ans) {                    ans('string', $R->send_just_text($arr[1], $txt));                }                break;            case 'add_in_group':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 2, count($arr)-2));                if(!$not_ans) {                    ans('string', $R->add_in_group($arr[1], $txt));                }                break;            case 's':                AUDIO::create_preview($arr[1]);                ans('string', 'ok');                break;            case 'delete_shop':                INCLUDE_CLASS('shops', 'shop');                SHOP::disabled_shops((int)$arr[1]);                if(SHOP::delete_shop_complite((int)$arr[1], true)) {                    ans('string', 'Успешно - площадка ['.$arr[1].'] ПОЛНОСТЬЮ УДАЛЕНА');                } else {                    ans('string', 'НЕУДАЧА...');                }                break;            case 'delete_room':                if(ROOM::delete_room($arr[1])) {                    ans('string', 'Успешно - комната ['.$arr[1].'] ПОЛНОСТЬЮ УДАЛЕНА');                } else {                    ans('string', 'НЕУДАЧА...');                }                break;            case 'delete_user_complite':                if(USERS::delete($arr[1])) {                    ans('string', 'Успешно - пользователь ID=['.$arr[1].'] ПОЛНОСТЬЮ УДАЛЁН');                } else {                    error(USERS::$errors);                }                break;            case 'delete_all_rooms_for_user':                if(CHAT::delete_all_rooms_and_chats_for_user_id($arr[1])) {                    ans('string', 'Успешно - комнаты и чаты для ['.$arr[1].'] ПОЛНОСТЬЮ УДАЛЕНЫ');                } else {                    ans('string', 'НЕУДАЧА...');                }                break;            case 'delete_all_rooms':                if($rows = SQL_ROWS(q("SELECT room FROM room"))) {                    foreach($rows as $v) {                        ROOM::delete_room($v['room']);                    }                }                ans('string', 'Успешно - все комнаты УДАЛЕНЫ');                break;            case 'rem_from_group':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 2, count($arr)-2));                if(!$not_ans) {                    ans('string', $R->rem_from_group($arr[1], $txt));                }                break;            case 'count_in_group':                $R = new REDISE();                ans('string', $R->count_in_group($arr[1]));                break;            case 'isset_in_group':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 2, count($arr)-2));                ans('string', $R->isset_in_group($arr[1], $txt));                break;            case 'group_all':                $R = new REDISE();                ans('text', $R->group_all($arr[1]));                break;            case 'del_all_support_chats':                $R = new REDISE();                $rooms = SUBD::getAllLinesDB('rooms', 'type', 'support');                $del_arr = [];                $del_arr_alerts = [];                foreach($rooms as $v) {                    $R->del($v['room_id']);                    $del_arr_alerts[] = "'".$v['room_id']."'";                    $del_arr[] = (int)$v['id'];                }                $cnt = count($del_arr);                if($cnt > 0) {                    q("DELETE FROM `rooms` WHERE `id` IN (".implode(',',$del_arr).") ");                }                if(count($del_arr_alerts) > 0) {                    q("DELETE FROM `alerts` WHERE `room_id` IN (".implode(',', $del_arr_alerts).") ");                }                ans('string', 'ok / deleted - '.$cnt.' items');                break;            case 'del_all_product_chats':                $rooms = SUBD::getAllLinesDB('rooms', 'type', 'product');                $cnt = 0;                foreach($rooms as $v) {                    self::query('del_room '.$v['room_id'], true);                    ++$cnt;                }                ans('string', 'ok / deleted - '.$cnt.' items');                break;            case 'get_all_support':                $R = new REDISE();                ans('text', $R->get_all_numbers_of_support_service());                break;            case 'clear_sys_params_of_user':                PROFIL::init((int)$arr[1])->del_all_sys_params();                ans('string', 'All sys params - is deleted');                break;            case 'get_all_sys_params_of_user':                $params = PROFIL::init((int)$arr[1])->get_all_sys_params();                ob_start();                wtf($params, 1);                ans('string', ob_get_clean());                break;            case 'update':                $R = new REDISE();                $arr = SUBD::getAllLinesDB('call_rooms', 'prefix', 'support');                $R->obj_del_items_all('CALLS_SUPPORT');                foreach($arr as $v) {                    $R->obj_set('CALLS_SUPPORT', $v['room_id'], $v['id_target']);                }//        $rows = SQL_ROWS_FIELD(q("SELECT * FROM `rooms` WHERE `type` = 'product'"), 'id');//        foreach($rows as $v) {//            $R->set('')//        }                $R->del('ADMIN');                $rows = SQL_ROWS_FIELD(q("SELECT * FROM `users` WHERE `level` >= 6"), 'id');                if(count($rows) > 0) {                    foreach($rows as $k=>$v) {                        $R->add_in_group('ADMIN', $k);                    }                }                ans('string', 'Updated: CALLS_SUPPORT, ADMIN (group)');                break;            case 'obj':                $R = new REDISE();                ans('text', $R->obj_all($arr[1]));                break;            case 'obj_del':                $R = new REDISE();                ans('string', $R->obj_del_items_all($arr[1]));                break;            case 'chat_archive':                $R = new REDISE();                $ans = $R->chanal_archive($arr[1]);                if($ans === true) {                    ans('string', 'ok');                } else {                    error($ans);                }                break;            case 'chat_delete_item':                $R = new REDISE();                ans('string', $R->chanal_del_item($arr[1], $arr[2]));                break;            case 'chat_replace_item':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 3, count($arr)-3));                ans('string', $R->replace_item($arr[1], (int)$arr[2], $txt));                break;            case 'find':                $R = new REDISE();                $txt = implode(' ', array_slice($arr, 2, count($arr)-1));                ans('string', $R->find_index($arr[1], $txt));                break;            case 'chat_del':                $R = new REDISE();                ans('string', $R->chanal_delete($arr[1]));                break;            case 'chat':                $R = new REDISE();                $from = $arr[2] ?? 0;                $count = $arr[3] ?? $R->chanal_length($arr[1]);                $arr_m = $R->get_mess_arr($arr[1], (int)$from, (int)$count);                if(count($arr_m) === 0) {                    $arr_m = $R->chanal_recovery($arr[1]);                    ans('text', $arr_m);                } else {                    ans('text', $arr_m);                }                break;            case 'chat_last_mess':                $R = new REDISE();                if(!isset($arr[1])) {                    error('Не задано имя чата...');                }                $all = $R->chanal_length($arr[1]);                $count = $arr[2] ?? 10;                $pagin = $arr[3] ?? 0;                $count = (int)$count;                $pagin = (int)$pagin;                ans('text', $R->chanal_last_mess($arr[1], $count, $pagin));                break;            case 'sys':                ans('text', $_SERVER);                break;            case 'get':                $R = new REDISE();                ans('string', $R->get($arr[1]));                break;            case 'del':                $R = new REDISE();                ans('string', $R->del($arr[1]));                break;            case '++':                $R = new REDISE();                ans('string', $R->inc($arr[1]));                break;            case '--':                $R = new REDISE();                ans('string', $R->dec($arr[1]));                break;            case 'clear_all':                $R = new REDISE();                $R->clear_all();                ans('string', 'ok');                break;            case 'all':                $R = new REDISE();                ans('text', $R->get_all_keys());                break;            case 'chat_length':                $R = new REDISE();                ans('string', $R->chanal_length($arr[1]));                break;            case 'chats_list':                $R = new REDISE();                ans('text', $R->chanals_all());                break;            case 'set':                $R = new REDISE();                if(count($arr) >= 4 && $arr[2] === '=') {                    $R->set($arr[1], implode(' ', array_slice($arr, 3, count($arr)-3)));                    ans('string', 'ok');                }                break;            default:                error('Command incorrect... Press [dir] - for info aboul all system commands');                break;        }    }}