<?phpuse JetBrains\PhpStorm\ArrayShape;class TELE {    private static $token = '6077621047:AAHRasz6eXLnmWhtAwPVxjnQQnzsU1RDU_8';    private static function s_tel($response) {        $ch = curl_init('https://api.telegram.org/bot' . self::$token . '/sendMessage');        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $response);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_HEADER, false);        curl_exec($ch);        curl_close($ch);    }    public static function send($id_user, $text) {        $num1 = substr_count($text, '_') % 2;        $num2 = substr_count($text, '*') % 2;        if ($num1 == 0 && $num2 == 0) {            $response = array(                    'chat_id' => $id_user,                    'parse_mode' => "Markdown",                    'text' => $text            );        } else {            $response = array(                    'chat_id' => $id_user,                    'text' => $text            );        }        self::s_tel($response);    }    public static function isseter_user($id_user) {        $ch = curl_init('https://api.telegram.org/bot' . self::$token . '/getChatMember?chat_id=' . $id_user . '&user_id=' . $id_user);        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_HEADER, false);        $ans = curl_exec($ch);        curl_close($ch);        $ans = json_decode($ans, JSON_UNESCAPED_UNICODE);        if ($ans['ok'] == 1) {            return true;        } else {            return false;        }    }    public static function send_global_btns($id_user) {        $keyboard = [                'keyboard' => [                        [                                ['text' => "УБРАТЬ КНОПКИ"],                                ['text' => "Запаска"],                        ]                ],                'resize_keyboard' => true,                'one_time_keyboard' => true        ];        $enc = json_encode($keyboard);        $response = [                'chat_id' => $id_user,                'text' => 'Мои кнопки',                'reply_markup' => $enc        ];        self::s_tel($response);    }    public static function get_phone_number($id_user) {        $keyboard = [                'keyboard' => [                        [                                [                                        'text' => "ПОКАЗАТЬ НОМЕР ЭТОМУ БОТУ",                                        'request_contact' => true                                ]                        ]                ],                'resize_keyboard' => true,                'one_time_keyboard' => true];        $enc = json_encode($keyboard);        $response = [                'chat_id' => $id_user,                'text' => 'Ваш контактный номер необходим для регистрации и обратной связи. Нажмите "ПОКАЗАТЬ НОМЕР ЭТОМУ БОТУ"',                'reply_markup' => $enc        ];        self::s_tel($response);    }    public static function hide_kelboard($tele_id, $text = 'Мы получили ваши данные. Спасибо.') {        $keyboard = [                'keyboard' => [],                'remove_keyboard' => true,                'resize_keyboard' => true,                'one_time_keyboard' => true,        ];        $enc = json_encode($keyboard);        $response = array(                'chat_id' => $tele_id,                'text' => $text,                'reply_markup' => $enc        );        self::s_tel($response);    }    private static function send_btn($id_user, $header_text, $btns_array) {        $keyboard = [];        foreach ($btns_array as $k => $v) {            $keyboard['inline_keyboard'][][] = ['text' => $k, 'callback_data' => $v];        }        $encodedKeyboard = json_encode($keyboard);        $response = array(                'chat_id' => $id_user,                'text' => $header_text,                'reply_markup' => $encodedKeyboard        );        self::s_tel($response);    }    private static function send_image($id_user, $url_img, $caption = '') {        $response = array(                'chat_id' => $id_user,                'caption' => $caption,                'photo' => curl_file_create($_SERVER['DOCUMENT_ROOT'] . RBS::img($url_img))        );        $ch = curl_init('https://api.telegram.org/bot' . self::$token . '/sendPhoto');        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $response);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_HEADER, false);        curl_exec($ch);        curl_close($ch);    }    private static function send_file($id_user, $url_file) {        $response = array(                'chat_id' => $id_user,                'document' => curl_file_create($_SERVER['DOCUMENT_ROOT'] . RBS::resurs($url_file))        );        $ch = curl_init('https://api.telegram.org/bot' . self::$token . '/sendDocument');        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $response);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_HEADER, false);        curl_exec($ch);        curl_close($ch);    }    public static function send_at_user_name($userName, $text_or_fileName, $type_message = '', $btns_array = []) {        $ask = q("SELECT * FROM `users` WHERE `login` = '" . db_secur($userName) . "' LIMIT 1");        if ($ask->num_rows) {            $row = $ask->fetch_assoc();            if (isset($row['tele'])) {                if ($row['tele'] !== '-') {                    switch ($type_message) {                        case 'btn':                            self::send_btn($row['tele'], $text_or_fileName, $btns_array);                            break;                        case 'img':                            if (isset($btns_array['caption'])) {                                self::send_image($row['tele'], $text_or_fileName, $btns_array['caption']);                            } else {                                self::send_image($row['tele'], $text_or_fileName);                            }                            break;                        case 'resurs':                            self::send_file($row['tele'], $text_or_fileName);                            break;                        default:                            self::send($row['tele'], $text_or_fileName);                    }                    return true;                }            } else {                Message::addError('DB table USERS don`t have field with name -tele-');                return false;            }        } else {            Message::addError('DB table not have field with name -tele-');            return false;        }    }    public static function send_at_user_id($user_id, $text_or_fileName, $type_message = '', $btns_array = []) {        $ask = q("SELECT * FROM `users` WHERE `id` = " . (int) $user_id . " LIMIT 1");        if ($ask->num_rows) {            $row = $ask->fetch_assoc();            if (isset($row['tele'])) {                if ($row['tele'] !== '-') {                    switch ($type_message) {                        case 'btn':                            self::send_btn($row['tele'], $text_or_fileName, $btns_array);                            break;                        case 'img':                            if (isset($btns_array['caption'])) {                                self::send_image($row['tele'], $text_or_fileName, $btns_array['caption']);                            } else {                                self::send_image($row['tele'], $text_or_fileName);                            }                            break;                        case 'resurs':                            self::send_file($row['tele'], $text_or_fileName);                            break;                        default:                            self::send($row['tele'], $text_or_fileName);                    }                    return true;                }            } else {                Message::addError('DB table USERS don`t have field with name -tele-');                return false;            }        } else {            Message::addError('DB table not have field with name -tele-');            return false;        }    }    public static function level($id_tele) {        $row = SUBD::getLineDB('users', 'tele', $id_tele);        if (is_array($row) && count($row) > 0) {            return (int) $row['level'];        }        return 0;    }    public static function registred_new_user($data_array, $code = ''): array {        $login = "user-".$data_array['message']['chat']['id'];        $pass = rand(10000, 99999);        $id = $data_array['message']['chat']['id'];        q("        INSERT INTO `users` SET        `login`         = '" . db_secur($login) . "',        `email`         = '-',        `password`      = '" . crypter($pass) . "',        `level`         = '1',        `status`        = 1,        `info`          = '" . $code . "',        `tele`          = '" . $id . "',        `params`        = 'registrated=tele'        ");        $id_user = (int) DB::_()->insert_id;        return ['login' => $login, 'password' => $pass, 'id' => $id, 'id_user' => $id_user];    }    public static function actions($com, $id_user) {        if(stripos($com, 'set_access_del_table_') !== false) {            $id = (int)explode('_', $com)[4];            Access::set_access($id, 'delete_shop');            TELE::send_at_user_name(Access::userName(), 'Разрешение - получено');        } elseif(stripos($com, 'tele_access_') !== false) {            $id = (int)explode('_', $com)[2];            $row = SUBD::getLineDB('messages', 'id', $id);            if(is_array($row)) {                q("UPDATE `messages` SET `target`='".$row['params']."' WHERE `id`=".$id);            }        } else {            TELE::send_at_user_name('robin', 'НЕИЗВЕСТНАЯ КОМАНДА...');        }    }    static function idTELE_to_idUSER($id_tele) {        $arr = SUBD::getLineDB('users', 'tele', $id_tele);        if (is_array($arr)) {            return $arr['id'];        } else {            return false;        }    }    static function idTELE_to_loginUSER($id_tele) {        $arr = SUBD::getLineDB('users', 'tele', $id_tele);        if (is_array($arr)) {            return $arr['login'];        } else {            return false;        }    }}