<?phpclass SEARCH {    public static function reindex_all_products() {        $lines = [];        $rows = SUBD::getAllDB('shops');        foreach($rows as $v) {            $all = SQL_ROWS_FIELD(q("SELECT id, name FROM products_".$v['id']." WHERE status='active'"), 'id');            foreach($all as $vv) {                $lines[] = "('".mb_strtolower($vv['name'])."', ".(int)$vv['id'].", ".(int)$v['id'].", -1)";            }        }        if(count($lines) > 0) {            q("INSERT INTO indexer (name, prod_id, shop_id, city_id) VALUES ".implode(',',$lines)." ");        }    }    public static function search_context(string $txt, bool $rnd=false, int $count_max=-1): array    {        if($rnd) {            $rnd = " ORDER BY RAND() ";        } else {            $rnd = "";        }        if($count_max >= 0) {            $count_max = " LIMIT ".$count_max." ";        } else {            $count_max = "";        }        $txt = db_secur($txt);        $txt = explode(' ', $txt);        $query = "        SELECT id, name, shop_id, prod_id AS product_id, showed FROM indexer WHERE         MATCH(name) AGAINST('".implode("*' IN BOOLEAN MODE) OR MATCH(name) AGAINST('", $txt)."*'         IN BOOLEAN MODE)".$rnd.$count_max;        return SQL_ROWS(q($query));    }    public static function set_finder_index(int $shop_id, int $product_id, string $name, int $city_id=-1) {        $owner_shop = (int)SQL_ONE_ROW(q("SELECT owner FROM shops WHERE id=".$shop_id." LIMIT 1"))['owner'];        $ask = q("SELECT id FROM indexer WHERE shop_id=".$shop_id." AND prod_id=".$product_id." ");        if($ask->num_rows) {            $row = $ask->fetch_assoc();            q("                UPDATE indexer SET                 name='".db_secur(mb_strtolower($name))."',                 city_id=".$city_id.",                owner_id=".$owner_shop."                WHERE                 id=".(int)$row['id']            );        } else {            q("                INSERT INTO indexer SET                 name='".db_secur(mb_strtolower($name))."',                 shop_id=".$shop_id.",                 owner_id=".$owner_shop.",                 prod_id=".$product_id.",                 city_id=".$city_id            );        }    }    public static function set_categories_parameters(int $shop_id, int $product_id, int $main_cat, int $under, int $list) {        $ask = q("SELECT id FROM indexer WHERE shop_id=".$shop_id." AND prod_id=".$product_id." ");        if($ask->num_rows) {            $row = $ask->fetch_assoc();            q("            UPDATE indexer SET             shops_categorys='".$main_cat."',             shops_undercats='".$under."',             shops_lists='".$list."'            WHERE id=".(int)$row['id']);        }    }    public static function del_shop(int $shop_id) {        q("DELETE FROM indexer WHERE shop_id=".$shop_id);    }    public static function find(string $text, int $city_id=-1, $with_cataloger=false, $only_active=false): array {        $ans = [];        $find = "";        $active = "";        if($only_active) {            $active = " `active`=1 AND ";        }        if($city_id !== -1) {            $find = "AND city_id=".$city_id." ";        }        $rows = SQL_ROWS_FIELD(            q("            SELECT indexer.id, indexer.shop_id, indexer.prod_id AS product_id FROM indexer             WHERE ".$active." name LIKE '%".db_secur(mb_strtolower($text))."%' ".$find."            ORDER BY RAND() LIMIT 30"), 'id');        $CAT = new CATALOGER();        if(count($rows) > 0) {            $rows = SHOP::get_products_list($rows);            foreach($rows as $v) {                $ans[] = [                    'ID'=>$v['SHOP']['PRODUCT_ID'],                    'SHOP_ID'=>$v['SHOP']['SHOP_ID'],                    'NAME'=>$v['SHOP']['PRODUCT_NAME'],                    'IMG'=>$v['SHOP']['IMG'],                    'MAIN_CAT'=>$CAT->id2main_cat((int)$v['SHOP']['main_cat']),                    'MAIN_CAT_TRANS'=>$CAT->id2main_cat((int)$v['SHOP']['main_cat'], true),                    'UNDER_CAT'=>$CAT->id2under_cat((int)$v['SHOP']['under_cat']),                    'UNDER_CAT_TRANS'=>$CAT->id2under_cat((int)$v['SHOP']['under_cat'], true),                    'ACTION_LIST'=>$CAT->id2under_cat((int)$v['SHOP']['action_list']),                    'ACTION_LIST_TRANS'=>$CAT->id2under_cat((int)$v['SHOP']['action_list'], true),                    'TYPE'=>'PRODUCT',                ];            }        }        if(mb_strlen($text) >= 2) {            $m_cats = VALUES::rename_array_keys_from_item_field($CAT->main_cats, 'category', 3);            $m_cats = VALUES::exist_in_array_keys($m_cats, $text);            foreach ($m_cats as $v) {                $ans[] = [                        'TYPE' => 'LINK',                        'NAME' => $v['category'],                        'LINK' => '/' . $v['cat_trans'],                        'HINT' => '',                ];            }            $m_cats = VALUES::rename_array_keys_from_item_field($CAT->under_cats, 'under_cat');            $m_cats = VALUES::exist_in_array_keys($m_cats, $text);            foreach ($m_cats as $v) {                $ans[] = [                        'TYPE' => 'LINK',                        'NAME' => $v['under_cat'],                        'LINK' => '/' . $CAT->id2main_cat($v['category'], true) . "/" . $v['undercat_trans'],                        'HINT' => $CAT->id2main_cat($v['category']) . " / " . $v['under_cat'],                ];            }            $m_cats = VALUES::rename_array_keys_from_item_field($CAT->action_lists, 'lists');            $m_cats = VALUES::exist_in_array_keys($m_cats, $text);            foreach ($m_cats as $v) {                $ans[] = [                        'TYPE' => 'LINK',                        'NAME' => $v['lists'],                        'LINK' => '/' . $CAT->id2main_cat($v['main_cat'], true) . "/" . $CAT->id2under_cat($v['undercat'], true) . "/" . $v['translit'],                        'HINT' => $CAT->id2main_cat($v['main_cat']) . " / " . $CAT->id2under_cat($v['undercat']) . " / " . $v['lists'],                ];            }        }        return $ans;    }}