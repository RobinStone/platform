<?phpuse JetBrains\PhpStorm\ArrayShape;class CODE {    public static function get_fragment($file_root_path, $fragment_name): array    {        $types = 'mixed';        $row = SQL_ONE_ROW(q("           SELECT * FROM `site` WHERE            `page`='".db_secur($file_root_path)."' AND           `fragment`='".db_secur($fragment_name)."'            LIMIT 1           "));        if($row !== false) {            $types = $row['type_code'];        }        if(file_exists($file_root_path)) {            $inputString = file_get_contents($file_root_path);            $startTag = '<?php f_(\'' . $fragment_name . '\',';            $endTag = 'f_end(\'' . $fragment_name . '\'); ?>';            $startPos = strpos($inputString, $startTag);            if ($startPos === false) {                return [                    'code'=>'',                    'types'=>'null',                ];            }            $endPos = strpos($inputString, $endTag, $startPos);            if ($endPos === false) {                return [                    'code'=>'',                    'types'=>'null',                ];            }            $startPos += strlen($startTag);            $length = $endPos - $startPos;            $txt = substr($inputString, $startPos, $length);            $lines = self::text_to_lines($txt);//            say($lines);            array_shift($lines);            array_pop($lines);            return [                'code'=>implode(PHP_EOL, $lines),                'types'=>$types,            ];        } else {            t("Файл, запрошенный на редактирования не существует по указанному пути\r\n".$file_root_path);            Message::addError("Файл, запрошенный на редактирования не существует по указанному пути\r\n".$file_root_path);        }        return [            'code'=>'',            'types'=>'null',        ];    }    private static function text_to_lines($txt): array    {        $lines = explode(PHP_EOL, $txt);        if(count($lines) < 2) {            $lines = explode("\r", $txt);        }        return $lines;    }    public static function get_iteration_fragment($file_root_path, $fragment_name, $iteration_back=-1): array    {        if($iteration_back === -1) {            $row = SQL_ONE_ROW(q("               SELECT * FROM `site` WHERE                `page`='".db_secur($file_root_path)."' AND               `fragment`='".db_secur($fragment_name)."'                ORDER BY `id` ASC LIMIT 1                "));        } else {            $row = SQL_ONE_ROW(q("               SELECT * FROM `site` WHERE                `page`='".db_secur($file_root_path)."' AND               `fragment`='".db_secur($fragment_name)."'                ORDER BY `id` DESC LIMIT ".(int)$iteration_back.",1                "));        }        if($row === false) {            return [                'code'=>'',                'types'=>'html',            ];        } else {            return [                'code'=>unserialize($row['content']),                'types'=>$row['type_code'],            ];        }    }    private static function save_new_fragment($file_root_path, $fragment_name, $fragment_text, $type_code='mixed', $min_access_level=3): void    {        $access_types = ['mixed', 'html', 'js', 'css', 'php'];        if(!in_array($type_code, $access_types)) {            $type_code = 'mixed';        }        q("            INSERT INTO `site` SET             `page`='".db_secur($file_root_path)."',            `fragment`='".db_secur($fragment_name)."',            `type_code`='".$type_code."',            `dt_change`='".date('Y-m-d H:i:s')."',            `actor`=".Access::userID().",            `min_level`='".(int)$min_access_level."',            `content`='".db_secur(serialize($fragment_text))."'            ");    }    private static function inject_fragment_in_file($file_root_path, $fragment_name, $fragment_text): void    {        if(!file_exists($file_root_path)) {            return;        }        $ans = [];        $fragment_arr = self::text_to_lines($fragment_text);        $arr = self::text_to_lines(file_get_contents($file_root_path));        $rec = true;        foreach($arr as $k=>$v) {            if(str_contains($v, "f_('" . $fragment_name . "'")) {                $rec = false;                $ans[] = $v;                foreach($fragment_arr as $kk=>$vv) {                    $ans[] = $vv;                }            }            if(str_contains($v, "f_end('" . $fragment_name . "'")) {                $rec = true;            }            if($rec) {                $ans[] = $v;            }        }        if(file_put_contents($file_root_path, implode(PHP_EOL, $ans))) {            return;        }    }    public static function save_fragment($file_root_path, $fragment_name, $fragment_text): bool    {        $types = 'mixed';        $min_access_level = 3;        $row = SQL_ONE_ROW(q("               SELECT * FROM `site` WHERE                `page`='".db_secur($file_root_path)."' AND               `fragment`='".db_secur($fragment_name)."'                "));        if($row === false) {            self::save_new_fragment($file_root_path, $fragment_name, self::get_fragment($file_root_path, $fragment_name)['code'], $types);        } else {            $types = $row['type_code'];            $min_access_level = (int)$row['min_level'];            if(Access::scanLevel() < (int)$row['min_level']) {                Message::addError('Ваш уровень допуска не разрешает изменять данный фрагмент!..');                return false;            }        }        if($types !== 'php') {            if (strpos($fragment_text, "<?") !== false) {                Message::addError('В сохраняемом блоке не должен присутствовать PHP код!..');                return false;            }        }        self::save_new_fragment($file_root_path, $fragment_name, $fragment_text, $types, $min_access_level);        self::inject_fragment_in_file($file_root_path, $fragment_name, $fragment_text);        t("Изменения контента:\r\n".$file_root_path."\r\n".$fragment_name);        return true;    }    #[ArrayShape(['code' => "mixed", 'types' => "mixed", 'errors' => "array"])] public static function back_fragment_at_steps($file_root_path, $fragment_name, int $count_steps=1): array    {        $err = [];        $rows = SQL_ROWS(q("        SELECT * FROM `site` WHERE         `page`='".db_secur($file_root_path)."' AND        `fragment`='".db_secur($fragment_name)."'        ORDER BY `id` DESC         "));        if(count($rows) - $count_steps <= 0) {            $first = array_shift($rows);            $err[] = 'Попытка откатить версию на большее чем возможно шагов.';        }        if(count($rows) > 0) {            $dell = [];            foreach($rows as $k=>$v) {                if($count_steps <= 0) {                    break;                }                $dell[] = (int)$v['id'];                --$count_steps;            }            q("DELETE FROM `site` WHERE `id` IN (".implode(',',$dell).") ");            $first = SQL_ONE_ROW(q("               SELECT * FROM `site` WHERE                `page`='".db_secur($file_root_path)."' AND               `fragment`='".db_secur($fragment_name)."'               ORDER BY `id` DESC                "));        }        self::inject_fragment_in_file($file_root_path, $fragment_name, unserialize($first['content']));        return [            'code'=>unserialize($first['content']),            'types'=>$first['type_code'],            'errors'=>$err,        ];    }}