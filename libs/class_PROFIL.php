<?phpclass PROFIL{    private string $user;    public array $sys_params;    private mixed $user_main;    public int $id = -1;    public array $errors = [];    public int $timezone = 0;    function __construct($id_user)    {        $row = SUBD::getLineDB('users', 'id', (int)$id_user);        if ($row !== false) {//            $_SESSION['user'] = $row;            $this->id = (int)$id_user;            $this->user = $row['params'] ?? 'begin=1';            $this->user_main = $row;            $this->user = VALUES::addParamToString($this->user, 'id', (int)$row['id']);            if ($this->get('img') == '' || $this->get('img') == 'none.svg') {                $this->user = VALUES::addParamToString($this->user, 'img', $row['avatar']);            }            if ($this->get('email') == '') {                $this->user = VALUES::addParamToString($this->user, 'email', $row['email']);            }            if ($this->get('name') == '') {                $this->user = VALUES::addParamToString($this->user, 'name', $row['login']);            }            if ($this->get('phone') == '') {                $this->user = VALUES::addParamToString($this->user, 'phone', $row['phone']);            }            if ($this->get('tele') == '' && VALUES::getParamFromString($this->user, 'tele') !== '-' && VALUES::getParamFromString($this->user, 'tele') !== '') {                $this->user = VALUES::addParamToString($this->user, 'tele', $row['tele']);            }            $this->timezone = (int)self::get('timezone');            $sys = $this->get_field('sys', '');            if($sys !== '') {                $this->sys_params = unserialize($sys);            } else {                $this->sys_params = [];            }            $this->set_field('dataLast', date('Y-m-d H:i:s'));        } else {            $this->errors[] = 'Не найден пользователь с таким ID [' . $id_user . ']';        }    }    public function auth(): bool {        if($this->id !== -1) {            $_SESSION['user'] = $this->user_main;            return true;        }        return false;    }    public function get($param, $if_not_exist=''): string {        $ans = VALUES::getParamFromString($this->user, $param);        if($ans === '') { $ans=$if_not_exist; }        return $ans;    }    public function set($param, $argum, $auto_save = true): bool    {        $this->user = VALUES::addParamToString($this->user, $param, $argum);        if ($auto_save === true) {            q("UPDATE `users` SET `params` = '" . db_secur($this->user) . "' WHERE `id` = " . $this->id . " ");        }        return true;    }    public function remoove($param, $auto_save = true): bool {        $this->user = VALUES::remooveParamFromString($this->user, $param);        if ($auto_save === true) {            q("UPDATE `users` SET `params` = '" . db_secur($this->user) . "' WHERE `id` = " . $this->id . " ");        }        return true;    }    public function send_TELE($text)    {        $row = SUBD::getLineDB('users', 'id', $this->id);        if (is_array($row) && $row['tele'] !== '-' && $row['tele'] !== '') {            TELE::send_at_user_name($row['login'], $text);        }    }    public function get_field($name, $if_not_exist='') {        if(isset($this->user_main[$name])) {            $ans = $this->user_main[$name];        } else {            $ans = $if_not_exist;        }        return $ans;    }    public function set_field($name_field, $data) {        q("UPDATE `users` SET `".db_secur($name_field)."` = '".db_secur($data)."' WHERE `id` =".(int)$this->id);        return true;    }    public function update_profil($profil_obj): bool {        foreach ($profil_obj as $k => $v) {            if (!is_object($v)) {                $this->set($k, $profil_obj->$k, false);            } else {                $new = [];                $type = '';                foreach ($v as $key => $i) {                    switch ($key) {                        case 'Глоссарий':                            $type = 'Глоссарий';                            break;                        case 'Основное образование':                            $type = 'Диплом';                            break;                        case 'Дополнительне образование':                            $type = 'Доп. образование';                            break;                    }                    foreach ($i as $kk => $vv) {                        $new[$kk] = [                            'id' => $vv->id,                            'title' => $vv->title,                            'text' => $vv->text,                            'category' => $type                        ];                    }                }                $del_array = [];                $ask = SUBD::getAllLinesDB('master_cells', 'id_master', (int)$this->id);                $rows = [];                if (is_array($ask) && count($ask) > 0) {                    foreach ($ask as $itm) {                        if (!isset($new[$itm['id']])) {                            $del_array[] = (int)$itm['id'];                        } else {                            $rows[$itm['id']] = $itm;                            q("UPDATE `master_cells` SET `title` = '" . db_secur($itm['title']) . "', `txt` = '" . db_secur($itm['text']) . "' WHERE `id` = " . (int)$itm['id'] . " ");                        }                    }                }                foreach ($new as $kkk => $item) {                    if (isset($rows[$kkk])) {                        q("UPDATE `master_cells` SET `title` = '" . db_secur($item['title']) . "', `txt` = '" . db_secur($item['text']) . "' WHERE `id` = " . (int)$item['id'] . " ");                        unset($new[$kkk]);                    } else {                        q("INSERT INTO `master_cells` SET `id_master` = " . (int)$this->id . ", `type` = '" . db_secur($item['category']) . "', `title` = '" . db_secur($item['title']) . "', `txt` = '" . db_secur($item['text']) . "' ");                    }                }                if (count($del_array) > 0) {                    q("DELETE FROM `master_cells` WHERE `id` IN(" . implode(',', $del_array) . ") ");                }            }        }        $this->set('updated', date('Y-m-d H:i:s'));        return true;    }    public function js_execurter($array)    {        $ans = 'error';        if (isset($array['type'])) {            switch ($array['type']) {                case 'get':                    if (isset($array['get'])) {                        $ans = $this->get($array['get']);                    }                    break;                case 'set':                    if (isset($array['param'], $array['argum'])) {                        if ($this->set($array['param'], $array['argum']) === true) {                            $ans = 'ok';                        } else {                            $ans = 'not set this param';                        }                    }                    break;                case 'reserved_time':                    $cal = new CALENDAR();                    $cal_ans = $cal->reserved_time($array['datatime'], $array['spec_id']);                    if ($cal_ans === true) {                        $ans = 'ok';                    } else {                        $ans = $cal_ans;                    }                    break;                case 'get_all_datas':                    if (Access::scanModality() === 'admin' || Access::scanModality() === 'super-admin' || Access::scanModality() === 'teacher-curator') {                        $arr = explode('|', $this->user);                        $ans = [];                        foreach ($arr as $v) {                            $itm = explode('=', $v);                            if (is_array($itm) && $itm[0] !== '') {                                $ans[$itm[0]] = $itm[1];                            }                        }                        if (isset($ans['questions'])) {                            $ans['questions'] = explode('^^^', $ans['questions']);                        }                        $ans['role'] = $this->user_main['modality'];                    } else {                        $ans = 'Для выполнения данной операции ваша модальность должна быть admin или выше...<br>В доступе отказано.';                    }                    break;                default:                    $ans = 'error';            }        }        return $ans;    }    public static function get_user($id)    {        return SUBD::getLineDB('users', 'id', $id);    }    public static function init($user_id):PROFIL|null {        if((int)$user_id === -1) {            return null;        }        if(!isset(Core::$INIT['PROFIL'])) {            Core::$INIT['PROFIL'] = new PROFIL($user_id);        }        return Core::$INIT['PROFIL'];    }    /**     * В переменную $val_filter - передаётся или login или id или email     * в зависимости от того что мы передадим в $from - это переменная типа enum PROFIL_TYPE     * @param $val_filter     * @param PROFIL_TYPE $from     * @return PROFIL|null     */    public static function create($val_filter, PROFIL_TYPE $from): ?PROFIL    {        $type = '';        switch ($from) {            case PROFIL_TYPE::login:                $type = 'login';                break;            case PROFIL_TYPE::id:                $type = 'id';                break;            case PROFIL_TYPE::email:                $type = 'email';                break;            default:                return null;                break;        }        $row = SUBD::getLineDB('users', $type, db_secur($val_filter));        if(is_array($row)) {            return new PROFIL((int)$row['id']);        }        return null;    }    public static function AUTH_LOGIN($id_user) {        $row = SUBD::getLineDB('users', 'id', (int)$id_user);        $_SESSION['user'] = $row;    }    public function add_sys_param($param, $argum, $auto_save=true) {        $this->sys_params[$param] = $argum;        if($auto_save) {            $this->set_field('sys', serialize($this->sys_params));        }    }    public function get_sys_param($param) {        return $this->sys_params[$param] ?? '';    }    public function get_all_sys_params() {        return $this->sys_params ?? [];    }    public function set_all_sys_params(array $arr, bool $auto_save=true) {        $this->sys_params = $arr;        if($auto_save) {            $this->set_field('sys', serialize($this->sys_params));        }    }    public function del_sys_param($param, $auto_save=true) {        if(isset($this->sys_params[$param])) {            unset($this->sys_params[$param]);            if($auto_save) {                $this->set_field('sys', serialize($this->sys_params));            }        }    }    public function del_all_sys_params($auto_save=true) {        $this->sys_params = [];        if($auto_save) {            $this->set_field('sys', serialize($this->sys_params));        }    }    public function set_attachment(string $attachment, string|array $value) {        $arr = $this->get_all_sys_params();        $arr = set_attachment_value($arr, $attachment, $value);        $this->set_all_sys_params($arr);    }    public function delete_attachment(string $attachment) {        $arr = $this->get_all_sys_params();        $arr = delete_attachment_key($arr, $attachment);        $this->set_all_sys_params($arr);    }    public function get_attachment(string $attachment, $if_not_exist=''): array|string    {        return get_attachment_value($this->get_all_sys_params(), $attachment, $if_not_exist);    }    /**     * Устанавливает любой тип предупреждений от MESSAGE - просто уведомление до ERROR - ошибка программы     * MESSAGE, ATTANTINTION - рекомендательный тип, всё остальное может блокировать какие то операции     * до тех пор, пока эти предупреждения не будут исправлены     * @param ALERT_TYPE $alert_type - MESSAGE, ATTANTINTION, WARNING, DANGER, ERROR     * @param string|array $mess -  текст сообщения / ошибки, может быть массивом в котором     *                              обязательно ['text'=>'bla-bla', ... какие то ещё параметры]     * @param string $alert_name - по дефолту - INCREMENT, если ключ сообщения не важен, можно оставить по умолчанию     * @return void     */    public function add_alert(ALERT_TYPE $alert_type, string|array $mess, string $alert_name='INCREMENT') {        if($alert_name !== 'INCREMENT') {            $this->set_attachment('ALERTS.'.$alert_type->value.".".$alert_name, $mess);        } else {            $arr = $this->get_attachment('ALERTS.'.$alert_type->value);            if($arr === '') { $arr = []; }            $max = 0;            foreach($arr as $k=>$v) {                if($max < (int)$k) {                    $max = (int)$k;                }            }            ++$max;            $this->set_attachment('ALERTS.'.$alert_type->value.".".$max, $mess);        }    }    public function get_all_alerts() {        return $this->get_sys_param('ALERTS');    }    public function isset_alert_key(string $name_key_of_alert): bool|array    {        $arr = $this->get_all_alerts();        if($arr === '') { $arr = []; }        foreach($arr as $k=>$v) {            foreach($v as $kk=>$vv) {                if($name_key_of_alert === $kk) {                    return [                        'type'=>$k,                        'text'=>$vv                    ];                }            }        }        return false;    }    public function delete_alert(ALERT_TYPE $alert_type, string $id_or_name_alert) {        $this->delete_attachment('ALERTS.'.$alert_type->value.'.'.$id_or_name_alert);    }    public function get_all_alert_type(ALERT_TYPE $alert_type) {        return $this->get_all_alerts()[$alert_type->value];    }}