let begin_changer = false;tiny_active = new EventRBS();window.addEventListener('load', function() {    ymaps.ready(function() {        let suggestView = new ymaps.SuggestView('address');    });});tiny_active.subscribe(function() {    let url = new URL(location.href);    if(localStorage.getItem('formValues') !== null && url.searchParams.get('com') !== 'edit') {        setTimeout(function() {            load_buff();        }, 200);        $('button[onclick="clear_all_forms()"]').get(0).style.display = 'flex';    } else {        let url = new URL(location.href);        if(url.searchParams.get('com') !== 'edit') {            setTimeout(function() {                begin_changer = true;            }, 200);        }    }});let timer_saver = null;function changer() {    if(timer_saver !== null) {        clearTimeout(timer_saver);    }    if(begin_changer) {        timer_saver = setTimeout(function () {            save_buff();            timer_saver = null;            $('#cleator').css('display', 'flex');        }, 1000);    }}$(document).on('input', 'input, textarea, select', function(e) {    let obj = $(this);    let main = obj.closest('tr');    let type = main.attr('data-field');    switch(type) {        case 'input':        case 'input-object-counter':        case 'input-object-place':            main.attr('data-real', obj.val());            main.attr('data-changed', true);            break;    }    changer();});$(document).on('input', '#address', function(e) {    $('.lime-back').removeClass('lime-back');});$(document).on('change, blur', '#address', function(e) {    update_place();});$(document).on('click', 'tr[data-field="list"]', function(e) {    let obj = this;    $(obj).blur();    console.dir(props_items);    let props_item = props_items[$(obj).children(1).text()];    if($(obj).children(1).text() === 'Телефон заказа') {        let inpt = $(this).find('td:nth-child(2) input');        let lst = {            'Добавить номер в список': function () {                info_inputString(undefined, function () {                    let buff = bufferText;                    info_inputString(undefined, function () {                        SENDER('add_phone', {number: buff, descr: bufferText}, function (mess) {                            mess_executer(mess, function (mess) {                                $(inpt).val(buff);                                phones[buff] = bufferText;                                changer();                            });                        });                    }, 'Введите коментарий к номеру<br>:' + buff, '', 'Ввод');                }, 'Введите номер телефона, который будет помещён в список ваших контактов:', '', 'Ввод');            },        };        for (let i in phones) {            lst[phones[i]['number'] + " - " + phones[i]['descr']] = function () {                $(inpt).val(phones[i]['number']);                $(obj).attr('data-real', phones[i]['number']).attr('data-changed', true);                changer();            };        }        info_variants(transform_pos('center'), lst, 'Укажите телефон, который будет привязан к этому лоту:');    } else {        let lst = {};        for(let i in props_item['default']) {            lst[props_item['default'][i]] = function() {                $(obj).find('td:nth-child(2) input').val(props_item['default'][i]);                $(obj).attr('data-real', props_item['default'][i]).attr('data-changed', true);                changer();            }        }        info_variants(transform_pos('center'), lst, props_item['title']);    }});function change_bool_state(obj, state) {    let cont = $(obj).closest('.toggler');    let tr = cont.closest('tr');    cont.find('.sel').removeClass('sel');    if(state) {        cont.find('button:first-child').addClass('sel');        tr.attr('data-real', 1).attr('data-changed', true);    } else {        cont.find('button:last-child').addClass('sel');        tr.attr('data-real', 0).attr('data-changed', true);    }    changer();}function update_place() {    setTimeout(function() {        let addr = $('#address').val();        if(addr.length > 2) {            let geocoder = ymaps.geocode(addr);            geocoder.then(                function (res) {                    let firstGeoObject = res.geoObjects.get(0);                    // Проверка на наличие геообъекта                    if (!firstGeoObject) {                        say('Ошибка поиска, пожалуйста укажите более конкретный адрес...', 2)                        return;                    }                    let coords = firstGeoObject.geometry.getCoordinates();                    let ans = {};                    let addressComponents = firstGeoObject.properties.get('metaDataProperty.GeocoderMetaData.Address.Components');                    for(let i in addressComponents) {                        ans[addressComponents[i].kind] = addressComponents[i].name;                    }                    if(typeof ans['locality'] === 'undefined') {                        ans['locality'] = addr;                    }                    set_value_field('Широта', coords[0]);                    set_value_field('Долгота', coords[1]);                    place_GEO_to_id_GEO(ans);                    changer();                    // console.dir(coords);                    // console.dir(ans);                    SENDER('save_new_address', {address: addr}, function(mess) {                        mess_executer(mess, function(mess) {                            $('#address').closest('td').addClass('lime-back');                        });                    });                },                function (err) {                    say('error');                    console.log(err);                }            );        }    }, 300);}function add_properties() {    let lst = {        'Число (1, 2, 3... 1.2, 2.3...)': function() {            add_prop('float');        },        'Строка (строка до 255 символов)': function() {            add_prop('string');        },        // 'Текст (многострочный текст)': function() {        //     add_prop('text');        // },        'Ссылка (на видео, на сторонний сайт (ресурс))': function() {            add_prop('link');        },    };    if($('.insert-files').length === 0) {        lst['Изображение (фото)'] = function() {            add_prop('image');        };    }    info_variants(undefined, lst);}// Добавление динамических полейfunction add_prop(type, visible=1, blocked=0, key_val = []) {    let bl = ' opacity: 0.3; pointer-events: none; ';    let vis = ' display: none; ';    let btn_del = '';    if(visible) { vis = ''; }    if(!blocked) {        bl = '';        btn_del = '<td width="40" style="text-align: right; vertical-align: baseline"><button onclick="del_item_set(this)" class="remoover-btn action-btn">&#10005;</button></td>';    }    let block = '';    switch(type) {        case 'float':        case 'int':            block = $('<tr style="'+vis+' '+bl+'" class="created-row" data-type="'+type+'"><td><input list="list-number" placeholder="название поля" type="text"></td><td><input placeholder="число" type="number"></td>'+btn_del+'</tr>');            if(key_val !== []) {                $(block).find('td:first-child input').val(key_val[0]);                $(block).find('td:nth-child(2) input').val(key_val[1]);            }            break;        case 'string':            block = $('<tr style="'+vis+' '+bl+'" class="created-row" data-type="string"><td><input list="list-string" placeholder="название поля" type="text"></td><td><input placeholder="строка до 255 симв." type="text"></td>'+btn_del+'</tr>');            if(key_val !== []) {                $(block).find('td:first-child input').val(key_val[0]);                $(block).find('td:nth-child(2) input').val(key_val[1]);            }            break;        case 'list':            block = $('<tr data-list="true" style="'+vis+' '+bl+'" class="created-row" data-type="list"><td><input list="list-string" placeholder="название поля" type="text"></td><td><input placeholder="укажите вариант из списка" type="text"></td>'+btn_del+'</tr>');            break;        case 'text':            block = $('<tr style="'+vis+' '+bl+'" class="created-row" data-type="text"><td><input list="list-text" placeholder="название поля" type="text"></td><td><textarea placeholder="текст"></textarea></td>'+btn_del+'</tr>');            if(key_val !== []) {                $(block).find('td:first-child input').val(key_val[0]);                $(block).find('td:nth-child(2) textarea').val(key_val[1]);            }            break;        case 'link':            block = $('<tr style="'+vis+' '+bl+'" class="created-row" data-type="link"><td><input list="list-link" placeholder="название поля" type="text"></td><td><input placeholder="https://" type="text"></td>'+btn_del+'</tr>');            if(key_val !== []) {                $(block).find('td:first-child input').val(key_val[0]);                $(block).find('td:nth-child(2) input').val(key_val[1]);            }            break;        case 'image':            block = $('<tr style="'+vis+' '+bl+'" data-type="image"><td>Изображение<br>(фото)</td><td class="insert-files"><label class="action-btn"><input id="file-input" type="file" accept=".jpg, .jpeg, .webp, .png, .gif"></label><div class="list-prev-img flex gap-5"></div></td>'+btn_del+'</tr>');            break;        case 'doc':            block = $('<tr style="'+vis+' '+bl+'" class="created-row" data-type="doc"><td>Документ<br>(WORD, Exel, PDF)</td><td class="insert-files"><label class="action-btn doc"><input id="file-input-doc" type="file" accept=".docx, .pdf, .exel"></label</td>'+btn_del+'</tr>');            break;        default:            say('Не найден нужный тип поля!..', 2);            break;    }    if(block !== '') {        $('.product-creator table:first-child').append(block);    }    check_count_type();    return block;}function create_user_line(type, param, argum) {    add_prop(type, 1, 0, [param, argum]);}function get_last_fields_form() {    SENDER_APP('get_last_fields_form', {}, function(mess) {        console.dir(mess);    });}function del_item_set(obj) {    $(obj).closest('tr').remove();}function del_img(obj) {    info_qest(undefined, function() {        if($(obj).hasAttr('data-old-props-id')) {            let url = new URL(location.href);            SENDER_APP('del_param_from_order', {                shop_id: url.searchParams.get('s'),                param_id: $(obj).attr('data-old-props-id'),            }, function(mess) {                mess_executer(mess, function() {                    say('ok');                });            });        }        let name = $(obj).attr('data-src');        $(obj).closest('tr').attr('data-changed', true);        $(obj).remove();        changer();    }, function() {    }, 'Удалить это изображение ?', 'Да - удалить', 'Нет');}function set_loader_shore(obj) {    let div = $('<div class="shore-created" style="position: absolute;left:0;top:0;width:100%;height:100%;display:flex;justify-content:center;align-items: center;background-color: rgba(0,0,0,0.73);"><img width="80" height="80" src="/IMG/SYS/loader.gif"></div>');    $(obj).append(div);}function validate_form() {    let lst = [];    let name = '';    let errors = 0;    if($('.list-prev-img img').length === 0) {        ++errors;    }    $('.created-row').each(function(e, t) {        name = $(t).find('td:first-child input').val();        if(name === '' || lst.includes(name)) {            $(t).find('td:first-child').addClass('error-field');            ++errors;        } else {            lst.push(name);            $(t).find('td:first-child').removeClass('error-field');        }    });    if(errors > 0) { return false; } else { return true; }}function save_product(create_product = true) {    if(validate_form()) {        calc_and_send_new_product([], create_product);    } else {        say('Объявление должно содержать хотя бы<br>одно изображение и все названия полей<br>должны быть заполнены и не содержать повторений...', 2);    }}function save_edited_product() {    save_product(1);    console.log('edited super-puper');}function calc_and_send_new_product(arr_imgs_sys_names=[], create_product=true) {    let url = new URL(location.href);    let pr_id = -1;    if(typeof url.searchParams.get('ord') !== 'undefined') {        pr_id = parseInt(url.searchParams.get('ord'));    }    if(typeof props_items === 'undefined') {        console.error('Не загружены описания полей "props_items"');    } else {        console.dir(props_items);    }    let send = true;    let errors = [];    let td = null; // product_id: pr_id,    let lst = Object.assign({}, props_items);    for(let i in lst) {        let item = lst[i];        let obj = $('tr[data-param-id="'+lst[i]['id']+'"]');        lst[i]['value'] = obj.attr('data-real');        if(obj.attr('data-changed')) {            lst[i]['changed'] = true;        } else {            lst[i]['changed'] = false;        }        if(lst[i]['field'] === 'image') {            let imgs = [];            $('.insert-files button').each(function(e,t) {                imgs.push($(t).attr('data-name'));            });            lst[i]['value'] = imgs;        }        if(lst[i]['field'] === 'tiny') {            lst[i]['value'] = unescape(lst[i]['value']);        }        if(lst[i]['value'] === '' && item['required'] === 1 && item['visible'] === 1) {            send = false;            errors.push('Не передано обязательное поле - '+i);        }    }    if($('tr[data-type="image"]').attr('data-changed')) {        say('ok');        lst['Изображение']['changed'] = true;    }    console.log('CALCULATED fields complite > ');    console.dir(lst);    if(errors.length > 0) {        console.error(errors.join("\r\n"));        for(let i in errors) {            say(errors[i], 2);        }        return false;    }    if(send === true && create_product === true) {        buffer_app = 'SHOPS';        SENDER_APP('create_product', {props: lst}, function(mess) {            mess = JSON.parse(mess);            // console.dir(mess);            if(mess.status !== 'ok') {                error_executing(mess);            } else {                $('.table-focus').find('.close-window-btn').click();                clear_buffer_creator();                if(typeof buffer_method_start !== 'undefined') {                    setTimeout(buffer_method_start, 5);                }            }        });    } else {        for(let i in lst) {            if(lst[i]['changed'] === false) {                delete lst[i];            }        }        console.log('Params for change');        console.dir(lst);        buffer_app = 'SHOPS';        SENDER_APP('create_product', {props: lst, product_id: pr_id}, function(mess) {            mess = JSON.parse(mess);            // console.dir(mess);            if(mess.status !== 'ok') {                error_executing(mess);            } else {                $('.table-focus').find('.close-window-btn').click();                clear_buffer_creator();                location.reload();            }        });    }}buffer_cat_id = -1;buffer_under_cat_id = -1;buffer_action_list_id = -1;function change_main_cat(obj) {    let id = parseInt($(obj).find('option[value="'+$(obj).val()+'"]').attr('data-id'));    $(obj).closest('tr').attr('data-real', id).attr('data-changed', true);    $('tr[data-field="input-object-undercat"]').attr('data-real', -1).attr('data-changed', true);    $('tr[data-field="input-object-actionlist"]').attr('data-real', -1).attr('data-changed', true);    buffer_cat_id = id;    buffer_under_cat_id = -1;    $('#under-cat').empty();    $('#action-list').empty();    SENDER_APP('get_undercats_from_cat_id', {id: id}, function(mess) {        mess = JSON.parse(mess);        if(Object.keys(mess.params).length > 0) {            $('tr[data-field="input-object-undercat"]').removeClass('disabled');        } else {            $('tr[data-field="input-object-undercat"]').addClass('disabled');            $('tr[data-field="input-object-actionlist"]').addClass('disabled');        }        $('#under-cat').append('<option data-id="-1" value="-">-</option>');        for(let i in mess.params) {            $('#under-cat').append('<option data-id="'+mess.params[i].id+'" value="'+mess.params[i].under_cat+'">'+mess.params[i].under_cat+'</option>');        }        changer();    });}function change_under_cat(obj) {    let id = parseInt($(obj).find('option[value="'+$(obj).val()+'"]').attr('data-id'));    $(obj).closest('tr').attr('data-real', id).attr('changed', true);    $('tr[data-field="input-object-actionlist"]').attr('data-real', -1).attr('data-changed', true);    buffer_under_cat_id = id;    buffer_action_list_id = -1;    $('#action-list').empty();    SENDER_APP('get_action_list_from_undercat_id', {id_cat: buffer_cat_id, id_undercat: id}, function(mess) {        mess = JSON.parse(mess);        if(Object.keys(mess.params).length > 0) {            $('tr[data-field="input-object-actionlist"]').removeClass('disabled');        } else {            $('tr[data-field="input-object-actionlist"]').addClass('disabled');        }        console.dir(mess);        $('#action-list').append('<option data-id="-1" value="-">-</option>');        for(let i in mess.params) {            $('#action-list').append('<option data-id="'+mess.params[i].id+'" value="'+mess.params[i].lists+'">'+mess.params[i].lists+'</option>');        }        changer();    });}function change_action_list(obj) {    buffer_action_list_id = parseInt($(obj).find('option[value="' + $(obj).val() + '"]').attr('data-id'));    $(obj).closest('tr').attr('data-real', buffer_action_list_id).attr('data-changed', true);    changer();}function update_cataloger_name_to_id() {    let maincat = $('tr[data-field="sys-caterory"] td:nth-child(2) select option:selected').attr('data-id');    let undercat = $('tr[data-field="sys-under-cat"] td:nth-child(2) select option:selected').attr('data-id');    let actionlist = $('tr[data-field="sys-action-list"] td:nth-child(2) select option:selected').attr('data-id');    console.log('+++++++++++++++++++++++++++');    buffer_cat_id = maincat;    buffer_under_cat_id = undercat;    buffer_action_list_id = actionlist;}function show_list() {    let lst = {}    console.dir(list_places);    for(let i in list_places) {        if(list_places[i].length >= 2) {            lst[list_places[i]] = function() {                $('#address').val(list_places[i]);                $('#address').closest('tr').attr('data-real', list_places[i]);                $('#address').closest('tr').attr('data-changed', true);                update_place();            };        }    }    lst['Ввести новый адрес сделки'] = function() {        $('#address').val('');        $('#address').focus();        $('.lime-back').removeClass('lime-back');    }    info_variants(transform_pos('center'), lst);}function set_value_field(field_name, value) {    let field = $('tr td:contains("'+field_name+'")').closest('tr');    if(field.length === 0) {        $('tr td input').each(function(e,t) {            if($(t).val() === field_name) {                field = $(t).closest('tr');            }        });    }    if(field.length > 0) {        $(field).find('td:nth-child(2) *').val(value);        $(field).attr('data-real', value);        $(field).attr('data-changed', true);    }}function place_GEO_to_id_GEO(GEO_list) {    console.dir(GEO_list);    SENDER('place_GEO_to_id_GEO', {        country: GEO_list['country'],      // country, locality, province        locality: GEO_list['locality'],    }, function(mess) {        mess_executer(mess, function(mess) {            set_value_field('IDcity', mess.params.city_id);            set_value_field('IDcountry', mess.params.country_id);        });    });}function set_count_type(stat = true) {    if(stat) {        $('tr[data-field="input-object-counter"] input').val(1);        $('tr[data-field="input-object-counter"] input').focus();    } else {        $('tr[data-field="input-object-counter"] input').val(-1);    }    check_count_type();    $('tr[data-field="input-object-counter"]').attr('edited-old', 'true');}function check_count_type() {    let obj = $('tr[data-field="input-object-counter"]');    $('.sel-ch').removeClass('sel-ch');    let count = parseInt($('tr[data-field="input-object-counter"] input').val());    if(count <= -1) {        $('.switcher .checked:nth-child(2)').addClass('sel-ch');        $('.switcher + input').css('color', '#00000000');        obj.attr('data-real', -1);        obj.attr('data-changed', true);    } else {        $('.switcher .checked:nth-child(1)').addClass('sel-ch');        $('.switcher + input').css('color', '#000000');        obj.attr('data-real', count);        obj.attr('data-changed', true);    }    changer();}/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////let buff_form = '';function clear_buffer_creator() {    localStorage.removeItem('formValues');}function save_buff() {    // Сохранение значений формы    console.log('Сохранение значений формы');    const divElement = document.getElementById('product-creator');    const formValues = getFormValues(divElement);    localStorage.setItem('formValues', JSON.stringify(formValues));}function load_buff() {    // Восстановление значения    const divElement = document.getElementById('product-creator');    const savedFormValues = JSON.parse(localStorage.getItem('formValues'));    console.dir(savedFormValues);    setFormValues(divElement, savedFormValues);    setTimeout(function() {        update_cataloger_name_to_id();        let imgs = document.querySelectorAll('.list-prev-img .img-btn img');        if(imgs.length > 0) {            for(let img of imgs) {                upload_files.push(img.getAttribute('src'));            }        }        setTimeout(function() {            begin_changer = true;            $('#cleator').css('display', 'flex');        }, 300);    }, 200);}function clear_all_forms() {    clear_buffer_creator();    location.reload();}// Функция для получения всех значений формы внутри divfunction getFormValues(rootElement) {    let formValues = [];    let name = '';    let val = '';    let obj = '';    let container = 'input';    let type = 'sys';    const trs = rootElement.querySelectorAll('tr');    trs.forEach(tr => {        name = $(tr).find('td:first-child').text();        type = 'sys';        container = 'input';        if(name === '') {            name = $(tr).find('td:first-child input').val();            type = 'user';        }        if(tr.querySelector('td:nth-child(2) input') !== null) {            val = tr.querySelector('td:nth-child(2) input').value;        } else if(tr.querySelector('td:last-child select') !== null) {            val = tr.querySelector('td:last-child select').value;            container = 'select';        } else {            val = '';        }        obj = tr.outerHTML;        if(name === 'Описание') {            val = escape($('#field .ql-editor').html());            container = 'tiny';            obj = '';        }        if(name === 'Изображение(фото)') {            type = 'NOT';        }        if(tr.getAttribute('data-field') === 'bool') {            val = tr.getAttribute('data-real');        }        formValues.push({            name: name,            value: val,            obj: obj,            type: type,            container: container,        });    });    console.dir(formValues);    return formValues;}// Функция для установки всех значений формыfunction setFormValues(rootElement, formValues) {    let obj = {};    let ins = null;    $(rootElement).find('tr').each(function(e,t) {        obj = formValues[e];        ins = $(obj.obj);        if(obj.type !== 'NOT') {            if(obj.type === 'sys') {                if(obj.container === 'input') {                    $(ins).find('input').val(obj.value);                } else if(obj.container === 'select') {                    $(ins).find('select').val(obj.value);                } else if(obj.container === 'tiny') {                    $('#field .ql-blank').html(unescape(obj.value));                    $('tr[data-field="tiny"]').attr('data-real', obj.value).attr('data-changed', true);                } else {                    say('error - not container');                }            } else if(obj.type === 'user') {                $(ins).find('td:first-child input').val(obj.name);                $(ins).find('td:nth-child(2) input').val(obj.value);            }        }        if(obj.obj !== '') {            $(t).after(ins);            $(t).remove();        }        formValues[e]['executed'] = true;    });    for(let i of formValues) {        if(typeof i['executed'] === 'undefined') {            create_user_line('string', i.name, i.value);        }    }}