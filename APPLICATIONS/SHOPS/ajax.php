<?phpuse JetBrains\PhpStorm\ArrayShape;$ans = [];include_once './CONTROLLERS/ajax_before.php';$path = basename(__DIR__, '.php');if(is_dir('./APPLICATIONS/'.$path.'/libs')) {    $files = glob('./APPLICATIONS/'.$path.'/libs/*.php');    foreach($files as $v) {        include_once $v;    }}///////////////////////////////////////////////////////////////////////////////////////////////////////////////// КОД ВЫШЕ ДОБАВЛЯЕМ ВО ВСЕ ajax ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////switch($_POST['com']) {    case 'test':        echo 'Тут находится тестовое сообщение для настройки информационнфх панелей на несколько строк';        break;    case 'get_next_cards':        $CAT = CATALOGER::INIT();        $count = !empty($post['count']) ? $post['count'] : 8;        $isset = !empty($post['isset']) ? $post['isset'] : [];        $rows = INDEXER::get_next_cards($count, $isset, $post);        if(count($rows) === 0) {            ans('ok', ['list'=>'', 'count'=>0]);        }        $rows_prods = SHOP::get_products_list_at_indexer_ids(array_column($rows, 'id'));        ob_start();        foreach($rows_prods as $k=>$v) {            $v['LIKE'] = 0;            $v['IN_BASKET'] = 0;            $shop_id = $v['shop_id'];            $product_id = $v['prod_id'];            $discount = $v['PROPS']['discount'][0]['value'];            include './TEMPLATES/one-cart.php';        }        $fragment = ob_get_clean();        ans('ok', ['list'=>$fragment, 'count'=>count($rows_prods)]);        break;    case 'del_from_addit':        if(Access::scanLevel() < 1) {            error('Вы должны быть авторизованы!..');        }        $err = isset_columns($_POST, ['id_addition', 'shop_id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(!SHOP::is_my_shop($post['shop_id'])) {            error('Запрещено редактирование параметров чужой торговой площадки!..');        }        if(ADD::EXEC('shops')->delete_additional_props((int)$post['id_addition'])) {            ans('ok');        }        break;    case 'add_additional':        if(Access::scanLevel() < 1) {            error('Вы должны быть авторизованы!..');        }        $err = isset_columns($_POST, ['city_id', 'id_shop']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(!SHOP::is_my_shop($post['id_shop'])) {            error('Запрещено редактирование параметров чужой торговой площадки!..');        }        if($price_for_add_additional = SUBD::getLineDB('price_cities', 'city_id', (int)$post['city_id'])) {            $price_for_add_additional = (int)$price_for_add_additional['price'];        } else {            $price_for_add_additional = (int)getParam('default_price_city');        }        if(PAY::is_payed_correct_summ(Access::userID(), $price_for_add_additional) === true) {            PAY::buy(Access::userID(), $price_for_add_additional, 'Списание', 'Кошелёк', 'Подключение города к магазину');            if(ADD::EXEC('shops')->insert('city', $post['id_shop'], (int)$post['city_id'])) {                ans(ADD::$last_id_insert);            }        } else {            error('На вашем счету не хватает средств...<br>Стоимость подключения для этого города: '.$price_for_add_additional.' Р');        }        break;    case 'delete_prods_arr':        if(Access::scanLevel() <= 5) {            error('Доступно авторизованным пользователям с уровнем доступа 5+...');        }        $err = isset_columns($_POST, ['ids', 'id_shop']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        SHOP::delete_products_arr($post['id_shop'], $post['ids']);        ans('ok');        break;    case 'toggle_status_prod':        if(Access::scanLevel() <= 5) {            error('Доступно авторизованным пользователям с уровнем доступа 5+...');        }        $err = isset_columns($_POST, ['ids', 'shop_id', 'status']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(SHOP::set_indexer_status_prods((int)$post['shop_id'], (array)$post['ids'], $post['status'])) {            ans('ok');        }        break;    case 'toggle_status_shop':        if(Access::scanLevel() <= 5) {            error('Доступно авторизованным пользователям с уровнем доступа 5+...');        }        $err = isset_columns($_POST, ['id_shop']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $row = !SHOP::get_status_of_shop($post['id_shop']);        if($row) {            SHOP::enabled_shops([$post['id_shop']]);        } else {            SHOP::disabled_shops([$post['id_shop']]);        }        ans($row);        break;    case 'get_all_shops':        if(Access::scanLevel() <= 6) {            error('Доступно авторизованным пользователям с уровнем доступа 6+...');        }        ans('ok', SQL_ROWS_FIELD(q("SELECT id, logo, name FROM shops"), 'id'));        break;    case 'get_shop_raport':        if(Access::scanLevel() <= 5) {            error('Доступно авторизованным пользователям с уровнем доступа 5+...');        }        $err = isset_columns($_POST, ['id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $arr = SHOP::get_shop($post['id']);        if(file_exists('./IMG/img100x100/'.$arr['logo'])) {            $logo = '/IMG/img100x100/'.$arr['logo'];        } else {            $logo = '/DOWNLOAD/20230721-222633_id-2-878998.svg';        }        $count_products = SHOP::get_count_products_of_shop($arr['id']);        ob_start(); ?>        <div class="flex between" style="margin-bottom: 10px">            <div class="header-div">Площадка: <a href="/<?=$arr['domain']?>" target="_blank" class="action-btn"><b> <?=$arr['name']?></b></a> (id=<?=$arr['id']?>)</div>            <?php            if($arr['active'] == 1) {                echo '<span title="Двойной клик изменит состояние магазина" ondblclick="toggle_status_shop(this, 1, '.$arr['id'].')" class="action-btn" style="padding: 2px 5px; border-radius: 5px; background-color: rgba(0,255,0,0.29)">РАБОТАЕТ</span>';            } else {                echo '<span title="Двойной клик изменит состояние магазина" ondblclick="toggle_status_shop(this, 0, '.$arr['id'].')" class="action-btn" style="padding: 2px 5px; border-radius: 5px; background-color: rgb(255,145,145); color: yellow">ОТКЛ.</span>';            }            ?>            <div><?=$arr['title']?></div>        </div>        <div class="flex gap-10 align-top">            <img src="<?=$logo?>" width="90" height="90" style="object-fit: contain">            <table class="">                <tr style="pointer-events: auto">                    <td>Владелец:</td>                    <td>                        <button onclick="user_card(<?=$arr['owner']['id']?>)" title="Показать информацию владельца" class="action-btn btn-gray btn-gray-text not-border micro-btn"><?=$arr['owner']['login']?></button>                    </td>                    <td>Активен до: </td>                    <td>                        <?php                        $closed = true;                        if(date('Y-m-d H:i:s') > $arr['active_to']) {                            echo '<span style="background-color: red; color: yellow; padding: 0 5px; display: inline-block; border-radius: 5px">ПРОСРОЧЕНО</span>';                        } else {                            $closed = false;                            echo '<span style="font-size: 14px; ">'.VALUES::dateToFormat($arr['active_to']).'</span>';                        }                        ?>                    </td>                    <td>                        <?php                        $days = VALUES::days_between($arr['active_to'], date('Y-m-d H:i:s'));                        if($closed === false) {                            echo '<span style="display: inline-block; padding: 2px 5px; font-size: 14px;">Осталось: '.$days.' дн.</span>';                        } else {                            echo '<span style="display: inline-block; padding: 2px 5px; font-size: 14px; background-color: red; color: yellow; border-radius: 5px">-'.$days.' дн.</span>';                        }                        ?>                    </td>                </tr>                <tr>                    <td>Товаров:</td><td>                        <button title="Список товаров этой площадки" onclick="show_all_products(<?=$arr['id']?>, '<?=$arr['name']?>')" class="action-btn btn-gray btn-gray-text not-border micro-btn"><?=$count_products?></button>                    </td>                    <td></td>                    <td></td>                    <td></td>                </tr>            </table>        </div>        <?php $ans = ob_get_clean();        ans('ok', ['shop'=>$arr, 'html'=>$ans]);        break;    case 'find_shop':        if(Access::scanLevel() <= 5) {            error('Доступно авторизованным пользователям с уровнем доступа 5+...');        }        $err = isset_columns($_POST, ['txt']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $txt = db_secur($post['txt']);        $arr = SQL_ROWS(q("        SELECT shops.id, shops.name, shops.title, shops.owner, users.login FROM shops         LEFT JOIN users ON users.id = shops.owner        WHERE shops.name LIKE '%".$txt."%'        ORDER BY id DESC LIMIT 30        "));        $ans = [];        foreach($arr as $k=>$v) {            $ans[] = "<li onclick='show_shop(this)' data-id='".$v['id']."'>".$v['name']." (".$v['title'].") - ".$v['login']."</li>";        }        ans('ok', ['res'=>$ans]);        break;    case 'reset_cataloger_buffer':        if(file_exists('./RESURSES/cataloger.txt')) {            unlink('./RESURSES/cataloger.txt');        }        ans('ok');        break;    case 'closed_order':        if(Access::scanLevel() <= 0) {            error('Доступно авторизованным пользователям...');        }        $err = isset_columns($_POST, ['id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(SHOP::closed_payed_orders([$post['id']])) {            ans('ok');        }        error('Попытка редатирования чужого заказа или что-то пошло не так...');        break;    case 'buy':        if(Access::scanLevel() <= 0) {            error('Доступно авторизованным пользователям...');        }        $err = isset_columns($_POST, ['arr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        switch($post['arr']['type_pay']) {            case 'со счёта':   //  данные в js берутся из ENUM таблицы orders                $result = BUY::execute_buy_from_cash($post['arr']);                if(isset($result['errors']) && count($result['errors']) > 0) {                    error('Ошибка', $result['errors']);                } else {                    ans('ok');                }                break;            case 'картой':                error('в процессе создания...');                break;            default:                error('Неопознанный метод оплаты...');                break;        }        ans('ok');        break;    case 'set_new_param_for_shop':        if(Access::scanLevel() <= 0) {            error('Доступно авторизованным пользователям...');        }        $err = isset_columns($_POST, ['id', 'param', 'argum']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if($shop = SHOP::get_shop($post['id'])) {            if((int)$shop['owner']['id'] !== Access::userID()) {                error('Запрещено работать с чужим магазином...');            }            $access = ['name', 'logo', 'domain', 'active', 'owner', 'city', 'address', 'all_time_work', 'worktime', 'title', 'descr', 'active_to'];            if(!in_array($post['param'], $access)) {                error('Нельзя изменять данное поле...');            }            $access_free = ['active', 'city', 'address', 'all_time_work', 'title'];            if($shop['title'] === 'Бесплатный' && !in_array($post['param'], $access_free)) {                error('Нельзя изменять этот параметр на бесплатном тарифе...');            }            switch($post['param']) {                case 'logo':                case 'city':                case 'address':                case 'all_time_work':                case 'descr':                    q("UPDATE `shops` SET `".$post['param']."`='".db_secur($post['argum'])."' WHERE `id`=".(int)$post['id']);                    ans('ok');                    break;                case 'name':                    if(!SUBD::getLineDB('shops', 'name', $post['argum'])) {                        q("UPDATE `shops` SET `name`='".db_secur($post['argum'])."' WHERE `id`=".(int)$shop['id']);                        ans('ok');                    }                    break;                case 'worktime':                    $arr = [];                    foreach($post['argum'] as $v) {                        $arr[$v['DAY']] = [                            'FROM'=>$v['FROM'],                            'TO'=>$v['TO'],                            'TYPE'=>$v['TYPE'],                        ];                    }                    q("UPDATE `shops` SET `worktime`='".db_secur(WORKTIME::arr_to_code($arr))."' WHERE `id`=".(int)$shop['id']);                    ans('ok');                    break;                case 'title':                    $tarif = 0;                    switch($post['argum']) {                        case 'Интернет-магазин':                            $tarif = $plane_shop;  // переменные берутся из админки                            break;                        case 'Витрина':                            $tarif = $plane_showcase;  // переменные берутся из админки                            break;                        case 'Бесплатный':                            break;                        default:                            error('Не верно задан тип площадки...');                            break;                    }                    $one_day_pay = round($tarif / $add_period_days_plan, 2);  // переменные берутся из админки                    $summ = round($one_day_pay * $add_period_days_plan);                    $ans = PAY::is_payed_correct_summ(Access::userID(), $summ);                    if($ans !== true) {                        error('На счету не хватает '.round($ans, 2).' Р');                    }                    if(SUBD::set('shops', 'title', $post['argum'], '`id`='.$shop['id'])) {                        if(SHOP::extend_shop_plan($shop['id'], $add_period_days_plan)) {                            ans('ok');                        }                    }                    error('С изменением плана что то пошло не так...');                    break;                case 'domain':                    $dom = VALUES::translit($post['argum']);                    if(SUBD::isset_value('shops', 'domain', $post['argum'])) {                        error('Такой домен существует.<br>Придумайте новый...');                    }                    SUBD::set('shops', 'domain', $post['argum'], '`id`='.(int)$shop['id']);                    ans('ok');                    break;                case 'active_to':                    $tarif = 0;                    switch($shop['title']) {                        case 'Интернет-магазин':                            $tarif = $plane_shop;  // переменные берутся из админки                            break;                        case 'Витрина':                            $tarif = $plane_showcase;  // переменные берутся из админки                            break;                    }                    $one_day_pay = round($tarif / $add_period_days_plan, 2);  // переменные берутся из админки                    $summ = round($one_day_pay * (int)$post['argum']);                    $ans = PAY::is_payed_correct_summ(Access::userID(), $summ);                    if($ans !== true) {                        error('На счету не хватает '.round($ans, 2).' Р');                    }                    if(SHOP::extend_shop_plan($shop['id'], (int)$post['argum'])) {                        ans('ok');                    }                    error('Не удалось продлить план');                    break;                case 'active':                    $P = PROFIL::init(Access::userID());                    if($post['argum'] == 1) {                        SHOP::enabled_shops($shop['id']);                        $P->delete_alert(ALERT_TYPE::MESSAGE, 'not_work_shop');                        ans('ok');                    } elseif($post['argum'] == 0) {                        SHOP::disabled_shops($shop['id']);                        $P->add_alert(ALERT_TYPE::MESSAGE, ['text' => 'Похоже одна из ваших торговых площадок - не работает. Пройдите по ссылке и переведите её в статус - РАБОТАЕТ', 'link' => '/profil?title=my_shops'], 'not_work_shop');                        ans('ok');                    }                    break;                default:                    error('Обработчик запретил изменять данный параметр...');                    break;            }            error('Обработчик для этого параметра - не найден...');        }        error('Не найден магазин...');        break;    case 'set_review_for_product':        if(Access::scanLevel() <= 0) {            error('Отзывы могут оставлять только авторизованные пользователи...');        }        $err = isset_columns($_POST, ['shop_id', 'product_id', 'html', 'stars']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(!isset($post['type_review'])) {            $post['type_review'] = 'продукт';        }        REVIEWS_PROD::set_review($post['shop_id'], $post['product_id'], Access::userID(), $post['html'], $post['stars'], $post['type_review']);        ans('ok');        break;    case 'get_review_for_product':        if(Access::scanLevel() <= 0) {            error('Отзывы могут оставлять только авторизованные пользователи...');        }        $err = isset_columns($_POST, ['shop_id', 'product_id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        ans('ok', REVIEWS_PROD::get_review($post['shop_id'], $post['product_id'], Access::userID()));        break;    case 'remove_from_favorite':        $err = isset_columns($_POST, ['id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        q("DELETE FROM `best_prod` WHERE `id`=".(int)$post['id']." AND `user_id`=".Access::userID());        ans('ok');        break;    case 'subscribe_saler':        $err = isset_columns($_POST, ['id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $subs = SQL_ONE_ROW(q("SELECT * FROM `subscriptions` WHERE `self_id`=".Access::userID()." AND `subscr_id`=".(int)$post['id']));        if(!is_array($subs)) {            q("            INSERT INTO `subscriptions` SET            `self_id`=".Access::userID().",            `subscr_id`=".(int)$post['id']."            ");            ans('subscr');        } else {            q("DELETE FROM `subscriptions` WHERE `id`=".(int)$subs['id']);            ans('unsubscr');        }        error('Ошибка установки...');        break;    case 'add_rem_favorite':        $err = isset_columns($_POST, ['id_shop', 'id_product']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $user_id = Access::userID();        ans('ok', FAVORITE::toggle_favorite_status((int)$post['id_shop'], (int)$post['id_product'], $user_id));        break;    case 'auth_code':        $err = isset_columns($_POST, ['code']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::get_event($post['code'], ActionsList::AUTH)) {            $row = SUBD::getLineDB('messages', 'target', $post['code']);            $us = SUBD::getLineDB('users', 'id', (int)$row['params']);            PROFIL::AUTH_LOGIN((int)$row['params']);            ans('ok');        } else {            error('Введён неверный код или срок его действия - прошёл...');        }        break;    case 'auth_email_code':        $err = isset_columns($_POST, ['email']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $row = SUBD::getLineDB('users', 'email', $post['email']);        if(!is_array($row)) {            error('Мы не смогли найти такую почту в нашей базе.<br>Возможно вы хотите зарегистрироваться?..');        }        $code = rand(10000, 99999);        INCLUDE_CLASS('MAILER', 'MAILER_BUILDER');        $arr[$post['email']] = [            'code'=>$code,        ];        MAILER_BUILDER::send_template_mail('Вход по коду', 'Код для входа по E-MAIL', $arr);        Access::set_system_message($code, $post['email'], ActionsList::AUTH, (int)$row['id'], 300);        ans('ok');        break;    case 'send_mail'://        $ans = MAIL::sender('robinstone2011@gmail.com', 'PHP MAILER is WORK...', 'PHP mailer - rulit');        ans('ok', $ans);        break;    case 'set_main_cat_order':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['order']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        start_transaction();        foreach($post['order'] as $v=>$k) {            q("UPDATE `shops_categorys` SET `order`=".(int)$v." WHERE `id`=".(int)$k);        }        end_transaction();        setParam('time_update_side_menu', date('d.m.Y H:i:s'));        ans('ok');        break;    case 'set_under_cat_order':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['main_cat_id', 'order']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        start_transaction();        foreach($post['order'] as $k=>$v) {            q("UPDATE `shops_undercats` SET `order`=".(int)$k." WHERE `id`=".(int)$v);        }        end_transaction();        setParam('time_update_side_menu', date('d.m.Y H:i:s'));        ans('ok');        break;    case 'set_action_list_order':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['under_cat_id', 'order']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        start_transaction();        foreach($post['order'] as $k=>$v) {            q("UPDATE `shops_lists` SET `order`=".(int)$k." WHERE `id`=".(int)$v);        }        end_transaction();        setParam('time_update_side_menu', date('d.m.Y H:i:s'));        ans('ok');        break;    case 'get_messages_order_list':        ans('ok', OPERATIONS::get_order_list(true));        break;    case 'get_favorite_order_list':        $favorits = FAVORITE::get_favorite_list_orders(Access::userID());        ans('ok', array_values(SHOP::get_products_list($favorits)));  // array_values - убирает ключи php что бы в js сохранялся порядок        break;    case 'edit_category_item_name':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['type_item', 'id_item', 'new_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(CATALOGER::change_name($post['id_item'], $post['new_name'], $post['type_item'])) {            setParam('time_update_side_menu', date('d.m.Y H:i:s'));            ans('ok');        } else {            error('Не удалось переименовать элемент...');        }        break;    case 'del_action_list':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['id_main_cat', 'id_undercat', 'id_action_list']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $arr = SHOP::get_mix_products_at_all_shops(false, 1, -1, (int)$post['id_main_cat'], (int)$post['id_undercat'], (int)$post['id_action_list'], [], false);        if(count($arr) > 0) {            error('Невозможно выполнить команду, поскольку в системе существуют объявления, входящие в этот активный список.');        } else {            if(CATALOGER::del_action_list((int)$post['id_action_list'])) {                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');            }            error('Что-то пошло не так...');        }        break;    case 'del_under_cat':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['id_main_cat', 'id_undercat']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $arr = ((new CATALOGER())->get_all_action_list($post['id_main_cat'], $post['id_undercat']));        if(count($arr) > 0) {            error('Данная подкатегория имеет подчинённые ей активные листы. Для удаления этой подкатегории, вначале открепите вложенные в неё листы.');        } else {            if(CATALOGER::del_undercat((int)$post['id_undercat'])) {                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');            }            error('Что-то пошло не так...');        }        break;    case 'del_main_cat':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['id_main_cat']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $arr = ((new CATALOGER())->get_all_under_cats($post['id_main_cat']));        if(count($arr) > 0) {            error('Данная категория имеет подчинённые ей под-категории. Для удаления этой категории, вначале удалите все связанные с ней под-категории.');        } else {            if(CATALOGER::del_main_cat($post['id_main_cat'])) {                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');            }            error('Что-то пошло не так...');        }        break;    case 'create_new_item_cataloger':        if(Access::scanLevel() <= 5) {            error('Доступно только операторам с уровнем допуска 6+');        }        $err = isset_columns($_POST, ['name', 'item']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $CT = new CATALOGER();        switch($post['item']) {            case 'main_cat':                if($CT->main_cat_name_to_id($post['name']) !== -1) {                    error('Такая категория уже существует в системе...');                }                q("                    INSERT INTO `shops_categorys` SET                     `logo` = '20230508-154105_id-2-312764.svg',                    `logo_img` = '20230508-154105_id-2-312764.svg',                    `category` = '".db_secur($post['name'])."',                    `cat_trans` = '".db_secur(VALUES::translit($post['name']))."',                    `descr` = '-'                ");                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');                break;            case 'under_cat':                $err = isset_columns($_POST, ['id_main_cat']);                if(is_array($err)) {                    error('Отсутствуют следующие поля: ', $err);                }                foreach($CT->get_all_under_cats((int)$post['id_main_cat']) as $k=>$v) {                    if($v['under_cat'] == $post['name']) {                        error('Такая подкатегория уже присутствует в этой категории...');                    }                }                q("                    INSERT INTO `shops_undercats` SET                    `logo` = '20230508-154105_id-2-312764.svg',                    `logo_img` = '20230508-154105_id-2-312764.svg',                    `category` = ".(int)$post['id_main_cat'].",                    `under_cat` = '".db_secur($post['name'])."',                    `undercat_trans` = '".db_secur(VALUES::translit($post['name']))."',                    `descr` = '-'                ");                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');                break;            case 'action_list':                $err = isset_columns($_POST, ['id_main_cat', 'id_undercat']);                if(is_array($err)) {                    error('Отсутствуют следующие поля: ', $err);                }                foreach($CT->get_all_action_list((int)$post['id_main_cat'], (int)$post['id_undercat']) as $k=>$v) {                    if($v['lists'] == $post['name']) {                        error('Такой элемент списка уже присутствует в этой под-категории...');                    }                }//                t($post['id_undercat']);//                say($post);                q("                    INSERT INTO `shops_lists` SET                    `logo` = '20230508-154105_id-2-312764.svg',                    `logo_img` = '20230508-154105_id-2-312764.svg',                    `main_cat` = ".(int)$post['id_main_cat'].",                    `undercat` = ".(int)$post['id_undercat'].",                    `lists` = '".db_secur($post['name'])."',                    `translit` = '".db_secur(VALUES::translit($post['name']))."'                ");                setParam('time_update_side_menu', date('d.m.Y H:i:s'));                ans('ok');                break;        }        break;    case 'get_categorys_list':        $CATS = new CATALOGER();        $cats_list = $CATS->main_cats;        foreach($cats_list as $k=>$v) {            $cats_list[$k]['UNDERCATS'] = $CATS->get_all_under_cats($k);        }        ob_start();        foreach($cats_list as $k=>$v) {            echo '<details draggable="true" data-id-main-cat="'.$k.'"><summary class="flex between"><div class="action-btn">'.$v['category'].'</div><div class="flex gap-5 det-btns"><span class="m-text">ГЛАВНАЯ</span><button onclick="edit_category_item_name(\''.$v['category'].'\', '.$k.', \'main_cat\')" class="action-btn svg-wrapper">'.RBS::SVG('editor').'</button><button onclick="del_main_cat(this, '.$k.')" class="action-btn svg-wrapper">'.RBS::SVG('neg_in_circ').'</button></div></summary><div class="content-details">';            echo '<div class="flex between"><span></span><button onclick="create_new_under_cat(this)" class="svg-wrapper action-btn" style="margin-bottom: 5px; text-align: right; width: fit-content">Создать новую подкатегорию +</button></div>';//            $v['UNDERCATS'] = SORT::array_sort_by_column($v['UNDERCATS'], 'order');            foreach($v['UNDERCATS'] as $kk=>$vv) {                echo '<details draggable="true" data-id-undercat="'.$kk.'"><summary class="flex between"><div class="action-btn">'.$vv['under_cat'].'</div><div class="flex gap-5 det-btns"><span class="m-text">подкатегория</span><button onclick="edit_category_item_name(\''.$vv['under_cat'].'\', '.$kk.', \'under_cat\')" class="action-btn svg-wrapper">'.RBS::SVG('editor').'</button><button onclick="del_under_cat(this, '.$k.', '.$kk.')" class="action-btn svg-wrapper">'.RBS::SVG('neg_in_circ').'</button></div></summary><div class="content-details flex column gap-5">';                echo '<div class="flex between"><span></span><button onclick="create_new_action_list(this)" class="svg-wrapper action-btn" style="margin-bottom: 10px; text-align: right; width: fit-content">Создать элемент списка +</button></div>';//                $vv['ACTION_LIST'] = SORT::array_sort_by_column($vv['ACTION_LIST'], 'order');                foreach($vv['ACTION_LIST'] as $kkk=>$vvv) {                    echo '<div draggable="true" ondblclick="edit_category_item_name(\''.$vvv['lists'].'\', '.$kkk.', \'action_list\')" class="flex between llist" data-id-action-list="'.$kkk.'"><span>'.$vvv['lists'].'</span><button onclick="del_action_list(this,'.$k.','.$kk.','.$kkk.')" class="svg-wrapper action-btn">'.RBS::SVG('krest').'</button></div>';                }                echo '</div></details>';            }            echo '</div></details>';        }        ans('ok', ob_get_clean());        break;    case 'del_param_from_order':        $err = isset_columns($_POST, ['shop_id', 'param_id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(SHOP::delete_param_from_product($post['shop_id'], $post['param_id'])) {            ans('ok');        } else {            error('Что-то пошло не так. Возможно время сессии - истекло...');        }        break;    case 'del_item':        $err = isset_columns($_POST, ['shop', 'item']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::scanLevel() < 7) {            error('Требуется уровень допуска 7+');        }        if(SHOP::delete_products_arr((int)$post['shop'], [(int)$post['item']])) {            ans('ok');        } else {            error('Что-то пошло не так...');        }        break;    case 'published_list':    // опубликование объявлений    case 'archive_list':      // архивирование объявлений    case 'to_hi_level_list':  // продвижение объявлений        $err = isset_columns($_POST, ['arr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $one_price = round((float)getParam('price_one_order'), 2);        if($one_price <= 0) {            error('Ошибка. Неправильно указана системная переменная "price_one_order", она не может быть === 0 ');        }        $my_shops = [];        $arrm = SHOP::get_all_my_shops(Access::userID());        foreach($arrm as $vv) {            $my_shops[] = $vv['id'];        }        foreach($post['arr'] as $v) {            if(!in_array($v['shop_id'], $my_shops)) {                error('Нельзя изменять параметры не своих торговых площадок!..');            }        }        function package_messages_for_shops($arr) {        }        $count_orders = 0;        $arr = [];        $not_pay_arr = [];        $post['arr'] = SHOP::get_published_time_for($post['arr']);  // добавляем ещё и время        $dt = date('Y-m-d H:i:s');        switch($post['com']) {            case 'archive_list':                $indexer_ids = array_column($post['arr'], 'id');                    q("                    UPDATE `indexer` SET                     `active`=0,                     `status`='archive'                    WHERE `id` IN (".implode(',',$indexer_ids).") ");                    q("                    UPDATE `coords` SET `active`=0 WHERE                    `id` IN (".implode(',',$indexer_ids).")                    ");                ans('ok');                break;            case 'to_hi_level_list':                error('Данный сервис находится в разработке и<br>временно недоступен...');                break;            case 'published_list':                $P = PROFIL::init(Access::userID());                $cash = (float)$P->get('cash');                $free = 0;                $error_cash = 0;                $count_pay_lids = (int)$P->get('count_pay_lids');//                say($post['arr']);                foreach ($post['arr'] as $v) {                    if ($dt > $v['PUBLISHED_TIME']) {                        if($count_pay_lids > 0) {                            $not_pay_arr[] = $v['id'];                            ++$free;                            --$count_pay_lids;                        } else {                            if($cash-$one_price >= 0) {                                $arr[] = $v['id'];                                ++$count_orders;                                $cash -= $one_price;                            } else {                                ++$error_cash;                            }                        }                    } else {                        $not_pay_arr[] = $v['id'];                    }                }                $P->set('count_pay_lids', $count_pay_lids);                if ($free > 0 || $count_orders > 0) {                    if ($free > 0 || PAY::buy(Access::userID(), $count_orders * $one_price, 'Оплата размещения объявлений', 'Кошелёк', 'Продление размещения (' . $count_orders . ') шт. объявлений на месяц', true)) {                        if($count_orders > 0) {                            PAY::buy(Access::userID(), $count_orders * $one_price, 'Оплата размещения объявлений', 'Кошелёк', 'Продление размещения (' . $count_orders . ') шт. объявлений на месяц');                        }                        if($free > 0) {                            PAY::buy(Access::userID(), 0, 'Оплата размещения объявлений', 'По тарифу', 'Продление размещения (' . $free . ') шт. объявлений на месяц');                        }                        $stat = true;                        if (count($not_pay_arr) > 0) {                            $arr = $not_pay_arr;                        }                        foreach ($arr as $k => $v) {                            if (SHOP::set_active_status_products($arr, 720) === false) {                                $stat = false;                            }                        }                        if ($stat) {                            if($error_cash <= 0) {                                Message::addMessage('Успешно.');                            } else {                                Message::addError('Не удалось опубликовать сообщений - '.$error_cash.' шт.<br>По причине отсутствия средств на баллансе.<br>В меню "КОШЕЛЁК" пополните личный счёт...');                            }                            ans('ok');                        } else {                            error('Что-то пошло не так. Возможно плохая связь с интернет...');                        }                    } else {                        error('Недостаточная сумма на счёте. Требуется ' . $count_orders * $one_price . ' руб.');                    }                } else {                    $stat = true;                    if (SHOP::set_active_status_products($not_pay_arr, 0) === false) {                        $stat = false;                    }                    if ($stat) {                        if($error_cash <= 0) {                            Message::addMessage('Успешно.');                        } else {                            Message::addError('Не удалось опубликовать сообщений - '.$error_cash.' шт.<br>По причине отсутствия средств на баллансе.<br>В меню "КОШЕЛЁК" пополните личный счёт...');                        }                        ans('ok');                    } else {                        error('Что-то пошло не так. Возможно плохая связь с интернет...');                    }                }                break;        }        break;    case 'buy_tarif':        $tarif_name = $post['tarif_name'] ?? 'free';        $tarif_enum_list = '';        switch($tarif_name) {            case 'free':                $price = 0;                $tarif_enum_list = 'Бесплатный';                break;            case 'showcase':                $price = $plane_showcase;                $tarif_enum_list = 'Витрина';                break;            case 'shop':                $price = $plane_shop;                $tarif_enum_list = 'Интернет-магазин';                break;            default:                error('Неизвестная команда');                break;        }            include_once './APPLICATIONS/SHOPS/libs/class_PAY.php';            if(PAY::buy(Access::userID(), $price, 'Покупка тарифа')) {                $P = PROFIL::init(Access::userID());                list($city_id, $country_id) = GEONAMER::get_cityID_countryID();                $name = 'place_'.crypter($P->get_field('login').date('H:i:s'));                if($country_id === -1) {                    $country_id = SITE::$IP_region_fool['country']['id'] ?? -1;                }                $S = new SHOP();                $S->create(                    $name,                    '20230508-154105_id-2-312764.svg',                    $city_id,                    $country_id,                    $P->get('city', '-'),                    $tarif_enum_list                );                $cash = (float)$P->get('cash');                $count_pay_lids = (int)$P->get('count_pay_lids');                switch($tarif_name) {                    case 'free':                        $count_pay_lids += 2;                        break;                    case 'showcase':                        $count_pay_lids += 50;                        break;                    case 'shop':                        $count_pay_lids = -1;                        break;                }                $P->set('count_pay_lids', (int)$count_pay_lids);                ans('ok');            } else {                error('Недостаточно средств. Пополните ваш счёт!..');            }        break;    case 'get_template':        $err = isset_columns($_POST, ['template']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(file_exists('./APPLICATIONS/SHOPS/templates/'.$post['template'].'.php')) {            $meta = SEO::get_info(['title'=>db_secur($post['template'])]);            $params = [];            if(isset($post['params'])) {                $params = $post['params'];            }            ob_start();            include './APPLICATIONS/SHOPS/templates/'.$post['template'].'.php';            ans('ok', ['page'=>ob_get_clean(), 'meta'=>$meta]);        }        error('Шаблон не был найден или произошло что то непредвиденное на стороне сервера...');        break;    case 'render_bank':        ans('ok', render('bank'));        break;//    case 'change_status_order'://        $err = isset_columns($_POST, ['id', 'shop_id', 'status']);//        if(is_array($err)) {//            error('Отсутствуют следующие поля: ', $err);//        }//        if(!SHOP::is_my_shop($post['shop_id'])) {//            error('Запрещено работать с чужими объявлениями...');//        }//        switch($post['status']) {//            case 'archive'://                if(q("UPDATE `products_".(int)$post['shop_id']."` SET `status` = '".$post['status']."' WHERE `id`=".(int)$post['id'])) {//                    ans('ok');//                } else {//                    error('Возникла непредвиденная ошибка при смене статуса объявления...');//                }//                break;//            default://                error('Неизвестная операция...');//                break;//        }//        error('Метод отработал без изменений...');//        break;    case 'set_add_shop':        if(!isset($post['id'])) {            error('Не переданы все нужный поля...');        }        $arr = SUBD::get_executed_rows('shops', 'owner', Access::userID());        foreach($arr as $k=>$v) {            if($k == $post['id']) {                $_SESSION['shop_id'] = (int)$k;                ans('ok', $v['name']);            }        }        error('Ошибка. Системе не удалось подтвердить что этот магазин принадлежит Вам... ');        break;    case 'scan_and_set_shop_add':        if(Access::scanLevel() <= 0) {            error('Доступно только авторизованным пользователям.');        }        $arr = SUBD::get_executed_rows('shops', 'owner', Access::userID());        if(count($arr) <= 0) {            SITE::$IP_region_fool = GEO2IP::get_info();            $P = PROFIL::init(Access::userID());            $name = 'place_'.crypter($P->get_field('login').date('H:i:s'));            $city_name = $P->get('city', (SITE::$my_place[0] ?? '-'));            $country_name = $P->get('country', SITE::$IP_region_fool['country']['name_ru']);            if(GEONAMER::city_name_to_id($city_name) === -1) {                $city_name = SITE::$IP_region_fool['city']['name_ru'];                $P->set('city', $city_name, false);                $P->set('country', SITE::$IP_region_fool['country']['name_ru']);                $my_place = SITE::$IP_region_fool['city']['name_ru'] . "|" . mb_strtolower(SITE::$IP_region_fool['city']['name_en']);                setcookie('my_place', $my_place, time() + 31556926, '/');            }            $city_id = GEONAMER::city_name_to_id($city_name);            $country_id = GEONAMER::country_name_to_id($country_name);            if($country_id === -1) {                $country_id = SITE::$IP_region_fool['country']['id'] ?? -1;            }            $S = new SHOP();            $S->create(                $name,                '20230508-154105_id-2-312764.svg',                $city_id,                $country_id,                $P->get('city', '-'),                'Бесплатный',                'Эта площадка создана автоматически, по бесплатному тарифу'            );            $arr = SUBD::get_executed_rows('shops', 'owner', Access::userID());            $count_pay_lids = (int)$P->get('count_pay_lids');            $count_pay_lids += 2;            $P->set('count_pay_lids', $count_pay_lids);        }        $key = array_key_first($arr);        $_SESSION['shop_id'] = (int)$key;        ans('ok', (int)$key);        break;    case 'get_filter_list_id':        $arr = [];        if(!isset($post['arr'])) {            ans('ok', '<h2 style="margin-top: 1em" class="h2">Пусто...</h2>');        }        $products = [];        foreach($post['arr'] as $k=>$v) {            $products[] = $v['SHOP']."_". $v['ID_PRODUCT'];        }        $prods = SHOP::get_products_list_at_code_array($products, true, 'created', 'DESC', [0, 20]);        ob_start();        foreach($prods as $one_product) {            echo render('one-order', ['arr'=>$one_product]);        }        ans('ok', ob_get_clean());        break;    case 'add_level_for_product': // это рабочая функция, которая тупо добавляет час к заказу        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска');        }        if(SHOP::set_active_status_products($post['shop_id'], [$post['product_id']], 1)) {            ans('ok');        } else {            error('Ошибка системы');        }        break;    case 'get_my_orders':        $meta = SEO::get_info([], ['my_orders']);        RBS::GET_UPDATE();        $P = new PROFIL(Access::userID());        $tmp = '';        $cities = SUBD::getAllDB('cities');        $cities = SORT::array_sort_by_column($cities, 'name');        $main_cats = SUBD::getAllDB('shops_categorys');        $main_cats = SORT::array_sort_by_column($main_cats, 'category');        $status_counts = SHOP::get_count_status_all_my_products(Access::userID(), $_GET['main-cat'] ?? -1);        $tmp = render('my_orders', ['cities'=>$cities, 'main_cats'=>$main_cats, 'status_counts'=>$status_counts]);        ans('ok', ['page'=>$tmp, 'meta'=>$meta]);        break;    case 'get_my_shops':        $ans = SUBD::get_executed_rows('shops', 'owner', Access::userID(), true);        $tmp = '';        foreach($ans as $k=>$v) {            $tmp .= render('details-shop', ['arr'=>$v, 'params'=>$post['params'] ?? []]);        }        ans('ok', $tmp);        break;    case 'get_products_list':        $err = isset_columns($_POST, ['lst']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $template = $post['render_type'] ?? '';        $shop_id = $_SESSION['shop_id'] ?? -1;        $list = explode(',', $post['lst']);        if(count($list) === 0) {            ans('ok', []);        }        $arr = SHOP::get_products_list_at_id($shop_id, $list);        switch($template) {            case 'line-card':                ob_start();                include './APPLICATIONS/SHOPS/templates/line-card.php';                ans('ok', ob_get_clean());                break;            default:                ans('ok', $arr);                break;        }        break;    case 'del_last':        $shop_id = (int)$_SESSION['shop_id'] ?? -1;        $row = SQL_ROWS_FIELD(q("SELECT * FROM `products_".$shop_id."` ORDER BY `id` DESC LIMIT 1 "), 'id');        if(is_array($row)) {            SHOP::delete_products_arr($shop_id, [array_key_first($row)]);        }        break;    case 'create_product':        $err = isset_columns($_POST, ['props']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $props = $post['props'];        $schema = get_product_schema();        $shop_id = $_SESSION['shop_id'] ?? -1;        $product_id = $post['product_id'] ?? -1;        if($product_id === -1) {            foreach($schema as $name_item=>$item) {                if($item['required'] === 1 && (empty($props[$name_item] || empty($props[$name_item]['value'])))) {                    error('Не передано обязательное поле - '.$name_item);                }            }        }        if($shop_id === -1) {            error('Сессия с этим магазином истекла и не существует...');        }        if($product_id > 0) {            if (SHOP::change_product_in_shop($shop_id, $product_id, $props)) {                ans('ok');            } else {                error('Не удалось изменить товар!..');            }        } else {            SORT::change_preview_key($props, 'alias', 'field_name');            if (SHOP::create_product_in_shop($shop_id, $props)) {                ans('ok');            } else {                error('Не удалось создать товар!..');            }        }        break;    case 'get_undercats_from_cat_id':        ans('ok', SHOP::get_undercats_from_cat_id((int)$post['id']));        break;    case 'get_action_list_from_undercat_id':        ans('ok', SHOP::get_action_list_from_undercat_id((int)$post['id_cat'], (int)$post['id_undercat']));        break;    case 'get_last_fields_form':        exit;        break;    case 'get_local_shop':        $only_catalg = false;        $err = isset_columns($_POST, ['id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(!SHOP::is_my_shop($post['id'])) {            error('Вы пытаетесь получить допуск не к Вашему магазину...');        }        $_SESSION['shop_id'] = (int)$post['id'];        ob_start();        include __DIR__.'/templates/local_shop.php';        ans('ok', ob_get_clean());        break;    case 'del_shop_access':        $id_shop = (int)$post['id_shop'];        $arr = [            'Выдать разрешение'=>'set_access_del_table_'.$id_shop,            'ОТМЕНА' =>'abort'        ];        $table = SHOP::get_shop($id_shop);        if(is_array($table)) {            $city = $table['city']['name'] ?? '-';            $owner = $table['owner']['login'] ?? '-';            $txt = "Выдать разрешение на удаление магазина:\r\n".$table['name']."\r\n".$city." ".$table['address']."\r\nВладелец: ".$owner." ?";            TELE::send_at_user_id(Access::userID(), $txt, 'btn', $arr);        } else {            Message::addError('Произошла ошибка при поиске требуемого магазина.');        }        break;    case 'new_shop':        $err = isset_columns($_POST, ['city', 'name_shop', 'type_shop']);        $descr = $post['descr'] ?? '';        $logo = $post['logo'] ?? '';        $address = $post['address'] ?? '';        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $i = (int)SUBD::get_max_id('shops');        $i++;        $shops = new SHOP();        if($shops->create(db_secur($post['name_shop']), db_secur($logo), db_secur($post['city']), db_secur($address), db_secur($post['type_shop']), db_secur($descr))) {            ans('ok');        } else {            error('Ошибка', $shops->errors);        }        break;}echo json_encode($ans, JSON_UNESCAPED_UNICODE);exit;