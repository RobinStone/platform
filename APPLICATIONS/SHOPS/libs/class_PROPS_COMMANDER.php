<?phpclass PROPS_COMMANDER {    private array $props;    function __construct($props_array) {        $props_array = $props_array ?? [];        $this->props = $props_array;    }    public function get_all_props_at_field_name($field_name='Стоимость|Описание|Изображение (фото)|Ссылка на YouTube|Расположение', $first_val=false): array {        $ans = [];        foreach ($this->props as $k=>$v) {            if($v['name'] === $field_name) {                switch($v['field_type']) {                    case 'list':                        $ans[] = [                                'ID'=>$k,                                'VALUE'=>unserialize($v['VALUE'])                        ];                        break;                    default:                        $ans[] = [                                'ID'=>$k,                                'VALUE'=>$v['VALUE']                        ];                        break;                }            }        }        if($first_val) {            if(count($ans) > 0) {                return $ans[0];            } else {                return ['ID'=>-1, 'VALUE'=>''];            }        } else {            return $ans;        }    }    public function get_all_props_at_field_type($field_type='file|text|number|link|list', $first_val=false): array {        $ans = [];        foreach ($this->props as $k=>$v) {            if($v['field_type'] === $field_type) {                switch($v['field_type']) {                    case 'list':                        $ans[] = [                                'ID'=>$k,                                'VALUE'=>unserialize($v['VALUE'])                        ];                        break;                    default:                        $ans[] = [                                'ID'=>$k,                                'VALUE'=>$v['VALUE']                        ];                        break;                }            }        }        if($first_val) {            if(count($ans) > 0) {                return $ans[0];            } else {                return ['ID'=>-1, 'VALUE'=>''];            }        } else {            return $ans;        }    }    public function get_only_non_static_params(): array {        $ans = [];        $static_params = [                'Стоимость',                'Расположение',                'Описание',                'Широта',                'Долгота',                'IDcity',                'IDcountry',                'Телефон заказа',                'Изображение (фото)',        ];        foreach($this->props as $k=>$v) {            if(!in_array($v['name'], $static_params)) {                $v['id'] = $k;                $ans[$v['name']] = $v;            }        }        return $ans;    }    public static function type_to_column_type($type): string {        switch($type) {            case 'link':            case 'string':                return 'val_string';            case 'number':                return 'val_float';            case 'text':            case 'list':            default :                return 'val_text';        }    }    public static function compare_old_and_new_props(int $shop_id, array $old_props, array $new_props):array {        foreach($old_props as $k=>$v) {            if($v['name'] === 'Изображение (фото)') continue;            $finded = false;            foreach($new_props as $kk=>$vv) {                if($v['name'] === $vv['field']) {                    switch($v['types']) {                        case 'val_float':                            q("UPDATE `val_".$shop_id."` SET `".$v['types']."` = ".round((float)$vv['value'],6)." WHERE `id`=".(int)$k);                            break;                        case 'val_bool':                        case 'val_int':                            q("UPDATE `val_".$shop_id."` SET `".$v['types']."` = ".(int)$vv['value']." WHERE `id`=".(int)$k);                            break;                        case 'val_string':                        case 'val_text':                        case 'val_file':                            switch($v['field_type']) {                                case 'list':                                    q("UPDATE `val_".$shop_id."` SET `".$v['types']."` = '".serialize($vv['value'])."' WHERE `id`=".(int)$k);                                    break;                                default:                                    q("UPDATE `val_".$shop_id."` SET `".$v['types']."` = '".db_secur($vv['value'])."' WHERE `id`=".(int)$k);                                    break;                            }                            break;                    }                    $finded = true;                    unset($new_props[$kk]);                }            }            if(!$finded) {                q("DELETE FROM `val_".$shop_id."` WHERE `id`=".(int)$k);            }        }        if(count($new_props) > 0) {            return $new_props;        }        return [];    }}