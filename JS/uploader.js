buffer_file_name = '';buffer_donor_cell = null;const mem = new memory_pull();$(document).on('dragover', '.input-img', function(e) {    $(this).addClass('load-in');    e.preventDefault();    e.stopPropagation();});$(document).on('dragstart', '.buffer-file-dragger', function(e) {    let obj = this;    buffer_file_name = $(obj).attr('data-name');    buffer_donor_cell = get_data_cell($(obj).closest('td'));});$(document).on('dragleave', '.input-img', function(e) {    $(this).removeClass('load-in');    e.preventDefault();    e.stopPropagation();});$(document).on('drop', '.input-img', function(e) {    let o = this;    if($(o).closest('.table-card').length > 0) {        drop_execute(o, get_data_cell_card(o), e, 'card');    } else {        drop_execute(o, get_data_cell(o), e, 'table');    }});function drop_execute(drop_cell_td, obj, e, type_info='table') {    if(obj.edited !== '1') {        say('Данное поле защищено от изменения.', 2);        return false;    }    let target_self = drop_cell_td;    console.log('$$$');    console.log(buffer_file_name);    console.log(buffer_donor_cell);    console.log('$$$');    if(buffer_file_name !== '' && buffer_donor_cell !== null) {        if(obj.table_name === 'file') {            say('Нельзя клонировать файлы внутри хранилища.', 2);            return false;        }        SENDER('exists', {t_table: obj.table_name, t_column: obj.column_name, t_id: obj.id, name: buffer_file_name}, function(mess) {            mess = JSON.parse(mess);            if(mess.status === 'error') {                error_executing(mess);            } else if(mess.status === 'clear') {                execute_drop(obj, e, target_self);            } else {                if(type_info === 'table') {                    obj.reload_table();                } else if(type_info === 'card') {                    obj.reload_card();                } else {                    say('Неизвестный тип...', 2);                }                return false;            }        });    } else {        execute_drop(obj, e, target_self);    }    return false;}$(document).on('click', '.input-img', function(e) {    if($(this).closest('.child-table').length > 0) {        return false;    }    let cell = $(this).closest('td');    let obj = get_data_cell(cell);    let target_self = cell;    if(typeof obj.table_name === 'undefined') {        obj = get_data_cell_card(cell);    }    $('#loader-form').remove();    if($('#loader-prefab').length > 0) {        let loader = document.getElementById('loader-prefab').content.cloneNode(true);        $(this).append(loader);        $('#loader-form').find('#image-loader-field').focus();        let field = document.getElementById('image-loader-field');        field.addEventListener('paste', function(e){            execute_drop(obj, e, target_self);        });    } else {        say('Неудалось найти преффаб - image-loader-field');    }});function execute_drop(obj, e, target_self) {    if($(target_self).closest('.table-card').length > 0) {  // это проверка если с карточки пропускаем на загрузку        obj.edited = '1';        obj.reload_table = function() {            console.log('buff_row');            console.dir(buff_row);            open_card($('.tb-card[data-tbname="'+buff_row.table_name+'"]').closest('.content'), buff_row.table_name, buff_row.id, {}, function() {});        }    }    $(target_self).removeClass('load-in');    let dt = null;    if(typeof e.originalEvent === 'object') {        dt = e.originalEvent.dataTransfer;    } else {        dt = e.clipboardData;    }    e.stopPropagation();    e.preventDefault();    if(!dt && !dt.files) { return false ; }    // Получить список загружаемых файлов    let files = dt.files;    obj.count_files = files.length;    for (let i = 0; i < files.length; i++) {        if(files[i].size<=1073741824) {            console.dir(files[i]);            let nm = files[i].name.split('.')[files[i].name.split('.').length-1];            upload_put(files[i], obj);        } else {            say('Максимальный размер загружаемого файла = 1гб', 2);        }    }}function just_form_upload(td_obj, table_name, column_name, id_row) {    let rn = rnd(100000, 999999);    let upl = $('<form id="upl-'+rn+'" style="display: none" name="uploader" enctype="multipart/form-data" method="POST">\n' +        '\t<input id="upload-form-'+rn+'" name="userfile" type="file">\n' +        '</form>');    $('body').append(upl);    let arr = {        obj: td_obj,        edited: '1',        table_name: table_name,        column_name: column_name,        id: id_row,    }    if($(td_obj).closest('.tb-card').length > 0) {        arr.reload_table = function() {            open_card($(td_obj).closest('.content'), arr.table_name, arr.id, {}, function() {});            $('#upl-'+rn).remove();        };    } else {        arr.reload_table = function() {            refrash_table_name(table_name);            $('#upl-'+rn).remove();        };    }    $(document).on('change', '#upload-form-'+rn, function() {        let file = this.files;        upload_put(file[0], arr);    });    $('#upload-form-'+rn).click();}$(document).on('dragend', '#body', function(e) {    $(this).removeClass('load-in');    buffer_file_name = '';    buffer_donor_cell = null;    e.preventDefault();    e.stopPropagation();    $('.load-in').removeClass('load-in');});function upload_put(file, info_arr={}) {    // console.dir(info_arr);    let bar = document.getElementById('loader-indicate').content.cloneNode(true);    let count_ind = $('.circle-bar').length;    $(bar).find('.circle-bar').attr('data-ind', count_ind)    $(info_arr.obj).append(bar);    let circ = $(info_arr.obj).find('.circle-bar[data-ind="'+count_ind+'"]');    if(info_arr.edited !== '1') {        say('Данное поле закрыто от редактирования', 2);        $(info_arr.obj).find('.circle-bar').remove();        return false;    }    var ajax = new XMLHttpRequest();    ajax.upload.onprogress = function(event) {        // console.log('Загружено ' + event.loaded + ' из ' + event.total);        // console.log('loaded='+event.loaded);        let percent = 100 - Math.round(event.total - event.loaded) / event.total * 100;        percent = Math.round(percent);        // console.log('Загрузка данных: '+percent+' %');        $(circ).find('.donut-segment').attr('stroke-dasharray', percent+' 100');        $(circ).find('.timer-value').text(percent);    };    ajax.onload = ajax.onerror = function() {        if (this.status === 200) {            // console.log('All ok');        } else {            $('#progress').text('Ошибка');            say('Не удалось отправить файл');        }        // console.log('ОТВЕТ='+ajax.responseText);        let mess = JSON.parse(ajax.response);        console.dir(mess);        if(mess.status !== 'ok') {            say(mess.text,2);            $(circ).remove();        }        if(mess.status === 'ok' || mess.status === 'clear') {            $(circ).toggleClass('circle-bar circle-bar-ok');            $(circ).find('.timer-value').text('Ok');            if($('.circle-bar').length === 0) {                info_arr.reload_table();            } else {                say('Файл загружен.<br>Ожидаем загрузку всех файлов...');            }        }    };    console.log('+++++++++++++++++++++++++');    console.dir(info_arr);    let formData = new FormData();    formData.append("userfile", file);    formData.append("com", 'files');    formData.append("table", info_arr.table_name);    formData.append("column", info_arr.column_name);    formData.append("id", info_arr.id);    ajax.open("POST", domain, true);    ajax.responseType = 'text';    ajax.send(formData);}function send_image_from_img(img_obj, img_name='picture.jpg') {    let img_src = img_obj.src;    fetch(img_src)        .then(res => res.blob())        .then(blobData => {            let formData = new FormData();            formData.append('image', blobData, img_name);            formData.append("com", 'thumbnail');            fetch(domain, {                method: 'POST',                body: formData            })                .then(res => {                    console.log('Image uploaded successfully');                })                .catch(err => {                    say('Error uploading image:', 3);                });        });}