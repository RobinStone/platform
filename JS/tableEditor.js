let drag_obj = null;let start_ord = -1;let buffer_table = null;buffer_row = null;sel_obj = {};memory_back = [];setTimeout(function() {    mem.load();}, 500);$(document).on('click', 'td', function(e) {    let txt = $(this).text();    if(e.ctrlKey) {        copyToClipboard(txt);        say('"'+txt+'" - скопировано');    }});$(document).on('input', '.param-table', function(e) {    memory_save_table_edit();});$(document).on('input', '.input-edit', function(e) {    $(this).attr('edited', 'true');});$(document).on('keydown', '.input-edit', function(e) {    if(e.keyCode === 13) {        $('.input-edit').blur();    }});$(document).on('change', '.input-edit', function(e) {    $(this).attr('edited', 'true');});$(document).on('blur', '.input-edit', function(e) {    let val = $(this).val();    if($(this).hasAttr('edited')) {        change_card_item(val);    }    $(buff_row.obj).text(val);});$(document).on('click', 'td.checker, th.checker', function(e) {    let obj = this;    if($(this).find('input').prop('checked')) {        $(this).find('input').prop('checked', false);    } else {        $(this).find('input').prop('checked', true);    }    if (e.shiftKey) {        if (e.target.tagName === 'TD') {            setTimeout(function() {                let count = $(obj).closest('.table-db').find('tr.sel-row').length;                if(count === 2) {                    let ind = false;                    $(obj).closest('.table-db').find('tr').each(function(e, t) {                        if($(t).hasClass('sel-row') && $(t).find('.checker').find('input').prop('checked')) {                            if(!ind) {                                ind = true;                            } else {                                ind = false;                            }                        } else {                            if (ind) {                                if (!$(t).hasClass('sel-row')) {                                    $(t).addClass('sel-row');                                    $(t).find('.checker').find('input').prop('checked', true);                                }                            }                        }                    });                }            }, 5);        }    }});$(document).on('blur', '.enum-sell', function(e) {    let obj = this;    let txt = $(obj).val();    setTimeout(function() {        $(obj).parent().html(txt);    }, 100);});$(document).on('blur', '.search-field input', function(e) {    $(this).val('');});$(document).on('click', '.table-wrapper >.table-db tr:not(tr:first-child, tr:last-child)', function(e) {    let obj = this;    $('.del-row-btn').removeClass('disabled');    $(obj).parent().find('tr').each(function(e, t) {        if(!$(t).find('td.checker input').prop('checked')) {            $(t).removeClass('sel-row');        }    });    $(this).addClass('sel-row');    if($(this).find('.enum-sell').length === 0) {        $('.enum-sell').parent().text($('.enum-sell').val());    }    e.stopPropagation();});$(document).on('click', 'table', function(e) {    e.stopPropagation();});$(document).on('click', '.paginator button', function(e) {    let obj = this;    $(obj).parent().attr('data-paginator-item', $(obj).text());    refrash_table_name($(obj).closest('.table-wrapper').find('.table-db').attr('data-name'));    mem.save();});$(document).on('click', 'main', function(e) {    let obj = this;    let rem = true;    $(obj).parent().find('tr').each(function(e, t) {        if(!$(t).find('td.checker input').prop('checked')) {            $(t).removeClass('sel-row');        } else {            rem = false;        }    });    if(rem) {        $('.del-row-btn').addClass('disabled');    }});$(document).on('contextmenu', '.title-row th', function(e) {    e.preventDefault();    let obj = this;    let table_name = $(obj).parent().parent().parent().attr('data-name');    let table = $(obj).parent().parent().parent();    let column_name = $(obj).attr('data-column');    let sel_obj = {        table_obj: table,        table_name: table_name,        th_obj: obj    }    sel_column(obj);    let llist = {        'Редактировать параметры': function() {            setOverlayJust();            loadTemplateIn('container', 'column_creator', {}, function(mess) {                $('.form-column-creator h2').text('Редактор колонки');                $('.form-column-creator').addClass('disabled');                $('#btn-creator').text('Изменить');                // $('#btn-creator').addClass('disabled');                $('#btn-creator').attr('onclick', 'create_new_column_form(true)');                SENDER('get_column_params', {table_name: table_name, column_name: column_name}, function(messer) {                    messer = JSON.parse(messer);                    if(messer.status === 'ok') {                        $('.form-column-creator').removeClass('disabled');                        console.dir(messer.params);                        let params = messer.params;                        $('fieldset input[name="column-title"]').val(params.column_title);                        $('fieldset input[name="column-name"]').val(params.column_name);                        $('fieldset input[name="column-name"]').attr('data-old', params.column_name);                        $('#types option[value="'+params.type+'"]').attr('selected', 'selected');                        // say(params.type);                        setTimeout(function() {                            sel_type($('#types'));                            switch(params.type) {                                case 'file':                                    let arr = params.params;                                    for(let i in arr.list) {                                        $('input[value="'+arr.list[i]+'"]').prop('checked', true);                                    }                                    break;                                case 'varchar':                                    if(params.params !== false) {                                        $('#default-varchar input[type="checkbox"]').click();                                        $('#default-varchar input[type="text"]').val(params.params);                                    }                                    break;                                case 'text':                                    if(params.params !== false) {                                        $('#default-text input[type="checkbox"]').click();                                        $('#default-text textarea').val(params.params.value);                                        switch(params.params.type) {                                            case 'text':                                            case 'params':                                            case 'json':                                                $('.type-text input[value="'+params.params.type+'"]').prop('checked', true);                                                break;                                        }                                    }                                    break;                                case 'datetime':                                case 'date':                                case 'time':                                    if(params.params !== '0000-00-00 00:00:00') {                                        $('#default-'+params.type+' input[type="checkbox"]').click();                                        $('#default-'+params.type+' input').val(params.params);                                    }                                    break;                                case 'tinyint':                                    if(params.params.value === '1') {                                        $('input[name="radio-bool"][value="1"]').prop('checked', true);                                    }                                    $('input[name="bool-true"]').val(params.params.true);                                    $('input[name="bool-false"]').val(params.params.false);                                    break;                                case 'enum':                                    let tmp = document.getElementById(table_name+'-'+column_name);                                    let arm = tmp.content.cloneNode(true);                                    let t = $('<div></div>');                                    $(t).append(arm);                                    $(t).find('option').each(function(e, t) {                                        $('#enum').append($('<label><input type="text" value="'+$(t).text()+'"><button onclick="$(this).parent().remove()">✖</button></label>'));                                    });                                    break;                                case 'select':                                    let list = params.params;                                    setTimeout(function() {                                        $('#alter-table').val(list.table);                                        sel_alter_table_key(function() {                                            $('#alter-table-key').val(list.field);                                            load_data_list_values($('#alter-table-key'), function() {                                                $('#alter-table-value-id option[value="'+list.value+'"]').attr('selected', 'selected');                                            })                                        });                                    }, 100);                                    break;                                default:                                    break;                            }                        }, 10);                    } else {                        delOvelay();                        console.dir(messer);                        error_executing(messer);                    }                });            });        },        'Изменить название': function() {            clear_bufer_table_select();            let event = new MouseEvent('dblclick', {                'view': window,                'bubbles': true,                'cancelable': true            });            obj.dispatchEvent(event);        },        'Создать новый столбец': function() {            info_qest(undefined, function(e) {                create_new_column('left', sel_obj);            }, function(e) {                create_new_column('right', sel_obj);            }, 'С какой стороны?', '⇦ СЛЕВА', 'СПРАВА ⇨');        },        'Удалить столбец': function(e) {            info_qest(undefined, function(e) {                del_column(table_name, obj);            }, function(e) {            }, 'Вся информация из колонки также будет удалена.<br>Продолжить?', 'Да (удалить столбец)', 'Нет (отменить удаление)');        },        ['Создать индекс для '+column_name]: function(e) {            info_qest(undefined, function(e) {                create_index_for_column(table_name, obj);            }, function(e) {            }, 'Для данного столбца будет создан индекс,<br>что увеличит размер базы, но ускорит поиск<br>по этому столбцу.<br>Продолжить?', 'Да (создать индекс)', 'Нет (не создавать)');        },    };    if($(obj).closest('.table-db').find('.sel-row').length > 0) {        llist['Заполнить одним значением все отмеченные'] = function() {            info_inputString(undefined, function(mess) {                let arr = [];                $(obj).closest('.table-db').find('.sel-row').each(function(e,t) {                    arr.push(parseInt($(t).find('td[data-name="id"]').text()));                });                SENDER('change_array_of_rows_value', {table_name: table_name, column_name: column_name, arr: arr, value: bufferText}, function(mess) {                    mess_executer(mess, function(mess) {                        console.dir(mess);                        refrash_table_name(table_name);                    });                });            }, 'Введите строку.<br>Это значение будет установлено<br>в этом столбце, у отмеченных строк');        };    }    info_variants(undefined, llist, '<b style="font-size: 20px; font-weight: 800">'+$(obj).text().substr(2, 200)+'</b>');});buffer_obj_column = null;$(document).on('dragstart', '.table-wrapper th', function(e) {    buffer_obj_column = this;    $('.drag-begin').removeClass('drag-begin');    $(this).addClass('drag-begin');    drag_obj = this;    start_ord = $(drag_obj).eq().prevObject[0].cellIndex;});$(document).on('drop', '.table-wrapper th', function(e) {    if(buffer_obj_column === null) {        return false;    }    let obj = this;    $('.left-bord').removeClass('left-bord');    $('.right-bord').removeClass('right-bord');    if(this !== drag_obj) {        let centerX = e.target.offsetLeft + e.target.offsetWidth / 2;        if (e.clientX < centerX) {            save_orders_columns(obj, 'left');        }        else if (e.clientX > centerX) {            save_orders_columns(obj, 'right');        }    }    e.preventDefault();});$(document).on('dragend', '.table-wrapper th', function(e) {    $('.drag-begin').removeClass('drag-begin');    drag_obj = null;    $('.left-bord').removeClass('left-bord');    $('.right-bord').removeClass('right-bord');    buffer_obj_column = null;});$(document).on('dragover', '.table-wrapper th', function(e) {    if(buffer_obj_column === null) {        return false;    }    let obj = this;    $('.left-bord').removeClass('left-bord');    $('.right-bord').removeClass('right-bord');    if(this !== drag_obj) {        let centerX = e.target.offsetLeft + e.target.offsetWidth / 2;        if (e.clientX < centerX) {            $(obj).addClass('left-bord');        }        else if (e.clientX > centerX) {            $(obj).addClass('right-bord');        }    }    e.preventDefault();});$(document).on('dblclick', '.table-wrapper th:not(.child-table th, tr:last-child th)', function(e) {    let obj = this;    let old_name = $(obj).find('span').text();    let table = $(obj).parent().parent().parent().attr('data-name');    let column = $(obj).attr('data-column');    info_inputString(undefined, function(mess) {        SENDER('set_name_column', {new_name: bufferText, table: table, column: column}, function(mess) {            mess = JSON.parse(mess);            if(mess.status === 'ok') {                $(obj).text(bufferText);            } else {                error_executing(mess);            }        });    }, 'Новое значение для поля<br><b>«'+ $(obj).attr('data-column')+'»</b>', old_name);});$(document).on('click', '.close-map-btn', function(e) {    clear_bufer_table_select();});$(document).on('blur', '.table-wrapper textarea.edt, .table-wrapper input.edt', function(e) {    let obj = this;    let val = $(obj).val();    let edited = false;    if($(this).attr('data-edited') === '1') {        SENDER('set_value_table', {            table: obj_cell.table,            id: obj_cell.id,            column: obj_cell.column,            value: val        }, function (mess) {            mess = JSON.parse(mess);            if (mess.status === 'error') {                error_executing(mess);                setTimeout(function() {                    obj_cell.reload_table();                }, 200);            } else {                console.dir(mess);                console.log('обработчик формата вывода');                let sliced = val.slice(0, 50);                if (sliced.length < val.length) {                    sliced += '...';                }                let date = '';                let formattedDate = '';                switch(obj_cell.type) {                    case 'datetime':                        date = new Date(Date.parse(sliced));                        formattedDate = zero_plus(date.getDate(), 2) + '.' + zero_plus((date.getMonth() + 1), 2) + '.' + date.getFullYear() + ' ' + zero_plus(date.getHours(), 2) + ':' + zero_plus(date.getMinutes(), 2) + ':' + zero_plus(date.getSeconds(), 2);                        $(obj).parent().text(formattedDate);                        break;                    case 'date':                        date = new Date(Date.parse(sliced));                        formattedDate = zero_plus(date.getDate(), 2) + '.' + zero_plus((date.getMonth() + 1), 2) + '.' + date.getFullYear();                        $(obj).parent().text(formattedDate);                        break;                    case 'time':                        formattedDate = sliced + ':00';                        $(obj).parent().text(formattedDate);                        break;                    default:                        $(obj).parent().text(sliced);                        break;                }            }            $(obj).remove();        });    } else {        $(obj).parent().text(obj_cell.value);    }    $('.sel-td').removeClass('sel-td');});$(document).on('keydown', '.table-wrapper input', function(e) {    let obj = this;    if(e.keyCode === 13) {        $(obj).blur();    }});$(document).on('input', '.table-wrapper textarea.edt, .table-wrapper input.edt:not([type="checkbox"])', function(e) {    let obj = this;    if($(obj).val() === obj_cell.value) {        $(obj).attr('data-edited', '0');    } else {        $(obj).attr('data-edited', '1');    }});function get_data_cell_card(obj_td) {    let o = obj_td;    let edited = '0';    if($(o).closest('tr').hasClass('edited-field')) {        edited = '1';    }    buff_row = {        obj: o,        table_name: $(o).closest('.tb-card').attr('data-tbname'),        id: $(o).closest('.tb-card').attr('data-id'),        column_name: $(o).closest('tr').find('th').attr('data-title'),        edited: edited,        value: $(o).text(),        type: $(o).attr('data-type'),        reload_card: function() {            open_card($(o).closest('.content'), $(o).closest('.tb-card').attr('data-tbname'), $(o).closest('.tb-card').attr('data-id'), {}, function() {            });        },    };    // console.log('****************************');    // console.dir(buff_row);    return buff_row;}function get_data_cell(obj_td) {    let o = obj_td;    let types = $(o).closest('table').find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')').attr('data-type');    let edited = $(o).closest('table').find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')').attr('data-edited');    if(typeof types === 'string' && types.indexOf('(') > 0) {        types = types.split('(')[0];    }    obj_cell = {        obj: o,        th_obj: $(o).closest('table').find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')'),        table_name: $(o).closest('table').attr('data-name'),        table_obj: $(o).closest('table'),        id: parseInt($(o).parent().find('td[data-name="id"]').text()),        column_name: $(o).attr('data-name'),        value: $(o).text(),        edited: edited,        type: types,        reload_table: function() {            load_table_in(this.table_name, $(this.table_obj.parent()));        },    };    return obj_cell;}$(document).on('dblclick', '.child-table table tr', function(e) {    let obj = $(this).find('.child-sel-column');    let my_obj = $(obj_cell.obj);    let tr = this;    let id_sel = parseInt($(tr).find('td[data-name="id"]').text());    $(obj_cell.obj).text($(obj).text());    $(obj_cell.obj).dblclick();    SENDER('set_value_table', {        table: obj_cell.table,        id: obj_cell.id,        column: obj_cell.column,        value: id_sel    }, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            console.log(my_obj);            $(my_obj).html('<span class="list-item">'+$(obj).text()+'</span>');            $(my_obj).attr('data-id', id_sel);        } else {            error_executing(mess);            obj_cell.reload_table();        }    });});///////////////////////////////////  тут обработка двойного клика по ячейке //////////////////////////////////////////////////////////////////////  тут обработка двойного клика по ячейке //////////////////////////////////////////////////////////////////////  тут обработка двойного клика по ячейке ///////////////////////////////////buffer_arr = {};$(document).on('dblclick', 'table:not(.tb-card) tr:not(.not-edit-row) td:not(.child-table td), .card-img-wrapper', function(e) {    $('.sel-td').removeClass('sel-td');    if($(this).parent().parent().parent().parent().hasClass('content')) {        return false;    }    let o = this;    let types = $(o).parent().parent().parent().find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')').attr('data-type');    let edited = $(o).parent().parent().parent().find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')').attr('data-edited');    if(typeof types === 'string' && types.indexOf('(') > 0) {        types = types.split('(')[0];    }    obj_cell = {        obj: o,        th_obj: $(o).parent().parent().parent().find('tr:first-child').find('th:nth-child('+($(o).index()+1)+')'),        table: $(o).parent().parent().parent().attr('data-name'),        table_obj: $(o).closest('table'),        id: parseInt($(o).parent().find('td[data-name="id"]').text()),        column: $(o).attr('data-name'),        value: $(o).text(),        edited: edited,        type: types,        reload_table: function() {            load_table_in(this.table, $(this.table_obj.parent()));        },    };    console.dir(obj_cell);    if(edited === '1') {        $(o).addClass('sel-td');        switch(obj_cell.type) {            case 'file':                if($(o).find('.svg-wrapper').length > 0) {                    say('Тут был обработчик (редактор SVG)')                } else {  // если не SVG                        let llist = {};                        llist['Загрузить с компьютера'] = function() {                            setTimeout(function() {                                just_form_upload(o, obj_cell.table, obj_cell.column, obj_cell.id);                            }, 100);                        };                        llist['Открыть внутренние файлы'] = function() {                            open_table('file');                        };                        if($(o).find('audio').length > 0) {                            llist['Получить имя для вставки'] = function () {                                let name = $(obj_cell.obj).find('div').attr('data-name');                                copyToClipboard(name);                                say('Имя файла скопировано в буфер<br>«<b>' + name + '</b>»<br>Для вставки - Ctrl + V');                            }                        }                        if($(o).find('img').length > 0) {                            llist['Очистить слот'] = function () {                                SENDER('set_value_table', {                                    table: obj_cell.table,                                    id: obj_cell.id,                                    column: obj_cell.column,                                    value: '-'                                }, function (mess) {                                    mess = JSON.parse(mess);                                    if (mess.status !== 'ok') {                                        error_executing(mess);                                    } else {                                        obj_cell.reload_table();                                    }                                });                            }                            llist['Получить имя для вставки'] = function () {                                if($(obj_cell.obj).find('.audio').length > 0) {                                    let name = $(obj_cell.obj).find('div[data-name]').attr('data-name');                                    copyToClipboard(name);                                    say('Имя файла скопировано в буфер<br>«<b>' + name + '</b>»<br>Для вставки - Ctrl + V');                                } else {                                    let name = $(obj_cell.obj).find('img').attr('data-name');                                    if(typeof name === 'undefined') {                                        name = $(obj_cell.obj).find('*[data-name]').attr('data-name');                                    }                                    copyToClipboard(name);                                    say('Имя файла скопировано в буфер<br>«<b>' + name + '</b>»<br>Для вставки - Ctrl + V');                                }                            }                            if (obj_cell.type === 'file') {                                llist['Создать SVG'] = function () {                                    SENDER('create_new_file', {type: 'svg', count: 1}, function(mess) {                                        mess_executer(mess, function(mess) {                                            refrash_table_name('file');                                        });                                    });                                };                                llist['Скачать этот ресурс..'] = function () {                                    let link = document.createElement('a');                                    let name = $(obj_cell.obj).find('img').attr('data-name');                                    link.href = './DOWNLOAD/' + name;                                    link.download = 'download';                                    link.target = '_blank';                                    document.body.append(link);                                    link.click();                                };                            }                        }                        info_variants(undefined, llist);                }                break;            case 'enum':                let dt_enum = $(o).attr('data-enum');                let sell = $('<select onchange="enum_changer(this)" class="enum-sell" data-edited="0"></select>');                let tmp = document.getElementById(dt_enum);                let arr = tmp.content.cloneNode(true);                let t = $('<div></div>');                $(t).append(arr);                $(t).find('option').each(function(e, t) {                    if(obj_cell.value === $(t).text()) {                        $(sell).append($('<option selected="selected">'+$(t).text()+'</option>'));                    } else {                        $(sell).append(t);                    }                });                $(o).html(sell);                $(t).remove();                return false;                $(o).find('select').focus();                $(o).find('select').select();                break;            case 'select':                if($('.opend').length > 0 && !$(o).hasClass('opend')) {                    return false;                }                if(!$(o).hasClass('opend')) {                    $(o).addClass('opend');                    let child_table = obj_cell.th_obj.attr('data-table-name');                    let child_field_name = obj_cell.th_obj.attr('data-field-name');                    let child_id = $(o).attr('data-id');                    let count_cols = $(o).parent().find('td').length;                    let new_table_w = $('<tr><td colspan="' + count_cols + '"><div class="child-table"><img width="35" height="35" src="/IMG/SYS/loader.gif"></div></td></tr>');                    $(o).parent().after(new_table_w);                    setTimeout(function () {                        $(new_table_w).find('.child-table').addClass('max-height-table');                        load_table_in(child_table, $(new_table_w).find('.child-table'), function() {                            $(new_table_w).find('.child-table td[data-name="'+child_field_name+'"]').addClass('child-sel-column');                        }, false, {if_max_input: 40});                    }, 100);                } else {                    $(o).removeClass('opend');                    $(o).parent().next().find('.max-height-table').removeClass('max-height-table');                    setTimeout(function () {                        $(o).parent().next().remove();                    }, 700);                }                break;            case 'varchar':            case 'string':            case 'text':            case 'int':            case 'double':            case 'datetime':            case 'date':            case 'time':                console.log('dblclicker for td');                addLoader(obj_cell.obj, 20);                SENDER('get_value_table', {table: obj_cell.table, id: obj_cell.id, column: obj_cell.column}, function(mess) {                    mess = JSON.parse(mess);                    let arr = mess.body;                    if(mess.status === 'error') {                        error_executing(mess);                    } else {                        switch(obj_cell.type) {                            case 'text':                                let text_type = $(obj_cell.obj).attr('data-type-text');                                switch(text_type) {                                    case 'params':                                        console.dir(mess);                                        edit_micro_table(mess);                                        break;                                    case 'json':                                        if (Object.prototype.toString.call(arr) !== '[object Object]') {                                            if(arr === null) {                                                arr = '{"NEW_OBJ":{"NEW_KEY":"NEW VALUE"}}';                                            }                                            arr = JSON.parse(arr);                                            edit_json(arr);                                        } else {                                            edit_json(arr);                                        }                                        break;                                    default:                                        if (Object.prototype.toString.call(arr) === '[object Object]') {                                            $(o).html('<textarea class="edt" data-edited="0">'+JSON.stringify(mess.body)+'</textarea>');                                        } else {                                            $(o).html('<textarea class="edt" data-edited="0">'+mess.body+'</textarea>');                                        }                                        $(o).find('textarea').focus();                                        $(o).find('textarea').select();                                        break;                                }                                break;                            case 'datetime':                                $(o).html('<input class="edt" data-edited="0" type="datetime-local" value="'+mess.body+'">');                                $(o).find('input').focus();                                $(o).find('input').select();                                break;                            case 'date':                                $(o).html('<input class="edt" data-edited="0" type="date" value="'+mess.body+'">');                                $(o).find('input').focus();                                $(o).find('input').select();                                break;                            case 'time':                                $(o).html('<input class="edt" data-edited="0" type="time" value="'+mess.body+'">');                                $(o).find('input').focus();                                $(o).find('input').select();                                break;                            default:                                let type_inpt = 'text';                                if(obj_cell.type === 'int' || obj_cell.type === 'double') {                                    type_inpt = 'number';                                }                                $(o).html('<input class="edt" data-edited="0" type="'+type_inpt+'" value="'+mess.body+'">');                                $(o).find('input').focus();                                $(o).find('input').select();                                break;                        }                    }                });                break;            case 'tinyint':                let val = '1';                let val_text = $(o).attr('data-true');                if($(o).attr('data-value') === '1') {                    val = '0';                    val_text = $(o).attr('data-false');                }                SENDER('set_value_table', {                    table: obj_cell.table,                    id: obj_cell.id,                    column: obj_cell.column,                    value: val                }, function(mess) {                    mess = JSON.parse(mess);                    if(mess.status === 'ok') {                        $(o).text(val_text);                        $(o).toggleClass('status-positive');                        $(o).toggleClass('status-negative');                        $(o).attr('data-value', val);                    } else {                        error_executing(mess);                    }                });                break;            default:                say('Нет обработчика событий.', 2);                break;        }    }});$(document).on('click', 'table', function(e) {    $(this).find('.sel-column').removeClass('sel-column');});function set_table_cell(table_name, column, id, new_value, call_back=function(mess) {}) {    SENDER('set_value_table', {        table: table_name,        id: id,        column: column,        value: new_value    }, function(mess) {        mess_executer(mess, function(mess) {            call_back(mess);        })    });}let json_pnls = {};function edit_json(json) {    let cont = create_window(transform_pos('center'), 'JSON', function() {        setTimeout(function() {            let key = obj_cell.id+'_rs_'+obj_cell.column;            json_pnls[key] = {                table: obj_cell.table,                id: obj_cell.id,                column: obj_cell.column,                json: json,            }            $('.json-td img').remove();            $(cont).closest('.window').find('.minimaze-btn').remove();            $(cont).closest('.window').addClass('json-win');            $(cont).closest('.window').find('h4').addClass('flex between align-center gap-5');            $(cont).closest('.window').find('h4 b').after('<button title="Получить JSON в виде строки" onclick="get_json(\''+key+'\')" class="save-btn btn-gray btn-gray-text not-border micro-btn">GET JSON</button>');            $(cont).closest('.window').find('h4 b').after('<button title="Сохранить изменения" onclick="save_json(this, \''+key+'\')" style="margin-left: auto" class="save-btn btn-gray btn-gray-text not-border micro-btn">SAVE</button>');            $(cont).closest('.window').css('background', 'white');            $(cont).addClass('pre');            console.dir(json);            if(json !== null) {                create_form(json, $(cont).get(0));            }        }, 100);    });}function create_form(data, formContainer, parentKey = '', level = 0) {    Object.keys(data).forEach((key) => {        const fullKey = parentKey === '' ? key : `${parentKey}[${key}]`;        const keyInput = document.createElement('div');        keyInput.innerText = key;        keyInput.style.fontWeight=600;        keyInput.style.display='inline-block';        keyInput.dataset.key = fullKey; // Используем для сохранения полного пути ключа        const newDiv = document.createElement('div'); // Создаем новый div        newDiv.classList.add('inner-class');        newDiv.appendChild(keyInput);        if (typeof data[key] === 'object' && data[key] !== null) {            newDiv.classList.add('main-class');            newDiv.appendChild(document.createElement('br'));            create_form(data[key], newDiv, fullKey, level + 1); // Передаем новый div вместо formContainer        } else {            newDiv.appendChild(document.createTextNode(" : "));            newDiv.classList.add('inner-element');            const valueInput = document.createElement('input');            valueInput.type = 'text';            valueInput.value = data[key];            $(valueInput).attr('value', data[key]);            valueInput.dataset.key = fullKey; // Используем для сохранения полного пути ключа            newDiv.appendChild(valueInput);            newDiv.appendChild(document.createElement('br'));        }        formContainer.appendChild(newDiv); // Добавляем новый div в formContainer    });}function get_json(key) {    let txt = JSON.stringify(json_pnls[key]['json']);    console.log(txt);    copyToClipboard(txt);    say('JSON в виде строки скопирован в буфер обмена');}function save_json(btn_obj, key_pnl) {    let arr = {};    let obj = $(btn_obj).closest('.json-win').find('.pre');    arr = recursive_scan_json(obj, arr);    console.dir(arr);    // console.log('*******');    // console.dir(json_pnls[key_pnl]);    SENDER('set_value_table', {        table: json_pnls[key_pnl]['table'],        id: json_pnls[key_pnl]['id'],        column: json_pnls[key_pnl]['column'],        value: arr    }, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            say('ok');        } else {            error_executing(mess);        }    });}function recursive_scan_json(cont, arr) {    $(cont).children('.inner-class').each(function(e, t) {        if ($(t).hasClass('main-class')) {            let key = $(t).children('div:first').text();            arr[key] = {};            recursive_scan_json(t, arr[key]);        } else if ($(t).hasClass('inner-element')) {            let key = $(t).find('div').text();            let value = $(t).find('input').val();            arr[key] = value;        }    });    return arr;}$(document).on('input', '.pre input', function(e) {    $(this).attr('value', $(this).val());});$(document).on('dblclick', '.inner-class > div:first-child', function(e) {    let obj = this;    $(obj).attr('data-buffer', $(obj).text());    if(!$(obj).hasAttr('data-old')) {        $(obj).attr('data-old', $(obj).text());    }    obj.classList.add('input-div-field');    obj.setAttribute('contenteditable', 'true');    $(obj).focus();    $(obj).closest('.window').find('.save-btn').addClass('disabled');});$(document).on('keydown', '.input-div-field', function(e) {    let obj = this;    if(e.keyCode === 13) {        e.stopPropagation();        e.preventDefault();        if($(obj).hasClass('red-bg')) {            say('Нельзя использовать 2 одинаковых ключа на одном уровне объекта!..', 2);        } else {            $(obj).attr('data-buffer', $(obj).text());            $(obj).blur();        }    }});$(document).on('keyup', '.input-div-field', function(e) {    let obj = this;    let txt = $(obj).text();    $(obj).closest('.inner-class').parent().children('.inner-class').each(function(e, t) {        let item_name = $(t).children('div:first-child:not(.input-div-field)').text();        if(item_name === txt) {            $(obj).addClass('red-bg');        } else {            $(obj).removeClass('red-bg');        }    });});$(document).on('blur', '.input-div-field', function(e) {    let obj = this;    $(obj).removeClass('input-div-field');    let txt = $(obj).attr('data-buffer');    if(txt === '') { txt = '-'; }    $(obj).text(txt);    this.removeAttribute('contenteditable');    $(obj).closest('.window').find('.save-btn').removeClass('disabled');});let buffer_fragment = '';$(document).on('contextmenu', '.inner-class > div:first-child', function(e) {    let obj = this;    let txt = $(obj).text();    e.preventDefault();    e.stopPropagation();    let lst = {        '+ новый < КЛЮЧ > - < ЗНАЧЕНИЕ >': function() {            let cont = $(obj).parent();            if(!$(cont).hasClass('inner-element')) {                $(cont).append('<div class="inner-class inner-element"><div style="font-weight: 600; display: inline-block;">NEW_KEY</div> : <input type="text" value="-"><br></div>');            } else {                $(cont).parent().append('<div class="inner-class inner-element"><div style="font-weight: 600; display: inline-block;">NEW_KEY</div> : <input type="text" value="-"><br></div>');            }        },        '+ новый КЛАСС': function() {            let cont = $(obj).parent();            $(cont).append('<div class="inner-class main-class"><div style="font-weight: 600; display: inline-block;">NEW_OBJ</div><br><div class="inner-class inner-element"><div style="font-weight: 600; display: inline-block;">NEW_KEY</div> : <input type="text" value="NEW VALUE"><br></div></div>');        },        'Копировать фрагмент': function() {            buffer_fragment = $(obj).closest('.inner-class').html();            localStorage.setItem('buffer_fragment', JSON.stringify(buffer_fragment));            say('Скопировано');        },        'Вырезать объект': function() {            info_qest(undefined, function() {                buffer_fragment = $(obj).closest('.inner-class').html();                $(obj).closest('.inner-class').remove();                localStorage.setItem('buffer_fragment', JSON.stringify(buffer_fragment));            }, function() {            }, 'Объект [<b style="background-color: yellow">'+txt+'</b>] будет вырезан из этого класса.<br>Продолжить ?', 'Подвердить ВЫРЕЗАНИЕ', 'ОТМЕНИТЬ');        },        'Удалить объект': function() {            info_qest(undefined, function() {                $(obj).closest('.inner-class').remove();            }, function() {            }, 'Объект [<b style="background-color: yellow">'+txt+'</b>] будет полностью удалён без возможности его восстановления.<br>Если он имеет дочерние объекты - они так же будут утеряны.<br>Продолжить ?', 'УДАЛИТЬ БЕЗВОЗВРАТНО', 'ОТМЕНИТЬ удаление');        },    };    if(buffer_fragment !== '') {        lst['Вставить в этот фрагмент'] = function() {            let d = $('<section>').html(buffer_fragment);            if($(d).find('div').length >= 2) {                let new_fr = $('<div class="inner-class main-class"></div>');                $(new_fr).append(buffer_fragment)                $(obj).closest('.inner-class').append(new_fr);            } else {                let new_fr = $('<div class="inner-class inner-element"></div>');                $(new_fr).append(buffer_fragment)                $(obj).closest('.inner-class').append(new_fr);            }        };        lst['Вставить в главный класс'] = function() {            let new_fr = $('<div class="inner-class main-class"></div>');            $(new_fr).append(buffer_fragment)            $(obj).closest('.pre').append(new_fr);        };    }    if(typeof $(obj).attr('data-old') !== 'undefined' && $(obj).attr('data-old') !== txt) {        lst['Вернуть старый ключ'] = function() {            $(obj).text($(obj).attr('data-old'));        };    }    info_variants(undefined, lst, 'Работа с ключом [<b style="background-color: yellow; font-size: 20px;">'+txt+'</b>]');});function edit_micro_table(mess) {    let cont = create_window(transform_pos('center'), 'Редактор параметров', function() {        if(typeof obj_cell !== 'undefined') {            $(obj_cell.obj).find('img').remove();        }        setTimeout(function() {            $(cont).closest('.window').find('.minimaze-btn').remove();            let tbl = $('<table class="param-table"></table>');            let arr = mess.body.split('|');            let par = [];            for(let i in arr) {                par = arr[i].split('=');                if(par.length === 2) {                    $(tbl).append('<tr><td contenteditable="true">'+par[0]+'</td><td contenteditable="true">'+par[1]+'</td><td><button onclick="memory_save_table_edit(); $(this).closest(\'tr\').remove();" class="action-btn not-border">✕</button></td></tr>');                }            }            let down_row = $('<table class="table-param-down">' +                '<tr>' +                '<th></th>' +                '<th></th' +                '><th>' +                '<div class="flex gap-5" style="padding: 0 5px 3px">' +                '<button class="btn-gray not-border ico-btn" onclick="add_row_for_param_editor(this)"><img width="20" height="20" src="/IMG/SYS/plus_rect.svg"></button>' +                '<button class="btn-gray not-border ico-btn btn-back disabled" onclick="back_param_editor(this)"><img width="20" height="20" src="/IMG/SYS/back.svg"></button>' +                '<button style="margin-left: auto; width: unset; font-weight: 600" class="save-btn btn-gray not-border ico-btn disabled" onclick="back_param_save(this)">Сохранить</button>' +                '</div>' +                '</th>' +                '</tr>' +                '</table>');            $(cont).append(tbl);            $(cont).append(down_row);            memory_back.push($('.param-table').html());        }, 10);    });}function add_row_for_param_editor(obj) {    memory_save_table_edit();    $(obj).closest('.content').find('.param-table').append('<tr><td contenteditable="true"></td><td contenteditable="true"></td><td><button onclick="memory_save_table_edit(); $(this).closest(\'tr\').remove();" class="action-btn not-border">✕</button></td></tr>');}function back_param_editor(obj) {    memory_back_table_edit();}function sel_all(obj) {    let sett = true;    let tbl = $(obj).closest('table');    setTimeout(function() {        if(!$(tbl).find('th.checker input.not-active').prop('checked')) {            sett = false;        }        $(tbl).find('input.checker-inpt').each(function(e,t) {            if(sett) {                $(t).closest('tr').addClass('sel-row');                $(t).prop('checked', true);            } else {                $(t).closest('tr').removeClass('sel-row');                $(t).prop('checked', false);            }        });    }, 0);}function save_orders_columns(obj, side) {    buffer_obj_column = null;    let table = $(obj).parent().parent().parent().attr('data-name');    let arr = {};    let i = 0;    $(obj).parent().parent().parent().find('tr:first-child th').each(function(e,t) {        if($(t).attr('data-column') === $(obj).attr('data-column')) {            if(side === 'left') {                end_ord = $(obj).eq().prevObject[0].cellIndex;                let name = $(drag_obj).attr('data-column');                arr[name] = i++;            }            let name = $(obj).attr('data-column');            arr[name] = i++;            if(side === 'right') {                end_ord = ($(obj).eq().prevObject[0].cellIndex)+1;                let name = $(drag_obj).attr('data-column');                arr[name] = i++;            }        } else {            let name = $(t).attr('data-column');            if(typeof arr[name] === 'undefined') {                arr[name] = i++;            }        }    });    revert_columns($('.table-db'), start_ord, end_ord);    SENDER('set_orders_columns', {table: table, orders: arr}, function(mess) {        mess = JSON.parse(mess);    });}function revert_columns(table, from, to) {    let after = false;    if(to > $(table).find('tr:first-child th').length-1) {        after = true;    }    let rows = $('tr', table);    let cols;    rows.each(function() {        cols = $(this).children('th, td');        if(after) {            cols.eq(from).detach().insertAfter(cols.eq(to-1));            console.log('ok');        } else {            cols.eq(from).detach().insertBefore(cols.eq(to));        }    });}function sel_column(td_or_th) {    let table = $(td_or_th).parent().parent();    buffer_table = table;    $(table).find('.sel-column').removeClass('sel-column');    let i = $(td_or_th).eq().prevObject[0].cellIndex;    $(table).find('tr').each(function(e,t) {        $(t).find('th, td').eq(i).addClass('sel-column');    });}function clear_bufer_table_select() {    if(buffer_table !== null) {        $(buffer_table).find('.sel-column').removeClass('sel-column');    }}function del_column_local(th_obj) {    try {        let i = $(th_obj).eq().prevObject[0].cellIndex;        $(buffer_table).find('tr').each(function(e, t) {            $(t).find('th, td').eq(i).remove();        });    } catch (e) {    }}function del_column(table_name, th_obj) {    SENDER('delete_column', {table_name: table_name, column_name: $(th_obj).attr('data-column')}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            del_column_local(th_obj);        } else {            error_executing(mess);        }    });}function create_index_for_column(table_name, th_obj) {    SENDER('create_index_for_column', {table_name: table_name, column_name: $(th_obj).attr('data-column')}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            refrash_table_name(table_name);        } else {            error_executing(mess);        }    });}function load_table_in(table_name, parent_obj, call_back=function() {}, mem_saved=true, datas={}) {    let pag = $(parent_obj).find('.paginator').attr('data-paginator-item');    let column = $(parent_obj).find('.table-db .sel-sort');    let direct = 'DESC';    if(typeof pag === 'undefined') { pag = 1; }    if(typeof column === 'undefined') {        column = 'id';    } else {        if($(column).hasClass('direct-down')) {            direct = 'DESC';        } else if($(column).hasClass('direct-up')) {            direct = 'ASC';        }        column = $(column).closest('th').attr('data-column');    }    let params = {        paginator: pag,        column: column,        direction: direct,        data: datas,    };    if(typeof obj_cell !== 'undefined' && obj_cell.type === 'select') {        let s_obj = obj_cell.th_obj[0];        params.column = $(s_obj).attr('data-field-name');        params.direction = 'ASC';        params.paginator = -1;    }    if($('.search-input').length > 0 && table_name === $('.search-input').attr('data-search-table-name') && $('.search-input input').val().length > 0) {        params.text = $('.search-input input').val();    }    SENDER('get_table', {name: table_name, params: params}, function(mess) {        mess = JSON.parse(mess);        console.dir(mess);        if(mess.status === 'ok') {            $(parent_obj).html(mess.body);            border_corector($(parent_obj).closest('.window'));            // console.log('-->>'+$(parent_obj).closest('td').length);            if ($(parent_obj).closest('td').length === 0) {                let ico = $(parent_obj).find('.table-db').attr('data-ico');                if (ico.toString() !== '') {                    if ($(parent_obj).closest('.window').length > 0) {                        $(parent_obj).closest('.window').find('h4').find('.logo-table').remove();                        $(parent_obj).closest('.window').find('h4').prepend('<div class="logo-table"><img src="' + ico + '"></div>');                        let txt = $(parent_obj).find('.table-db').attr('data-title') + ' (' + $(parent_obj).find('.table-db').attr('data-name') + ')';                        $(parent_obj).closest('.window').find('h4 b').text(txt);                        $(parent_obj).closest('.window').find('h4').css('padding-left', '44px');                    }                }            }            setTimeout(call_back, 0);            setTimeout(function() {                if(mem_saved) {                    mem.save();                }            }, 500);        } else {            error_executing(mess, 2);        }    });}function load_compile_table_in(table_name, parent_obj, call_back=function() {}) {    SENDER('get_compile_table', {name: table_name}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            $(parent_obj).html(mess.body);            border_corector($(parent_obj).closest('.window'));            setTimeout(call_back, 0);        } else {            error_executing(mess, 2);        }    });}function create_new_column(side, sel) {    let table = sel.table_obj;    let table_name = sel.table_name;    let i = $(sel.th_obj).eq().prevObject[0].cellIndex;    if(side === 'right') {        ++i;    }    $(table).find('tr:first-child th:nth-child('+i+')').after($('<th id="insert-th"></th>'));    $(table).find('tr:not(:first-child)').each(function(e, t) {        $(t).find('td:nth-child('+i+')').after($('<td></td>'));    });    sel_column($(table).find('tr:first-child th:nth-child('+(i+1)+')'));    setOverlayJust();    loadTemplateIn('container', 'column_creator');}function add_new_row(table_name) {    SENDER('add_row_in_table', {table_name: table_name}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            let tbl_wrapp = $('.table-db[data-name="'+table_name+'"]').parent();            load_table_in(table_name, tbl_wrapp);        } else {            error_executing(mess);        }    });}function dell_sel_rows(table_name) {    info_qest(undefined, function() {        let arr = [];        $('.sel-row').each(function(e,t) {            arr.push(parseInt($(t).find('td[data-name="id"]').text()));        });        SENDER('delete_arr_rows_from_table', {table_name: table_name, arr: arr}, function(mess) {            mess = JSON.parse(mess);            if(mess.status === 'ok') {                $('.sel-row').each(function(e,t) {                    $(t).remove();                });            } else {                error_executing(mess);            }        });    }, function() {    }, 'Подтвердите удаление выбранных строк.', 'Подтверждаю - УДАЛИТЬ', 'Отменить');}function copy_sel_rows(table_name) {    let lst = $('.table-db[data-name="'+table_name+'"]').find('.sel-row');    if($(lst).length > 0) {        let arr = [];        $(lst).each(function (e, t) {            arr.push(parseInt($(t).find('td[data-name="id"]').text()));        });        info_inputString(undefined, function() {            SENDER('copy_rows', {table_name: table_name, rows_ids: arr, count_copys: parseInt(bufferText)}, function(mess) {                mess = JSON.parse(mess);                refrash_table_name(table_name);                console.dir(mess);            });        }, 'Сколько копий сделать ?', '1');    }}function show_all_tables(obj) {    let zindex = $(obj).closest('')    let win = create_window(undefined, 'Укажите нужную таблицу:');    load_compile_table_in('tables', win, function() {        let par = $(obj).closest('.table-wrapper');        $(win).find('tr').each(function(e,t) {            $(t).on('dblclick', function() {                let tbl = $(t).find('td[data-name="Таблица"]').text();                $('.sel-sort').removeClass('sel-sort');                load_table_in(tbl, par);                let url = new URL(location.href);                let new_url = url.protocol+'//'+url.hostname+'/admin'+'?tbl='+tbl;                set_local_url(new_url);                $(win).closest('.window').find('.close-window-btn').click();            });            $(t).on('contextmenu', function(e) {                e.preventDefault();                let llist = {                    'Открыть в новой вкладке': function() {                        let tbl = $(t).find('td[data-name="Таблица"]').text();                        window.open(domain+'admin?tbl='+tbl);                    },                };                info_variants(undefined, llist);            });        })    });}function change_table(name_table, owner_container_obj=null, pos=undefined) {    if(name_table === 'NEW TABLE') {        info_inputString(pos, function() {            let tbl_nm = translit(bufferText, true);            if(tbl_nm.length >= 4) {                SENDER('exist_table', {name: tbl_nm}, function(mess) {                    console.log(mess);                    if(mess === 'ok') {                        info_qest(undefined, function() {                            SENDER('create_new_table', {name: tbl_nm}, function(mess) {                                mess = JSON.parse(mess);                                if(mess.status === 'ok') {                                    let url = new URL(location.href);                                    let addr = url.protocol+'//'+url.hostname+'/admin?tbl='+tbl_nm;                                    location.href = addr;                                } else {                                    error_executing(mess);                                }                            })                        }, function() {                        }, 'Подтвердите создание таблицы<br>«'+tbl_nm+'» ?', 'Создать', 'Отмена');                    } else {                        say(mess+'<br>Такая таблица существует, либо введённое имя зарезирвировано системой.<br>Придумайте новое имя.', 2);                    }                })            } else {                say('Длинна имени таблицы должна быть >= 4 символам.', 2);            }        }, 'Введите имя таблицы в латинской раскладке:', 'new_table', 'Создать таблицу');    } else {        let addr = $('#tables-select option[data-name="'+name_table+'"]').attr('data-value');        location.href = addr;    }}function copy_table(obj) {    let id_list = [];    let titles = [];    $(obj).closest('.window').find('.table-db tr:first-child th').each(function(e,t) {        if(typeof $(t).attr('data-column') !== 'undefined') {            titles.push($(t).attr('data-column'));        }    });    $(obj).closest('.window').find('.table-db tr:not(.title-row)').each(function(e,t) {        if($(t).find('td').length > 0) {            id_list.push(parseInt($(t).find('td[data-name="id"]').text()));        }    });    let arr = {        table_name: $(obj).closest('.window').find('.table-db').attr('data-name'),        titles: titles,        id_list: id_list,    };    SENDER('copy_table_tab_text', arr, function(mess) {        mess_executer(mess, function(mess) {            console.dir(mess.params);            let cont = create_window(transform_pos('center'), 'Данные таблицы');            $(cont).append('<table></table>');            let tr = $('<tr></tr>');            for(let i in mess.params) {                tr = $('<tr></tr>');                for(let dd in mess.params[i]) {                    $(tr).append('<td>'+mess.params[i][dd]+'</td>');                }                $(cont).find('table').append(tr);            }            setTimeout(function() {                let urlField = $(cont).find('table').get(0);                let range = document.createRange();                range.selectNode(urlField);                window.getSelection().addRange(range);                document.execCommand('copy');                setTimeout(function() {                    window.getSelection().removeAllRanges();                }, 10);            }, 50);        });    });}function enum_changer(obj) {    SENDER('set_value_table', {        table: obj_cell.table,        id: obj_cell.id,        column: obj_cell.column,        value: $(obj).val()    }, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            $(obj_cell.obj).html($(obj).val());            $('.sel-td').removeClass('sel-td');        } else {            error_executing(mess);        }    });}function delete_table(table_name) {    let x = rnd(1, 10);    let y = rnd(1, 10);    info_inputString(undefined, function(e) {        if(x+y === parseInt(bufferText)) {            SENDER('delete_table', {table_name: table_name}, function(mess) {                mess = JSON.parse(mess);                if(mess.status === 'ok') {                    load_table_in('access', $('.table-wrapper'));                } else {                    error_executing(mess);                }            });        } else {            say('Ошибка...')        }    }, 'Попытка удаления таблицы <b>«'+table_name+'»</b><br>Для удаления таблицы - решите пример:<br>'+x+'+'+y+'= ?');}function changer_svg() {    $('.editor-svg-wrapper .svg-wrapper').html($('.editor-svg-wrapper textarea').val());}function save_svg() {    let name = $(buffer_sizer_obj).attr('data-name');    let code = $('.svg-editor').val();    SENDER('save_svg', {name: name, code: code}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {             obj_cell.reload_table();             delOvelay();        } else {            error_executing(mess);        }    });}function tables_list(pos=undefined) {    console.dir(pos);    let win = create_window(pos, 'Укажите нужную таблицу:');    load_compile_table_in('tables', win, function() {        $(win).find('tr').each(function(e,t) {            $(t).on('dblclick', function() {                let dir = $('<div class="table-wrapper"></div>');                load_table_in($(t).find('td[data-name="Таблица"]').text(), dir, function(e) {                    $(win).closest('.window').css('left', window.innerWidth/2+'px').css('top', window.innerHeight/2+'px');                    $(win).html(dir);                    $(dir).closest('.content').removeClass('content');                    border_corector($(win).closest('.window'));                    let ico = $(win).find('.table-db').attr('data-ico');                    if(ico.toString() !== '') {                        if($(win).closest('.window').length > 0) {                            $(win).closest('.window').find('h4').prepend('<div class="logo-table"><img src="'+ico+'"></div>');                            let txt = $(win).find('.table-db').attr('data-title')+' ('+$(win).find('.table-db').attr('data-name')+')';                            $(win).closest('.window').find('h4 b').text(txt);                            $(win).closest('.window').find('h4').css('padding-left', '44px');                        }                    }                });            });        })    });}function refrash_table(obj) {    let table = $(obj).closest('tr').find('th:first-child').attr('data-table');    load_table_in(table, $(obj).closest('.table-wrapper'));}function refrash_table_obj(obj) {    let table = $(obj).attr('data-name');    load_table_in(table, $(obj).closest('.table-wrapper'));}function refrash_table_name(tb_name) {    $('.table-db[data-name="'+tb_name+'"]').each(function(e, t) {        load_table_in(tb_name, $(t).closest('.table-wrapper'));    });}function refrash_visual_gallery() {    $('.gallery-list').each(function(e,t) {        $(t).closest('.content').find('.img-header button:last-child').click();    });}buffer_sizer_obj = null;function sizer(obj, type='image') {    setOverlayJust();    switch(type) {        case 'image':            $('#container').append('<img class="sizer" src="/DOWNLOAD/'+$(obj).attr('data-name')+'">');            $('#container').on('click', function() {                $(this).remove();            });            break;        case 'svg':            buffer_sizer_obj = obj;            $('.overlay-gray').addClass('column');            let name = $(obj).attr('src');            let code = '';            fetch(name)                .then(response => response.text())                .then(svgCode => {                    let box = $('<div class="editor-svg-wrapper flex column" style="gap: 10px; position: relative"><button onclick="delOvelay()" class="close-map-btn"></button><div class="flex between"><div class="svg-wrapper" style="width: 170px; height: 170px" id="svg-v">'+svgCode+'</div><h1><button onclick="save_svg()" class="action-btn">SAVE</button></h1></div><textarea oninput="changer_svg()" class="svg-editor">'+svgCode+'</textarea></div>');                    $('.overlay-gray').append(box);                });            break;        case 'video':            buffer_sizer_obj = obj;            let div = $('<div class="flex between gap-10"></div>');            let img = './IMG/SYS/img_not_exists.svg';            if($(obj).find('img').length > 0) {                img = $(obj).find('img').attr('src');            }            $(div).append('<video class="sizer" controls="controls" src="./DOWNLOAD/'+$(obj).attr('data-name')+'"></video>');            $(div).append('<div class="flex column gap-10"><button onclick="create_preview()" id="btn-preview-creator" class="btn-just">Создать превью</button><img style="display: inline-block; width: 150px; height: 70px; object-fit: contain" id="prev-img" src="'+img+'"></div>');            $('#container').append(div);            $('#container').append('<button onclick="$(this).parent().remove()" style="right: 5px; top: 5px" class="close-map-btn btn-just flex center">❌</button>');            if($(obj).find('img').length === 0) {                setTimeout(function () {                    create_preview(obj);                }, 2000);            }            break;        case 'word':            let doc = domain+"DOWNLOAD/"+$(obj).closest('.buffer-file-dragger').attr('data-name');            console.log(doc);            $('#container').append('<button onclick="$(this).parent().remove()" style="right: 5px; top: 5px" class="close-map-btn btn-just flex center">❌</button>');            $('#container').append('<iframe class="docx" src="https://view.officeapps.live.com/op/embed.aspx?src='+doc+'" width="100%" height="500px" frameborder="0"></iframe>');            break;        case 'pdf':            $('#container').append('<button onclick="$(this).parent().remove()" style="right: 5px; top: 5px" class="close-map-btn btn-just flex center">❌</button>');            $('#container').append('<iframe src="./DOWNLOAD/'+$(obj).attr('data-name')+'" width="100%" height="100%">');            break;        case 'txt':            buffer_sizer_obj = obj;            $('#container').append('<button onclick="$(this).parent().remove()" style="right: 5px; top: 5px" class="close-map-btn btn-just flex center">❌</button>');            let name_file = './DOWNLOAD/'+$(obj).attr('data-name');            fetch(name_file)                .then(response => response.text())                .then(txt => {                    let box = $('<div class="editor-svg-wrapper flex column" style="gap: 10px; position: relative"><button onclick="delOvelay()" class="close-map-btn"></button><div class="flex between"><h1><button onclick="save_svg()" class="action-btn">SAVE</button></h1></div><textarea class="svg-editor">'+txt+'</textarea></div>');                    $('.overlay-gray').append(box);                });            break;        default:            $('#container').on('click', function() {                $(this).remove();            });            break;    }}function create_preview(obj=null) {    if(obj === null) {        obj = buffer_sizer_obj;        buffer_sizer_obj = null;    }    const video = document.getElementById('container').getElementsByTagName('video')[0];    const canvas = document.createElement('canvas');    // canvas.width = video.videoWidth;    // canvas.height = video.videoHeight;    canvas.width = 150;    canvas.height = 70;    const ctx = canvas.getContext('2d');    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);    const dataURL = canvas.toDataURL('image/jpeg');    const img = document.createElement('img');    img.src = dataURL;    $(obj).find('img').remove();    $(obj).append(img);    $('#prev-img').attr('src', dataURL);    let name = $(obj).attr('data-name').split('.');    name.splice(name.length-1);    send_image_from_img(img, name.join('.')+'.jpg');}let field_timer = null;let buffer_column_number = -1;function search_field(obj) {    $('.search-input').remove();    buffer_column_number = $(obj).closest('th').index();    clearInterval(field_timer);    buffer_table = $(obj).closest('.table-db');    let table_name = $(buffer_table).attr('data-name');    let tbl = $(buffer_table).closest('.window').get(0);    let name_col = $(obj).closest('th').attr('data-column');    let inpt = $('<div data-search-table-name="'+$(obj).closest('.table-db').attr('data-name')+'" class="search-input"><input data-table-name="'+table_name+'" onkeyup="search_at_column(\''+name_col+'\')" type="text"><button onclick="$(this).closest(\'.search-input\').remove()" class="btn-just">✕</button></div>');    let rect = $(obj).closest('th').get(0).getBoundingClientRect();    let corr_x = 0;    let corr_y = 0;    if(rect.x-210 < 5) { corr_x = 120; }    let rect_table = tbl.getBoundingClientRect();    let elem = $(obj).closest('th').get(0);    let width_elem = elem.getBoundingClientRect().width;    $(inpt).css('left', (elem.offsetLeft+(width_elem*1.5))+'px').css('top', '47px').css('min-width', '210px').css('width', width_elem+'px').css('height', '35px');    $('#body .table-focus').append(inpt);    $('.search-input input').focus();}function search_at_column(column_name, direct='ASC', obj_btn=null) {    let text = '';    let pgn = 1;    if($('.search-input input').length > 0) {        text = $('.search-input input').val().toString();    }    if(obj_btn !== null) {        pgn = parseInt($(obj_btn).closest('.table-wrapper').find('.paginator').attr('data-paginator-item'));    }    let obj = $('th[data-column="'+column_name+'"]');    let tbl_name = $(obj_btn).closest('.table-db').attr('data-name');    if($('.search-input').length > 0) {        tbl_name = $('.search-input').attr('data-search-table-name');    }    let wrap = $('.table-db[data-name="'+tbl_name+'"]').closest('.table-wrapper');    obj = $(obj).closest('th');    let params = {        paginator: pgn,        column: $(obj).attr('data-column'),        text: text,        direction: direct    };    // console.dir(params);    // console.log(wrap);    SENDER('get_table', {name: tbl_name, params: params}, function(mess) {        mess = JSON.parse(mess);        if(mess.status === 'ok') {            $(wrap).html(mess.body);        } else {            error_executing(mess, 2);        }    });}function sorted(obj, direct='ASC') {    $(obj).closest('tr').find('.sel-sort').removeClass('sel-sort');    $(obj).addClass('sel-sort');    search_at_column($(obj).closest('th').attr('data-column'), direct, obj);}function open_card(parent_obj, table_name, id, fields={}, call_back=function() {}) {    SENDER('get_card_editor', {table_name: table_name, id: id, fields: fields}, function(mess) {        mess = JSON.parse(mess);        console.dir(mess);        if(mess.status === 'ok') {            console.log(parent_obj);            $(parent_obj).html(mess.body);            border_corector($(parent_obj.closest('.window')));            setTimeout(function() {                call_back();            }, 100);        } else {            error_executing(mess);        }    });}function open_table(table_name, pos=undefined) {    let win = create_window(transform_pos(pos), 'Укажите нужную таблицу:');    let dir = $('<div class="table-wrapper"></div>');    load_table_in(table_name, dir, function(e) {        $(win).html(dir);        $(dir).closest('.content').removeClass('content');        border_corector($(win).closest('.window'));        let ico = $(win).find('.table-db').attr('data-ico');        if(ico.toString() !== '') {            if($(win).closest('.window').length > 0) {                $(win).closest('.window').find('h4').prepend('<div class="logo-table"><img src="'+ico+'"></div>');                let txt = $(win).find('.table-db').attr('data-title')+' ('+$(win).find('.table-db').attr('data-name')+')';                $(win).closest('.window').find('h4 b').text(txt);                $(win).closest('.window').find('h4').css('padding-left', '44px');            }        }    });}function create_logo_for_table(window_obj, img_src='./IMG/SYS/renigate.svg') {    $(window_obj).find('h4').prepend('<div class="logo-table"><img src="'+img_src+'"></div>');}$(document).on('click', '.input-edit-select', function(e) {    let obj = this;    $(this).val('');    e.preventDefault();    e.stopPropagation();});$(document).on('blur', '.input-edit-select', function(e) {    let obj = this;    apply_select_item(obj)});$(document).on('change', '.input-edit-select', function(e) {    let obj = this;    apply_select_item(obj)});function apply_select_item(obj) {    if($(obj).val() !== buff_row.value) {        let id = $('#'+buff_row.table_name+'-'+buff_row.column_name).find('option[value="'+$(obj).val()+'"]').attr('data-id');        if(id === undefined) {            say('Данное поле можно заполнить только<br>предустановленным значением.<br>Для изменения или создания значения,<br>братитесь к таблице <b>"'+$(buff_row.obj).attr('data-table-from')+'</b>"', 2);            reverset_value_of_card_item();        } else {            change_card_item(parseInt(id), function() {                reverset_value_of_card_item($(obj).val());            });        }    }}function reverset_value_of_card_item(val='old') {    if(val === 'old') {        $(buff_row.obj).text(buff_row.value);    } else {        $(buff_row.obj).text(val);    }}function memory_save_table_edit() {    console.log('saved');    memory_back.push($('.param-table').html());    $('.btn-back').removeClass('disabled');    $('.save-btn').removeClass('disabled');}function memory_back_table_edit() {    let last = memory_back.pop();    setTimeout(function() {        $('.param-table').html(last);    }, 10);}function back_param_save() {    let arr = [];    $('.param-table tr').each(function(e,t) {        arr.push($(t).find('td:first-child').text() + '=' + $(t).find('td:nth-child(2)').text());    });    arr = arr.join('|');    console.log(arr);    SENDER('set_value_table', {        table: obj_cell.table,        id: obj_cell.id,        column: obj_cell.column,        value: arr    }, function (mess) {        mess = JSON.parse(mess);        if (mess.status === 'error') {            error_executing(mess);            setTimeout(function() {                obj_cell.reload_table();            }, 200);        } else {            setTimeout(function() {                obj_cell.reload_table();            }, 200);        }    });}function add_rows_from_text(obj) {    let name_tbl = $(obj).closest('.window').find('table.table-db').attr('data-name');    info_inputText(undefined, function() {        SENDER('insert_rows_in_table_format', {table_name: name_tbl, rows: bufferText}, function(mess) {            mess_executer(mess, function(mess) {                say('ok');            });        });    }, 'Вставьте Ctrl+V текст отформотрированный через TAB');}function create_player(obj, file_name) {    $(obj).parent().html('<audio controls="true" src="./DOWNLOAD/'+file_name+'"></audio>');}