<?phpglobal $PERM;include_once './CONTROLLERS/ajax_before.php';function change_column_info($table_name, $column_name, $title, $ord, $type, $default): bool {    if(q("    UPDATE `access` SET    `column_title` = '".db_secur($title)."',    `ord` = ".(int)$ord.",    `type` = '".db_secur($type)."',    `params` = '".serialize($default)."'    WHERE `table_name` = '".db_secur($table_name)."' AND `column_name` = '".db_secur($column_name)."'    ")) {        return true;    }    return false;}$block_tables = [        'access',        'errors',        'file',        'main',        'users',        'placing',        'messages',        'shops',        'tables_list',];if(isset($_POST['back'])) {    if(file_exists('./CONTROLLERS/BACK_APP/'.$_POST['back'].'.php')) {        include_once './CONTROLLERS/BACK_APP/'.$_POST['back'].'.php';    }    error('Нет обработчика');}switch($_POST['com']) {    case 'test':        echo 'Тут находится тестовое сообщение для настройки информационнфх панелей на несколько строк';        break;    case 'find_in_table':        if(Access::scanLevel() < 5) {            error('Ошибка доступа. Требуется уровень 5+');        }        $err = isset_columns($_POST, ['table', 'field_name', 'txt']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $access_tables= ['cities'];        if(!in_array($post['table'], $access_tables)) {            error('Запрещён поиск внутри таблицы "'.$post['table'].'"');        }        $rows = SQL_ROWS_FIELD(q("SELECT id, name FROM cities WHERE name LIKE '%".db_secur($post['txt'])."%' LIMIT 10"), 'id');        if(count($rows) > 0) {            ob_start();            foreach($rows as $k=>$v) {                echo '<option data-id="'.$k.'" value="'.$v['name'].'"></option>';            }            ans(ob_get_clean());        } else {            ans('');        }        break;    case 'save_user_delivery_info':        if(Access::scanLevel() < 1) {            error('Ошибка доступа. Требуется уровень 1+');        }        $err = isset_columns($_POST, ['user_info']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        PROFIL::init(Access::userID())->set_attachment('delivery_info', $post['user_info']);        ans('ok');        break;    case 'clear_cache':        if(Access::scanLevel() < 7) {            error('Ошибка доступа. Требуется уровень 7+');        }        CACHE::clear_cache();        ans('ok');        break;    case 'set_sys_mess':        if(Access::scanLevel() < 7) {            error('Ошибка доступа. Требуется уровень 7+');        }        $err = isset_columns($_POST, ['params']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $params = $post['params'];        $limit = $params['limit'] ?? 60;        switch($params['action']) {            case 'сообщение telegram':                if($row = SUBD::getLineDB('users', 'login', db_secur($params['login']))) {                    Access::set_system_message($params['login'], Access::userName(), ActionsList::TELEGRAMM, $params['mess'], (int)$params['time']);                    ans('ok');                } else {                    error('Не найден пользователь с таким логином!..');                }                break;            case 'разрешение':                Access::set_access((int)$params['id'], $params['key'], Access::userName(), (int)$limit);                ans('ok');                break;            default:                error('Не найден классификатор события (системного сообщения)');                break;        }        break;    case 'toggle_edit_table_status':        if(Access::scanLevel() < 5) {            error('Ошибка доступа. Требуется уровень 5+');        }        $err = isset_columns($_POST, ['table']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if($row = SUBD::getLineDB('tables_list', 'table_name', $post['table'])) {            if($row['fields_edit'] == 1) {                $ch = 0;            } else {                $ch = 1;            }            q("UPDATE `tables_list` SET `fields_edit`=".$ch." WHERE `id`=".(int)$row['id']);            ans('ok');        }        error('Ошибка метода переключателя...');        break;    case 'clear_alert':        $err = isset_columns($_POST, ['id_or_key']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $id_or_key = $post['id_or_key'];        $P = PROFIL::init(Access::userID());        $P->delete_alert(ALERT_TYPE::MESSAGE, $id_or_key);        ans('ok');        break;    case 'complite_registred_sms':        $err = isset_columns($_POST, ['code']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $auth = $post['auth'] ?? false;        $auth = (bool)$auth;        $code = (int)VALUES::decodePhone($post['code']);        if($row = Access::get_system_message(SITE::$personal, ActionsList::VALUE)) {            $row = $row[0];            $params = $row['params'];            $val_code = (int)VALUES::getParamFromString($params, 'code');            $phone = VALUES::getParamFromString($params, 'phone');            if($code === $val_code) {                if($auth === true) {                    Access::delete_system_message($row['id']);                    $row = SUBD::getLineDB('users', 'phone', $phone);                    $P = PROFIL::init((int)$row['id']);                    $_SESSION['user'] = $row;                    PROFIL::init((int)$row['id']);                    ans('ok');                } else {                    if ($id = USERS::create($phone, 1, $code, MODALITY::empty, db_secur($phone))) {                        Access::delete_system_message($row['id']);                        $row = SUBD::getLineDB('users', 'id', (int)$id);                        $P = PROFIL::init((int)$id);                        $P->add_alert(ALERT_TYPE::WARNING, ['text' => 'Необходимо сменить имя, для того, что бы вы могли размещать объявления на этом сайте.', 'link' => '/profil?title=account'], 'change_name');                        $P->add_alert(ALERT_TYPE::ATTANTION, ['text' => 'Желательно сменить пароль на этом сайте, по скольку сейчас паролем является код активации, который вы получили по СМС', 'link' => '/profil?title=account'], 'change_pass');                        $_SESSION['user'] = $row;                        PROFIL::init($id);                        ans('ok');                    }                }            }        }        error('Ошибка регистрации.<br>Возможно код не верный или уже устарел...');        break;    case 'registred_sms':        $err = isset_columns($_POST, ['phone']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $phone = VALUES::decodePhone($post['phone']);        if($row = SUBD::getLineDB('users', 'phone', $phone)) {            error('Такой номер уже зарегистрирован в системе. Используйте "Войти в аккаунт" или сбросьте пароль.');        }        $code = rand(10000, 99999);        if((int)getParam('count_sms_on_day') <= 0) {            error('Отключен сервис регистрации по SMS...');        }        if($row = Access::get_system_message(SITE::$personal, ActionsList::VALUE)) {            $row = $row[0];            $params = $row['params'];            $count = (int)VALUES::getParamFromString($params, 'count');            if($count < (int)getParam('count_sms_on_day')) {                ++$count;                $params = VALUES::addParamToString($params, 'count', $count);                $params = VALUES::addParamToString($params, 'code', $code);                $params = VALUES::addParamToString($params, 'phone', $phone);                Access::change_system_value($row['id'], 'params', $params);                if(SMSaero::send($phone, "Код регистраци: ".$code)) {                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Возможно проблема на сервере.');                }            } else {                error('Превышено суточное разрешение на отправку SMS с этого устройства...');            }        } else {            if(Access::set_system_message(SITE::$personal, SITE::$personal, ActionsList::VALUE, 'count=1|code='.$code.'|phone='.$phone, 86400)) {                if(SMSaero::send($phone, "Код регистраци: ".$code)) {                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Обратитесь к администрации сайта.');                }            } else {                error('Не удалось отправить SMS.<br>Обратитесь к администратору сервиса...');            }        }        error('Ошибка регистрации');        break;    case 'auth_sms':        $err = isset_columns($_POST, ['phone']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $phone = VALUES::decodePhone($post['phone']);        if(!$row = SUBD::getLineDB('users', 'phone', $phone)) {            error('Такого номера в нашей системе не существует. Используйте "Регистрация по номеру".');        }        $code = rand(10000, 99999);        if((int)getParam('count_sms_on_day') <= 0) {            error('Отключен сервис авторизации по SMS...');        }        if($row = Access::get_system_message(SITE::$personal, ActionsList::VALUE)) {            $row = $row[0];            $params = $row['params'];            $count = (int)VALUES::getParamFromString($params, 'count');            if($count < (int)getParam('count_sms_on_day')) {                ++$count;                $params = VALUES::addParamToString($params, 'count', $count);                $params = VALUES::addParamToString($params, 'code', $code);                $params = VALUES::addParamToString($params, 'phone', $phone);                Access::change_system_value($row['id'], 'params', $params);                if(SMSaero::send($phone, "Код авторизации: ".$code)) {                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Возможно проблема на сервере.');                }            } else {                error('Превышено суточное разрешение на отправку SMS с этого устройства...');            }        } else {            if(Access::set_system_message(SITE::$personal, SITE::$personal, ActionsList::VALUE, 'count=1|code='.$code.'|phone='.$phone.'|auth=1', 86400)) {                if(SMSaero::send($phone, "Код авторизации: ".$code)) {                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Обратитесь к администрации сайта.');                }            } else {                error('Не удалось отправить SMS.<br>Обратитесь к администратору сервиса...');            }        }        error('Ошибка авторизации');        break;    case 'access_to_change_phone':        $pay_SMS_summ = (int)getParam('pay_SMS_summ', 5);        $err = isset_columns($_POST, ['phone']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        INCLUDE_CLASS('shops', 'pay');//        if(PAY::is_payed_correct_summ(Access::userID(), $pay_SMS_summ) !== true) {//            error('На вашем счету недостаточно средств, пополните баланс в разделе "КОШЕЛЁК"');//        }        $phone = VALUES::decodePhone($post['phone']);        if($row = SUBD::getLineDB('users', 'phone', $phone)) {            error('Такой номер уже зарегистрирован в системе. Нельзя использовать этот номер.');        }        $code = rand(10000, 99999);        if((int)getParam('count_sms_on_day') <= 0) {            error('Отключен сервис регистрации по SMS...');        }        if($row = Access::get_system_message(Access::userID(), ActionsList::VALUE)) {            $row = $row[0];            $params = $row['params'];            $count = (int)VALUES::getParamFromString($params, 'count');            if($count < (int)getParam('count_sms_on_day')) {                ++$count;                $params = VALUES::addParamToString($params, 'count', $count);                $params = VALUES::addParamToString($params, 'code', $code);                $params = VALUES::addParamToString($params, 'phone', $phone);                Access::change_system_value($row['id'], 'params', $params);                if(SMSaero::send($phone, "Код подтверждения: ".$code)) {//                    PAY::buy(Access::userID(), $pay_SMS_summ, 'Списание', 'Кошелёк', 'Смена телефонного номера');                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Возможно проблема на сервере.');                }            } else {                error('Превышено суточное разрешение на отправку SMS с этого устройства...');            }        } else {            if(Access::set_system_message(Access::userID(), Access::userID(), ActionsList::VALUE, 'count=1|code='.$code.'|phone='.$phone, 86400)) {                if(SMSaero::send($phone, "Код подтверждения: ".$code)) {                    ans('ok');                } else {                    error('Не удалось отправить SMS...<br>Обратитесь к администрации сайта.');                }            } else {                error('Не удалось отправить SMS.<br>Обратитесь к администратору сервиса...');            }        }        error('Ошибка смены номера');        break;    case 'change_phone':        $err = isset_columns($_POST, ['code']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $code = (int)VALUES::decodePhone($post['code']);        if($row = Access::get_system_message(Access::userID(), ActionsList::VALUE)) {            $row = $row[0];            $params = $row['params'];            $val_code = (int)VALUES::getParamFromString($params, 'code');            $phone = VALUES::getParamFromString($params, 'phone');            if($code === $val_code) {                Access::delete_system_message($row['id']);                $P = PROFIL::init(Access::userID());                $P->set('phone', $phone);                $P->set_field('phone', $phone);                $_SESSION['user']['phone'] = $phone;                ans('ok');            }        }        error('Ошибка изменения номера.<br>Не верный код подтверждения...');        break;    case 'UPDATE_TOKEN_CHAT':        ONLINE::update_local_token_chat();        ans('ok');        break;    case 'get_popup':        $err = isset_columns($_POST, ['name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $datas = $post['datas'] ?? [];        if(!file_exists('./TEMPLATES/POPUPS/'.$post['name'].'.php')) {            error('Не найден popup с именем [ '.$post['name'].' ]');        }        extract($datas);        ob_start();        include('./TEMPLATES/POPUPS/'.$post['name'].'.php');        ans('ok', ob_get_clean());        break;    case 'create_new_file':        if(Access::scanLevel() < 5) {            error('Ошибка доступа. Требуется уровень 3+');        }        $err = isset_columns($_POST, ['type', 'count']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $user_id = Access::userID();        switch($post['type']) {            case 'svg':                for($i=0;$i<(int)$post['count'];++$i) {                    $file = '<svg xmlns="http://www.w3.org/2000/svg" width="8" height="16" viewBox="0 0 8 16"><path fill-rule="evenodd" d="M0 8c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.8-4-4z"/></svg>';                    $f_name = md5(rand(10000, 99999).date('Y-m-d H:i:s')).".svg";                    file_put_contents("./DOWNLOAD/".$f_name, $file);                    q("                    INSERT INTO `file` SET                    `sys_name`='".$f_name."',                    `type`='svg',                    `user_name`='new_file.svg',                    `created`='".date('Y-m-d H:i:s')."',                    `owner`=".$user_id.",                    `edited`='".date('Y-m-d H:i:s')."',                    `sys`=1,                    `params`='',                    `hash`='".md5($f_name.rand(10000, 99999))."'                    ");                }                ans('ok');                break;            default:                error('Неизвестный тип [ '.$post['type'].' ]');                break;        }        break;    case 'back_code_steps':        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        $err = isset_columns($_POST, ['fragment_name', 'page_path', 'steps']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        ans('ok', CODE::back_fragment_at_steps($post['page_path'], $post['fragment_name'], 1));        break;    case 'get_default_fragment':        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        if(PROFIL::init(Access::userID())->get('ADMIN') !== '1') {            error('У вас нет прав на просмотр кода данного сайта!..');        }        $err = isset_columns($_POST, ['fragment_name', 'page_path']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        ans('ok', CODE::get_iteration_fragment($post['page_path'], $post['fragment_name']));        break;    case 'save_edit_fragment':        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        $err = isset_columns($_POST, ['fragment_name', 'page_path', 'fragment_text']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        CODE::save_fragment($post['page_path'], $post['fragment_name'], $post['fragment_text']);        ans('ok');        break;    case 'get_edit_fagment':        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        $err = isset_columns($_POST, ['fragment_name', 'page_path']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        ans('ok', CODE::get_fragment($post['page_path'], $post['fragment_name']));        break;    case 'get_visual_gallery_list':        ans('ok', FILER::get_visual_gallery_list(true));        break;    case 'change_cataloger_item_name':        if(Access::scanLevel() < 6) {            error('Ошибка доступа. Требуется уровень 6+');        }        $err = isset_columns($_POST, ['type', 'id', 'new_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        INCLUDE_CLASS('shops', 'cataloger');        switch($post['type']) {            case 'maincat':                if(CATALOGER::change_name($post['id'], $post['new_name'], 'main_cat')) {                    ans('ok');                }                break;            case 'undercat':                if(CATALOGER::change_name($post['id'], $post['new_name'], 'under_cat')) {                    ans('ok');                }                break;            case 'actionlist':                if(CATALOGER::change_name($post['id'], $post['new_name'], 'action_list')) {                    ans('ok');                }                break;        }        error('Не найдена подходящая структура.');        break;    case 'set_param_panel':        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        $err = isset_columns($_POST, ['param', 'argum']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $P = new PROFIL(Access::userID());        $admin_panel = $P->get_sys_param('admin_panel');        if($admin_panel === '') { $admin_panel = []; }        $admin_panel[$post['param']] = $post['argum'];        $P->add_sys_param('admin_panel', $admin_panel);        ans('ok', $admin_panel);        break;    case 'change_array_of_rows_value':        $err = isset_columns($_POST, ['table_name', 'column_name', 'arr', 'value']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::scanLevel() < 3) {            error('Ошибка доступа. Требуется уровень 3+');        }        if(Access::access_to_change_column($post['table_name'], $post['column_name']) !== true) {            error('Значеня в данной колонке закрыты от изменений...');        }        $arr = [];        foreach($post['arr'] as $v) {            $arr[] = (int)$v;        }        if(!SUBD::existsTable($post['table_name'])) {            error('Не удалось найти таблицу с именем ['.$post['table_name'].']');        }        if(Access::get_type_field($post['table_name'], $post['column_name']) === 'int') {            if(q("UPDATE `".db_secur($post['table_name'])."` SET `".db_secur($post['column_name'])."` = ".(int)$post['value']." WHERE `id` IN (".implode(',',$arr).") ")) {                ans('ok');            }        } else {            if(q("UPDATE `".db_secur($post['table_name'])."` SET `".db_secur($post['column_name'])."` = '".db_secur($post['value'])."' WHERE `id` IN (".implode(',',$arr).") ")) {                ans('ok');            }        }        error('С множественной установкой данных, что-то пошло не так...');        break;//    case 'del_audio'://        if(isset($post['id'])) {//            $row = SUBD::getLineDB('file', 'id', (int)$post['id']);//            if(is_array($row)) {//                if(Access::userID() === (int)$row['owner']) {//                    FILER::delete($row['sys_name']);//                    ans('ok');//                } else {//                    error('Удалить файл может только его хозяин...');//                }//            }//            error('Не найден файл...');//        }//        break;    case 'send_bad_request':        $err = isset_columns($_POST, ['txt', 'code_prod']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $estimate = match ($post['txt']) {            'Товар продан' => -8,            'Неверная цена' => -5,            'Неверное описание, фото' => -2,            'Неверный адрес' => -3,            'Не дозвониться' => -6,            'Объявление нарушает правила RUMBRA' => -9,            'Мошенник' => -10,            default => -7,        };        $shop_id = (int)explode('_', $post['code_prod'])[0];        $prod_id = (int)explode('_', $post['code_prod'])[1];        INCLUDE_CLASS('shops', 'shop');        $owner_id = SHOP::id_shop_2_id_owner($shop_id);        q("        INSERT INTO `bed_request` SET        `datatime` = '".date('Y-m-d H:i:s')."',        `owner` = ".$owner_id.",        `shop_id` = ".$shop_id.",        `prod_id` = ".$prod_id.",        `code_prod` = '".$shop_id."_".$prod_id."',        `estimate` = ".$estimate.",        `message` = '".db_secur($post['txt'])."'        ");        ans('ok');        break;    case 'change_count_item_in_basket':        $err = isset_columns($_POST, ['arr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::scanLevel() < 1) {            $basket = $_COOKIE['basket'] ?? '';        } else {            $basket = $_COOKIE['basket-id-user'] ?? '';        }        $B = new BASKET($basket);        foreach($post['arr'] as $k=>$v) {            $B->change_count($k, (int)$v, false);        }        $B->save();        ans('ok');        break;    case 'in_basket':        $err = isset_columns($_POST, ['code']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::scanLevel() < 1) {            $basket = $_COOKIE['basket'] ?? '';        } else {            $basket = $_COOKIE['basket-id-user'] ?? '';        }        $B = new BASKET($basket);//        if(isset($post['only_add'])) {//            $post['code'] = '+';//        }        if($B->isset_in_basket($post['code'])) {            $B->change_count($post['code'], 0);            ans('ok', '-');        } else {            $B->change_count($post['code'], 1);            ans('ok', '+');        }        ans('ok', '0');        break;    case 'add_phone':        $err = isset_columns($_POST, ['number', 'descr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(Access::scanLevel() <= 0) {            error('Запрет использования ресурса');        }        q("INSERT INTO `phones` SET `number`='".db_secur($post['number'])."', `user_id`=".Access::userID().", `descr`='".db_secur($post['descr'])."'");        ans('ok');        break;    case 'create_pay':        $err = isset_columns($_POST, ['summ']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(round($post['summ'], 2) >= round(getParam('min_add_summ'), 2)) {            $ans = QCASS::create_pay(Access::userID(), (float) $post['summ'], 'Пополнение счёта на ' . round((float) $post['summ'], 2) . ' Р');            ans('ok', $ans);        } else {            error('Минимальная сумма зачисления должна быть больше или равно '.getParam('min_add_summ').' P');        }        break;    case 'copy_table_tab_text':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['table_name', 'id_list', 'titles']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if($post['table_name'] === 'users') {            error('Таблица USERS защищена от копирования на системном уровне...');        }        foreach($post['id_list'] as $k=>$v) {            $post['id_list'][$k] = (int)$v;        }        $ans = [];        $rows = SQL_ROWS(q("SELECT * FROM `".db_secur($post['table_name'])."` WHERE `id` IN (".implode(',', $post['id_list']).") "));        function sorter_at_field($arr, $mask_array): array {            foreach($arr as $k=>$v) {                $n_arr = [];                foreach($mask_array as $vv) {                    if($vv !== 'id') {                        $n_arr[$vv] = $v[$vv];                    }                }                $arr[$k] = $n_arr;            }            return $arr;        }        $rows = sorter_at_field($rows, $post['titles']);        foreach($rows as $v) {        }        ans('ok', $rows);        break;    case 'tele_subscribe':        $code = md5(rand(10000, 99999).'rtrerg'.Access::userID());        Access::set_system_message($code, Access::userName(), ActionsList::TELEGRAMM, Access::userID(), 300);        ans($code);        break;    case 'coords':        $lat = (float)$post['latitude'];        $lng = (float)$post['longitude'];        $ans = [];        $arr = DISTANCE::find_near_points($lat, $lng);//        ans('ok', $arr);        $id_cities_array = [];        foreach($arr as $v) {            $id_cities_array[] = (int)$v['city_id'];            $ans[] = [                'DISTANCE'=>$v['distance'],                'SHOP_ID'=>$v['shop_id'],                'CITY'=>(int)$v['city_id'],            ];        }        $cities_names = GEONAMER::id_citys_to_names($id_cities_array);        foreach($ans as $k=>$v) {            if(isset($cities_names[$v['CITY']])) {                $ans[$k]['CITY_NAME'] = $cities_names[$v['CITY']]['name'];            }        }        ans('ok', $ans);        break;    case 'place_GEO_to_id_GEO':        $err = isset_columns($_POST, ['country', 'locality']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        ans('ok', GEONAMER::get_id_from_city_country_name(trim($post['locality']), trim($post['country'])));        error('GOPA');        break;    case 'get_citys':        $err = isset_columns($_POST, ['txt']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $arr = GEONAMER::city_find(mb_strtolower($post['txt']), false, true, 10);        ans('ok', $arr);        break;    case 'get_support_notes_btns':        if(Access::scanLevel() < 1) {            error('Низкий уровень допуска');        }        echo 'Метод отключен';        exit;        break;    case 'note_message_of_support':        if(Access::scanLevel() < 1) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['id_room']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        q("UPDATE `alerts` SET `showed`=1, `datatime`='".date('Y-m-d H:i:s')."' WHERE `room_id`='".db_secur($post['id_room'])."' ");        break;    case 'change_pass':        if(Access::scanLevel() < 1) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['pass']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        q("UPDATE `users` SET `password` = '".crypter($post['pass'])."' WHERE `id` = ".Access::userID());        PROFIL::init(Access::userID())->delete_alert(ALERT_TYPE::WARNING, 'change_pass');        ans('ok');        break;    case 'save_new_address':        if(Access::scanLevel() < 1) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['address']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $P = PROFIL::init(Access::userID());        $all = explode('~~', $P->get_sys_param('list_places'));        if(!in_array($post['address'], $all)) {            $all[] = db_secur($post['address']);            $P->add_sys_param('list_places', implode('~~', $all));        }        ans('ok');        break;    case 'insert_rows_in_table_format':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['table_name', 'rows']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $rows = explode("\n", $post['rows']);        if(count($rows) < 2) {            error('Строк в предлагаемом файле должно быть как минимум - 2');        }        $columns = SUBD::getColumnsName($post['table_name']);        $columns_count = count($columns);        if($columns_count > 0 && $columns[0] === 'id') {            unset($columns[0]);            --$columns_count;        }        $count_in_table = count(explode("\t", $rows[1]));        if($columns_count !== $count_in_table) {            error('Количество столбцов в таблицах должно совпадать (без учёта ID - у системной таблицы!..)<br>['.implode(', ',$columns).']');        }        $cols = escapeArray($columns, '`');        $query = "INSERT INTO `".db_secur($post['table_name'])."` (".implode(',', $cols).") VALUES ";        $error_array = [];        foreach($rows as $k=>$v) {            $b_arr = explode("\t", $v);            if(count($b_arr) === $columns_count) {                foreach($b_arr as $key=>$val) {                    $b_arr[$key] = "'".$val."'";                }                $rows[$k] = " (".implode(',',$b_arr)." ) ";            } else {                $error_array[] = $v;                unset($rows[$k]);            }        }        if(count($rows) > 0) {            $query .= implode(',', $rows);            if(q($query)) {                ans('ok');            }        }        error('Что-то пошло не так, возможно система не обнаружила ни одной подходящей строки для вставки');        break;    case 'del_room':        if(Access::scanLevel() <= 0) {            error('Низкий уровень допуска');        }        $err = isset_columns($_POST, ['id_room']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $row = SUBD::getLineDB('rooms', 'room_id', $_POST['id_room']);        if(is_array($row)) {            $id = Access::userID();            if($id === (int)$row['client_id']) {                q("UPDATE `rooms` SET `client_id`=-1 WHERE `id`=".(int)$row['id']);                $row['client_id'] = -1;            }            if($id === (int)$row['owner']) {                if($row['stat'] == 0) {                    CMD::query('del_room '.$row['room_id'], true);                } else {                    q("UPDATE `rooms` SET `stat`=0 WHERE `id`=".(int)$row['id']);                }                q("DELETE FROM `alerts` WHERE `room_id` = '".db_secur($_POST['id_room'])."' ");                $row['owner'] = -1;            }            if(((int)$row['client_id'] === -1 && (int)$row['owner'] === -1) || ((int)$row['client_id'] === -1 && $row['stat'] == 0)) {                CMD::query('del_room '.$row['room_id'], true);            }            ans('ok');        }        break;    case 'set_read_status_at_room':        $err = isset_columns($_POST, ['id_room']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $row = SUBD::getLineDB('alerts', 'room_id', $_POST['id_room']);        if(is_array($row)) {            if(Access::userID() == $row['id_user']) {                q("UPDATE `alerts` SET `showed`=1 WHERE `id`=".(int)$row['id']);                ans('ok');            } else {                $row = SUBD::getLineDB('rooms', 'room_id', $_POST['id_room']);                if(is_array($row)) {                    q("UPDATE `rooms` SET `showed_us`=1 WHERE `id`=" . (int) $row['id']);                }                ans('ok');            }        }        error('Данная переписка помечена другой стороной как неактуальная. Для удаления переписки, кликните по блоку слева правой кнопкой мыши.');        break;    case 'transmission':        $err = isset_columns($_POST, ['room']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $ans = [];        $sha = $_SESSION['SHA'] ?? crypter(md5(date('d.m.Y H:i:s').'fgslnln09ss'.rand(100000, 999999)));        $ans['SHA'] = $sha;        $user_id = Access::userID();        if($user_id === -1) {            $user_id = $_COOKIE['default_id'] ?? '+'.crypter(Access::scanIP().date('Y-m-d H:i:s'));            setcookie('default_id', $user_id, time()+2592000, '/');        }        $R = new REDISE();        if($R->obj_del_item_argum('SHA', $user_id)) {            $R->obj_set('SHA', $sha, $user_id);        }        $room = md5('-_'.$user_id);        switch($_POST['room']) {            case 'support':            case 'admin':                $room = md5($_POST['room'].'_'.$user_id);                $row = SUBD::getLineDB('rooms', 'room_id', $room);                if(is_array($row)) {                    q("UPDATE `rooms` SET `created` = '".date('Y-m-d H:i:s')."' WHERE `id`=".(int)$row['id']);                } else {                    q("                    INSERT INTO `rooms` SET                    `room_id` = '".$room."',                    `type` = '".$_POST['room']."',                    `client_id` = ".Access::userID().",                    `owner` = -1,                    `shop_id` = -1,                    `product_id` = -1,                    `created` = '".date('Y-m-d H:i:s')."',                    `params`='-'                    ");                }                break;            case 'product':                $err = isset_columns($_POST, ['product_code']);                if(is_array($err)) {                    error('Отсутствуют следующие поля: ', $err);                }                INCLUDE_CLASS('shops', 'shop');                INCLUDE_CLASS('shops', 'props_commander');                $shop_prod_id = explode('_', $_POST['product_code']);                $owner = SHOP::get_shop((int)$shop_prod_id[0]);                $owner_id = (int)$owner['owner']['id'];                $room = md5($_POST['room'].'_'.$_POST['product_code']."_".$user_id);                $row = SUBD::getLineDB('rooms', 'room_id', $room);                if(is_array($row)) {                    q("UPDATE `rooms` SET `created` = '".date('Y-m-d H:i:s')."', `owner`=".$owner_id." WHERE `id`=".(int)$row['id']);                } else {                    $prod = SHOP::get_products_list_at_id((int)$shop_prod_id[0], [(int)$shop_prod_id[1]], false, 'id', 'ASC')[(int)$shop_prod_id[1]];                    $PARAMS = new PROPS_COMMANDER($prod['VALS']);                    $par = $prod['NAME'].'~~'.$PARAMS->get_all_props_at_field_name('Стоимость', true)['VALUE'].'~~'.$PARAMS->get_all_props_at_field_name('Изображение (фото)', true)['VALUE'];                    q("                    INSERT INTO `rooms` SET                    `room_id` = '".$room."',                    `type` = '".$_POST['room']."',                    `client_id` = ".Access::userID().",                    `owner` = ".$owner_id.",                    `shop_id` = ".(int)$shop_prod_id[0].",                    `product_id` = ".(int)$shop_prod_id[1].",                    `created` = '".date('Y-m-d H:i:s')."',                    `params` = '".$par."'                    ");                }                break;            default:                $row = SUBD::getLineDB('rooms', 'room_id', $_POST['room']);                if(is_array($row)) {                    $room = $_POST['room'];                    q("UPDATE `alerts` SET `showed`=1 WHERE `room_id`= '".$row['room_id']."' ");                }                break;        }        $ans['ROOM'] = $room;        ans('ok', $ans);        break;    case 'cmd':        if(Access::scanLevel() < 6) {            error('Требуется уровень допуска 6+');        }        CMD::query($post['cmd']);        exit;        break;    case 'send_tele_access':        $err = isset_columns($_POST, ['quest']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        switch($_POST['quest']) {            case 'add_pay':                $summ = $post['summ'] ?? 0;                $target_ballance_id = Access::userID();                $params = 'summ='.$summ.'|target_id='.$target_ballance_id;                $hesh = Access::set_tele_quest(2, 'Можно ли зачислить на счёт '.Access::userName().' '.$post['summ'].' руб. ?', 'add_pay', 60, $params);                ans('ok', $hesh);                break;            default:                error('Не найдена команда на выполнение...');                break;        }        break;    case 'scan_answer_result':        $err = isset_columns($_POST, ['hesh']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        echo Access::get_tele_answer($post['hesh']);        exit;        break;    case 'change_profil_params':        $access_fields = ['avatar'];        $er = [];        $err = isset_columns($_POST, ['params_arr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $P = PROFIL::init(Access::userID());        foreach($_POST['params_arr'] as $k=>$v) {            if(isset($v['field'])) {                if(in_array($v['field'], $access_fields)) {                    if($v['field'] === 'avatar') {                        $old_img = $P->get_field('avatar');                        if(file_exists('./DOWNLOAD/'.$old_img)) {                            $res = FILER::delete($old_img);                            say($res);                        }                    }                    $P->set_field($v['field'], $v['val']);                } else {                    $er[] = 'Запрет на изменение поля записи в таблице USERS';                }            }            if(isset($v['param'])) {                if($v['param'] === 'email') {                    $P->set_field('email', db_secur($v['val']));                }                if($v['param'] === 'city') {                    $id_city = GEONAMER::city_name_to_id($v['val']);                    if($id_city === -1) {                        error('Нам не удалось найти город с таким названием!..');                    } else {                        $row = SQL_ONE_ROW(q("SELECT * FROM city WHERE id=".$id_city." LIMIT 1"));                        $city_name = $row['name'];                        $country_name = GEONAMER::country_id_to_name($row['id_country']);                        $v['val'] = $city_name;                        $P->set('country', $country_name, false);                        $my_place = $city_name . "|" . mb_strtolower($city_name);                        setcookie('my_place', $my_place, time() + 31556926, '/');                    }                }                $P->set($v['param'], $v['val'], false);                if ($v['param'] === 'name') {                    $P->delete_alert(ALERT_TYPE::WARNING, 'change_name');                }            }        }        $P->set('changed', date('Y-m-d H:i:s'));        if(count($er) > 0) {            error('Не все параметры удалось записать...', $er);        } else {            ans('ok');        }        break;    case 'copy_rows':        if(Access::scanLevel() < 6) {            error('Требуется уровень 6+');        }        $err = isset_columns($_POST, ['table_name', 'rows_ids', 'count_copys']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        if(!SUBD::existsTable($post['table_name'])) {            error('Таблица '.$post['table_name'].' - не существует!..');        }        $columns = SUBD::getColumnsName($post['table_name']);        foreach($columns as $k=>$v) {            if($v === 'id') { unset($columns[$k]); }        }        if(count($columns) === 0) {            error('Не удалось распознать имена копируемых колонок');        }        $ids = [];        foreach($post['rows_ids'] as $v) {            $ids[] = (int)$v;        }        if(count($ids) === 0) {            error('Не переданы ID копируемых строк');        }        for($i=0;$i<(int)$post['count_copys'];++$i) {            q("            INSERT INTO `".$post['table_name']."` (".implode(',', $columns).")            SELECT ".implode(',', $columns)."            FROM `".$post['table_name']."`            WHERE id IN (".implode(',', $ids).");            ");        }        ans('ok');        break;    case 'get_form':        if(file_exists('./TEMPLATES/FORMS/'.$post['name'].'.php')) {            ob_start();            include('./TEMPLATES/FORMS/'.$post['name'].'.php');            echo ob_get_clean();            exit;        } else {            echo '<h3>Шаблон по адресу<p style="margin: 10px; padding:0; white-space: nowrap">"'.'./TEMPLATES/FORMS/'.$post['name'].'.html'.'"</p>- не найден!..</h3>';            exit;        }        break;    case 'send_message_for_tele':        if(Access::scanLevel() < 6) {            error('Требуется уровень 6+');        }        $err = isset_columns($_POST, ['user_id_tele', 'txt']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $target = $post['user_id_tele'];        if($target == -1) {            $row = SUBD::get_last_row('tele');            $target = $row['sender'];        }        TELE::send($target, $post['txt']);        ans('ok');        break;    case 'get_list_of_column_items':        if(Access::scanLevel() < 6) {            error('Требуется уровень 6+');        }        $err = isset_columns($_POST, ['table', 'column']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        }        $ask = q("SELECT * FROM `".db_secur($post['table'])."` ORDER BY ".db_secur($post['column'])." ASC ");        $rows = [];        foreach(SQL_ROWS($ask) as $v) {            $rows[(int)$v['id']] = $v[$post['column']];        }        ans('ok', $rows);        break;    case 'get_app':  // этот запрос возвращает шаблон и подключает все основные константы DIR AJAX и т.п.        if(!isset($post['name'])) {            echo 'Не передано поле "name"';        }        $row = SUBD::getLineDB('main', 'param', 'app_'.db_secur($post['name']));        if(is_array($row)) {            if(file_exists('./APPLICATIONS/'.$post['name'].'/template.php')) {                if(is_dir('./APPLICATIONS/'.$post['name'].'/libs')) {                    $files = glob('./APPLICATIONS/'.$post['name'].'/libs/*.php');                    foreach($files as $v) {                        include_once $v;                    }                }                ob_start();                include_once './APPLICATIONS/'.$post['name'].'/controller.php';                if(!isset($post['update'])) {                    echo '<link rel="stylesheet" href="/APPLICATIONS/' . $post['name'] . '/main.css?' . filemtime("./APPLICATIONS/" . $post['name'] . "/main.css") . '">';                    $js_addr = '/APPLICATIONS/' . $post['name'] . '/main.js?' . filemtime('./APPLICATIONS/' . $post['name'] . '/main.js');                    echo '<script>load_JSscript_once("'.$js_addr.'");</script>';                }                include_once './APPLICATIONS/'.$post['name'].'/template.php';                echo ob_get_clean();                exit;            }        }        echo 'Отсутствует файл шаблона приложения<br>./APPLICATIONS/'.$post['name'].'/template.php<br>либо данное приложение не зарегистрировано в таблице "main"!..';        exit;        break;    case 'get_card_editor':        $err = isset_columns($_POST, ['table_name', 'id']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if(Access::scanLevel() < 6) {                error('Требуется уровень допуска 6+');            }            $row = SUBD::getLineDB($post['table_name'], 'id', (int)$post['id']);            if(is_array($row)) {                $fields = Access::get_fields_params_for_table($post['table_name']);                foreach($row as $k=>$v) {                    if(isset($fields[$k])) {                        switch($fields[$k]['type']) {                            case 'select':                                $val = SUBD::getLineDB($fields[$k]['params']['table'], 'id', (int)$v)[$fields[$k]['params']['field']] ?? '-';                                $row[$k] = (string)$val;                                break;                            default:                                break;                        }                    }                }                ans(render('table_card', [                        'row'=>$row,                        'table_name'=>$post['table_name'],                        'id_row'=>(int)$post['id'],                        'fields'=>$fields,                ]));            } else {                error('В таблице «'.$post['table_name'].'», записи с id='.(int)$post['id'].' не найдено!..');            }        }        break;    case 'reg_mode':        if(isset($post['type'])) {            $code = rand(1000, 9999);        } else {            $code = crypter(rand(100000, 999999));        }        Access::set_system_message($code, $code, ActionsList::REG, $code, 60);        $ans = [            'code'=> $code,        ];        break;    ////////////////////////////////////////////////////////////////////    //  тут происходит формирование и отправка сообщений в демон на фронт    ////////////////////////////////////////////////////////////////////    case 'get_sys_messages':        $pull = [];        $server_info = $post['server'] ?? [];   // получаем инфу с фронта        if(isset($server_info['code'])) {            $row = SUBD::getLineDB('messages', 'actor', $server_info['code']);            if(is_array($row) && $row['action'] === ActionsList::REG && $row['params'] !== $row['actor']) {                if($row['params'] === 'auth' || $row['params'] === 'reg') {                    $P = new PROFIL((int)$row['target']);                    if($P->auth()) {                        $pull['com'] = 'reload';                        q("DELETE FROM `messages` WHERE `id` = ".(int)$row['id']);                    }                }            }        }        $pull['errors'] = $_SESSION['errors'] ?? [];        $pull['messages'] = $_SESSION['messages'] ?? [];        $_SESSION['messages'] = [];        $_SESSION['errors'] = [];        echo json_encode($pull, JSON_UNESCAPED_UNICODE);        exit;    ////////////////////////////////////////////////////////////////////    case 'open_self_edit_access':        if(Access::scanLevel() < 6) {            error('Требуется уровень 6+');        }        if(Access::set_access(Access::userName(), 'self-edit', Access::userName())) {            echo 'ok';            exit;        }        echo 'error';        exit;    case 'get_hesh':        ans(crypter($post['text']));        break;    case 'save_svg':        $err = isset_columns($_POST, ['name', 'code']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            $nm = explode('?', $post['name']);            if(is_array($nm) && count($nm) === 2) {                $post['name'] = $nm[0];            }            if(file_exists('./DOWNLOAD/'.$post['name'])) {                if(file_put_contents('./DOWNLOAD/'.$post['name'], $post['code'])) {                    $tim = filemtime('./DOWNLOAD/'.$post['name']);                    $tim = date('Y-m-d H:i:s', $tim);                    q("UPDATE `file` SET `edited` = '".$tim."' WHERE `sys_name` = '".db_secur($post['name'])."' LIMIT 1");                    ans('Успешно сохранён');                }            }        }        break;    case 'get_word_file':        header('Content-type: application/vnd.openxmlformats-officedocument.wordprocessingml.document');        header('Content-Disposition: inline; filename=document.docx');        // путь к файлу документа Word на сервере        $file = './DOWNLOAD/'.$post['name'];        readfile($file);        exit;    case 'exists':        $err = isset_columns($_POST, ['name', 't_table', 't_column', 't_id']);        if($PERM->get_permission($post['t_table'], Permiss::FIELDS_EDIT) === false) {            error('Поля данной таблицы защищены от изменений.');        }        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            $nm = explode('?', $post['name']);            if(is_array($nm) && count($nm) === 2) {                $post['name'] = $nm[0];            }            if(Access::access_to_change_column($post['t_table'], $post['t_column'])) {                if (file_exists('./DOWNLOAD/' . $post['name'])) {                    if (q("                UPDATE `" . db_secur($post['t_table']) . "` SET                 `" . db_secur($post['t_column']) . "` = '" . db_secur($post['name']) . "'                 WHERE                 `id` = " . (int) $post['t_id'] . "                ")) {                        ans('ok');                    } else {                        error('Ошибка присвоения имени');                    }                }            } else {                error('Данное поле закрыто от изменений в таблице Access');            }        }        break;    case 'delete_table':        if(Access::scanLevel() < 6) {            echo 'Доступно только пользователям с уровнем допуска 6+';            exit;        }        if(!isset($post['table_name'])) {            echo 'Не передано имя таблицы';            exit;        }        if($PERM->get_permission($post['table_name'], Permiss::TABLE_DEL) === false && Access::get_access(Access::userName(), 'self-edit') === false) {            error('Нет разрешения на удаление данной таблицы.');        }        if(!in_array($post['table_name'], $block_tables)) {            if(SUBD::delete_table($post['table_name'])) {                ans('ok');            } else {                error('Таблица защищена от удаления...');            }            exit;        }        break;    case 'get_column_params':        $err = isset_columns($_POST, ['table_name', 'column_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table_name'], Permiss::COLUMN_EDIT) === false && Access::get_access(Access::userName(), 'self-edit') === false) {                error('Для этой таблицы установлен флаг запрета на редактирование параметров коллонок.');            }            $ask = q("                    SELECT * FROM `access` WHERE                     `table_name` = '".db_secur($post['table_name'])."' AND                    `column_name` = '".db_secur($post['column_name'])."'                    ");            if($ask->num_rows) {                $row = $ask->fetch_assoc();                if($row['params'] !== null) {                    $row['params'] = unserialize($row['params']);                } else {                    $row['params'] = '';                }                ans('ok', $row);            } else {                error('В таблице Access не удалось найти совпадение по "'.$post['table_name'].'" и "'.$post['column_name'].'".<br>Попробуйте в этой таблице изменить порядок столбцов, либо название колонки');            }        }        break;    case 'files':        $ans = [            'status'=>'clear',            'result'=>[]        ];        if($PERM->get_permission('file', Permiss::ROW_ADD) === false) {            error('Добавление файлов - запрещено.');        }        if($PERM->get_permission('file', Permiss::FIELDS_EDIT) === false) {            error('Редактирование файлов - запрещено.');        }//        if($PERM->get_permission($_POST['table'], Permiss::ROW_ADD) === false) {//            error('Добавление файлов в таблице "'.$_POST['table'].'" - запрещено.');//        }//        if($PERM->get_permission($_POST['table'], Permiss::FIELDS_EDIT) === false) {//            error('Редактирование файлов в таблице "'.$_POST['table'].'" - запрещено.');//        }        if(Access::scanLevel() <= 0) {            $ans = [                'status'=>'error',                'text'=>'Запрещено загружать файлы не авторизованным пользователям.',                'type'=>'load',            ];            echo json_encode($ans, JSON_UNESCAPED_UNICODE);            exit;        }        if(!isset($_POST['executer'])) {            $_POST['executer'] = 'loader-in-file';        }        GENERAL_UPLOADER::isseter($_POST);        if(isset($_FILES) && !empty($_FILES)) {            if (isset($_FILES['userfile'])) {//        $count = count($_FILES['userfile']['name']);                $count = is_array($_FILES['userfile']['name']) ? count($_FILES['userfile']['name']) : 1;                $id = isset($_SESSION['user']) ? $_SESSION['user']['id'] : rand(100000, 999999);  // тянем id если есть                for ($i = 0; $i < $count; ++$i) {                    if(!file_exists('./DOWNLOAD/'.$_FILES['userfile']['name'])) {                        q("INSERT INTO `garbage` SET `ip`='".Access::scanIP()."', `load_time`='".date('Y-m-d H:i:s')."', `resurs`='".db_secur($_FILES['userfile']['name'])."' ");                        $expObj = new SplFileInfo($_FILES['userfile']['name']);                        $exp = mb_strtolower($expObj->getExtension());                        $name = date('Ymd-His') . '_id-' . $id . '-' . rand(100000, 999999) . '.' . $exp;                        $type_file = RBS::get_extention($name);                        $hash = hash_file('md5', $_FILES['userfile']['tmp_name']);                        if($type_file === 'image' || $type_file === 'audio') {                            $row_b = SUBD::getLineDB('file', 'hash', $hash);                            if(is_array($row_b)) {                                $name = $row_b['sys_name'];                                if((int)$row_b['owner'] == Access::userID()) {                                    $ans = [                                        'status'=>'ok',                                        'type'=>'clone',                                        'sys_name'=>$name,                                        'user_name'=>$_FILES['userfile']['name'],                                        'type_file'=>$type_file,                                    ];                                    echo json_encode($ans, JSON_UNESCAPED_UNICODE);                                    exit;                                }                            }                        }                        GENERAL_UPLOADER::check($_POST, $_FILES);                        if (move_uploaded_file($_FILES['userfile']['tmp_name'], './DOWNLOAD/' . $name)) {                            switch($type_file) {                                case 'image':                                    $img = new S_IMG(Core::$DOWNLOAD.$name);                                    $img->bestFit(100, 100)->toFile('./IMG/img100x100/'.$name);                                    $img = new S_IMG(Core::$DOWNLOAD.$name);                                    $img->bestFit(300, 300)->toFile('./IMG/img300x300/'.$name);                                                                        break;                                case 'video':                                    break;                            }//                            say($_POST);                            if($type_file === 'txt') {                                $type_file = 'text';                            }                            $params = $_POST['params'] ?? '';                            if(q("                            INSERT INTO `file` SET                            `sys_name`  = '" . db_secur($name) . "',                            `owner`     = " . Access::userID() . ",                            `user_name` = '" . db_secur($_FILES['userfile']['name']) . "',                            `type`      = '".$type_file."',                            `created`   = '" . date('Y-m-d H:i:s') . "',                            `params`    = '".db_secur($params)."',                            `hash`      = '".$hash."'                            ")) {                                $last_id = SUBD::get_last_id();                                $p = $_POST;                                /////////////////////////////////////////////////////////////////////////////////                                ///////////////////  ЗАШИТ EXECUTER ДЛЯ general_files.js  ///////////////////////                                /////////////////////////////////////////////////////////////////////////////////                                GENERAL_UPLOADER::execute($_POST,                                    $name,                                    $_FILES['userfile']['name'],                                    $type_file,                                    $last_id);                                /////////////////////////////////////////////////////////////////////////////////                                /////////////////////////////////////////////////////////////////////////////////                                ///////////////////////////////////////////////////////////////////////////////////                                if($p['table'] !== 'file') {//                                    q("//                                    UPDATE `".db_secur($p['table'])."` SET//                                    `".$p['column']."` = '".db_secur($name)."' WHERE//                                    `id` = ".(int)$p['id']."//                                    ");//                                    $ans = [//                                        'status'=>'ok',//                                        'type'=>'load',//                                        'sys_name'=>$name,//                                        'user_name'=>$_FILES['userfile']['name'],//                                        'type_file'=>$type_file,//                                        'table'=>$p['table'],//                                        'insert_last_id'=>$last_id,//                                        'column'=>$p['column'],//                                        'id_row'=>(int)$p['id'],//                                    ];//                                    echo json_encode($ans, JSON_UNESCAPED_UNICODE);//                                    exit;//                                }                            }                            if(isset($_POST['in_player_folder'])) {                                INCLUDE_CLASS('music', 'media');                                if(isset($last_id)) {                                    $M = new MEDIA(Access::userID());                                    $M->add_tracks_array_in_folder_path([$last_id], $_POST['in_player_folder']);                                }                            }                            if(isset($_POST['in_system_folder'], $last_id)) {                                if($_POST['in_system_folder'] === '-') {                                    $_POST['in_system_folder'] = '';                                }                                q("UPDATE `file` SET `params`='".db_secur($_POST['in_system_folder'])."' WHERE `id`=".(int)$last_id);                            }                            $ans = [                                'status'=>'ok',                                'type'=>'load',                                'sys_name'=>$name,                                'user_name'=>$_FILES['userfile']['name'],                                'type_file'=>$type_file,                                'table'=>$p['table'],                                'insert_last_id'=>$last_id,                                'column'=>$p['column'],                                'id_row'=>(int)$p['id'],                            ];                        }                    } else {                        /////////////////////////////////////////////////////////////////////////////////                        ///////////////////  ЗАШИТ EXECUTER ДЛЯ general_files.js  ///////////////////////                        /////////////////////////////////////////////////////////////////////////////////                        ///////////////////   ЕСЛИ КОПИРОВАНИЕ МЕЖДУ ПАПКАМИ      ///////////////////////                        /////////////////////////////////////////////////////////////////////////////////                        if(isset($_POST['executer'])) {                            $ans = [                                    'status'=>'error',                                    'text'=>'Загрузка в визуальную галлерею из внутренних ресурсов - не имеет смысла<brЭтот файл уже присутствует в системе.',                                    'type'=>'load',                                    'user_name'=>$_FILES['userfile']['name'],                                    'EXECUTER_COMPLITE'=>'ok',                            ];                            echo json_encode($ans, JSON_UNESCAPED_UNICODE);                            exit;                        }                        $p = $_POST;                        if($p['table'] !== 'file') {                            q("                            UPDATE `" . db_secur($p['table']) . "` SET                             `" . $p['column'] . "` = '" . db_secur($_FILES['userfile']['name']) . "' WHERE                            `id` = " . (int) $p['id'] . "                            ");                            $ans = [                                'status'=>'ok',                                'type'=>'update',                                'sys_name'=>$_FILES['userfile']['name'],                                'table'=>$p['table'],                                'column'=>$p['column'],                                'id_row'=>(int)$p['id'],                            ];                        } else {                            if(isset($p['change_cataloger_image'])) {                                $type = $_POST['change_cataloger_image'];                                $id = (int)$_POST['cataloger_id'];                                switch($type) {                                    case 'maincat':                                        q("UPDATE `shops_categorys` SET `logo_img` = '".$_FILES['userfile']['name']."' WHERE `id`=".$id);                                        break;                                    case 'undercat':                                        q("UPDATE `shops_undercats` SET `logo_img` = '".$_FILES['userfile']['name']."' WHERE `id`=".$id);                                        break;                                    case 'actionlist':                                        q("UPDATE `shops_lists` SET `logo_img` = '".$_FILES['userfile']['name']."' WHERE `id`=".$id);                                        break;                                }                                $ans = [                                    'status'=>'ok',                                    'type'=>'update',                                    'sys_name'=>$_FILES['userfile']['name'],                                ];                            }                        }                    }                }            }            echo json_encode($ans, JSON_UNESCAPED_UNICODE);            exit;        }        echo json_encode($ans, JSON_UNESCAPED_UNICODE);        exit;        break;    case 'files_rooms':        $ans = [            'status'=>'clear',            'result'=>[]        ];        if(isset($_FILES) && !empty($_FILES)) {            if (isset($_FILES['userfile'])) {                $count = is_array($_FILES['userfile']['name']) ? count($_FILES['userfile']['name']) : 1;                $id = isset($_SESSION['user']) ? $_SESSION['user']['id'] : rand(100000, 999999);  // тянем id если есть                $params = $_POST['params'] ?? '';                if($params === '') {                    error('Не указана комната сохранения');                }                $params = db_secur($params);                for ($i = 0; $i < $count; ++$i) {                        $expObj = new SplFileInfo($_FILES['userfile']['name']);                        $exp = mb_strtolower($expObj->getExtension());                        $name = date('Ymd-His') . '_id-' . $id . '-' . rand(100000, 999999) . '.' . $exp;                        if(!is_dir('./DOWNLOAD/FILES_ROOMS/'.$params)) {                            mkdir('./DOWNLOAD/FILES_ROOMS/'.$params);                            mkdir('./DOWNLOAD/FILES_ROOMS/'.$params.'/img100x100');                            mkdir('./DOWNLOAD/FILES_ROOMS/'.$params.'/img300x300');                        }                        if (move_uploaded_file($_FILES['userfile']['tmp_name'], './DOWNLOAD/FILES_ROOMS/'.$params.'/' . $name)) {                            $type_file = RBS::get_extention($name);                            switch($type_file) {                                case 'image':                                    $img = new S_IMG('./DOWNLOAD/FILES_ROOMS/'.$params.'/' . $name);                                    $img->bestFit(100, 100)->toFile('./DOWNLOAD/FILES_ROOMS/'.$params.'/img100x100/'.$name);                                    $img = new S_IMG('./DOWNLOAD/FILES_ROOMS/'.$params.'/' . $name);                                    $img->bestFit(300, 300)->toFile('./DOWNLOAD/FILES_ROOMS/'.$params.'/img300x300/'.$name);                                    break;                                case 'video':                                    break;                            }                                $p = $_POST;                                $ans = [                                    'status'=>'ok',                                    'type'=>'load',                                    'sys_name'=>$name,                                    'user_name'=>$_FILES['userfile']['name'],                                    'type_file'=>$type_file,                                    'table'=>$p['table'],                                    'column'=>$p['column'],                                    'id_row'=>(int)$p['id'],                                ];                                echo json_encode($ans, JSON_UNESCAPED_UNICODE);                                exit;                        }                }            }            echo json_encode($ans, JSON_UNESCAPED_UNICODE);            exit;        }        echo json_encode($ans, JSON_UNESCAPED_UNICODE);        exit;        break;    case 'thumbnail':        if(Access::scanLevel() <= 5) {            error('Низкий уровень допуска. Отклонено.');        }        if ($_FILES['image']['error'] === UPLOAD_ERR_OK) {            $tmpFile = $_FILES['image']['tmp_name'];            $originalFile = $_FILES['image']['name'];            move_uploaded_file($tmpFile, './IMG/VIDEO_PREVIEW/' . $originalFile);        }        break;    case 'delete_arr_rows_from_table':        $err = isset_columns($_POST, ['table_name', 'arr']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($_POST['table_name'], Permiss::ROW_DEL) === false) {                error('Данная таблица закрыта от удаления записей.');            }            if(SUBD::delete_arr_rows_from_table($post['table_name'], $post['arr'])) {                ans('ok');            } else {                if($post['table_name'] !== 'file') {                    error('Что то пошло не так...<br>(возможно данная таблица защищена от удаления.)');                } else {                    error('Что то пошло не так...<br>(возможно запись помечена как SYS<br>или таблица защищена от удаления.)');                }            }            }        break;    case 'add_row_in_table':        if(!isset($_POST['table_name'])) {            error('Не найдена целевая таблица...');        }        if($_POST['table_name'] === 'tables_list') {            error('Добавление запсей в эту таблицу,<br>доступно только по кнопке « Новая ▤ »');        }        if($PERM->get_permission($_POST['table_name'], Permiss::ROW_ADD) === false && Access::get_access(Access::userName(), 'self-edit') === false) {            error('Данная таблица закрыта от добавления новых записей.');        }        if(SUBD::add_row_in_table($_POST['table_name'])) {            ans('ok');        } else {            error('somthing wrong...');        }        break;    case 'delete_column':        $err = isset_columns($_POST, ['table_name', 'column_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table_name'], Permiss::COLUMN_DEL) === false) {                error('Удаление колонок в этой таблице - запрещено.');            }            if(q("ALTER TABLE `".db_secur($post['table_name'])."` DROP `".db_secur($post['column_name'])."`")) {                if(q("DELETE FROM `access` WHERE `table_name` = '".db_secur($post['table_name'])."' AND `column_name` = '".db_secur($post['column_name'])."'")) {                    ans('Успешно');                } else {                    error('Что то пошло не так...');                }            } else {                error('Не удалось удалить колонку.');            }        }        break;    case 'create_index_for_column':        $err = isset_columns($_POST, ['table_name', 'column_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table_name'], Permiss::COLUMN_EDIT) === false) {                error('Редактирование колонок в этой таблице - запрещено.');            }            if(q("CREATE INDEX ".db_secur($post['column_name'])."_IX ON `".db_secur($post['table_name'])."` (`".db_secur($post['column_name'])."`)")) {                ans('ok');            }            error('Не удалось создать поисковый индекс');        }        break;    case 'delete_all_indexes_for_column':        $err = isset_columns($_POST, ['table_name', 'column_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table_name'], Permiss::COLUMN_EDIT) === false) {                error('Редактирование колонок в этой таблице - запрещено.');            }            $rows = SQL_ROWS(q("SHOW INDEX FROM `".db_secur($post['table_name'])."`"));//            ans($rows);            foreach($rows as $k=>$v) {                if($v['Column_name'] === $post['column_name']) {                    if($v['Key_name'] === 'PRIMARY') {                        q("ALTER TABLE `".db_secur($post['table_name'])."` MODIFY `".db_secur($post['column_name'])."` INT DEFAULT -1");                    }                    q("ALTER TABLE `".db_secur($post['table_name'])."` DROP INDEX `".db_secur($v['Key_name'])."`");                    if($post['column_name'] === 'id') {                        q("ALTER TABLE `".db_secur($post['table_name'])."` MODIFY `id` INT DEFAULT -1");                    }                }            }            ans('ok');        }        error('Не удалось удалить все поисковые индексы');        break;    case 'load_data_list_values':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска. Требуется 6+');        }        $ask = q("SELECT ".db_secur($post['table']).".id, ".db_secur($post['table']).".".db_secur($post['column'])." FROM `".db_secur($post['table'])."`");        $arr = SQL_ROWS($ask);        ans('Список', $arr);        break;    case 'create_new_column':        $edited = $post['edited'] ?? false;        $err = isset_columns($_POST, ['title', 'name', 'types', 'types_column', 'default', 'ord', 'table']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($edited === false && $PERM->get_permission($post['table'], Permiss::COLUMN_ADD) === false) {                error('Добавление колонок в эту таблицу - запрещено.');            }            $old_column_name = $post['old_name'] ?? '';            if(SUBD::create_column($post['table'], $post['name'], $post['default'], $post['title'], $post['ord'], $post['types_column'], $edited, $old_column_name)) {                ans('ok');            } else {                error('не удалось');            }        }        break;    case 'get_all_tables':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска. Требуется 6+');        }        $ask = q("SELECT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '".Core::$DB_NAME."'");        $rows = SQL_ROWS($ask);        $arr = [];        foreach($rows as $v) {            $arr[$v['TABLE_NAME']][] = $v['COLUMN_NAME'];        }        ans('', $arr);        break;    case 'load_template':        $access_template = ['column_creator', 'reg-form', 'alerts', 'manager-card', 'products-of-shop', 'menu'];        if(in_array($post['template'], $access_template)) {            $params = $post['params'] ?? [];            ans(render($post['template'], $params));        } else {            error('Данный шаблон закрыт от загрузки по AJAX');        }        break;    case 'get_table':        if(Access::scanLevel() < 6 && !Access::access_to_table($post['name'])) {            error('Низкий уровень допуска. Требуется 6+');        }        if(isset($post['name'])) {            $paginator_num = 1;            $column = 'id';            $direct = 'ASC';            $text = '';            if(isset($post['params'])) {                $paginator_num = (int)$post['params']['paginator'];                if(isset($post['params']['column'])) {                    $column = db_secur($post['params']['column']);                }                if(isset($post['params']['text'])) {                    $text = db_secur($post['params']['text']);                }                if(isset($post['params']['direction'])) {                    if($post['params']['direction'] !== 'ASC') {                        $direct = 'DESC';                    }                }            }            $dd = new SUBD();            $dd->enabledTable($post['name']);            ans($dd->createTableFromDB($post['name'], $paginator_num, $column, $direct, false, $text));        } else {            error('Таблица с именем ['.$post['name'].'] - не найдена...');        }        break;    case 'get_compile_table':        $ans = [];        switch($post['name']) {            case 'tables':                $self_level = Access::scanLevel();                $tbls = SQL_ROWS_FIELD(q("SELECT tables_list.ico, tables_list.title, tables_list.access, tables_list.table_name, tables_list.descr FROM tables_list"), 'table_name');                $arr = SUBD::get_all_tables();                foreach($arr as $k=>$v) {                    $descr = $tbls[$v]['descr'] ?? '---';                    $ans[$k] = [                        '№'=>$k+1,                        'Таблица'=>$v,                        'Описание'=>$descr,                    ];                    if(isset($tbls[$v])) {                        if($self_level < (int)$tbls[$v]['access']) {                            unset($ans[$k]);                        }                    }                }                ans(SUBD::createTableFromARRAY($ans, 0, 'Таблица', 'ASC', false));                break;            default:                error('Не найден шаблон для компиляции нужной таблицы...');;                break;        }        error('Ошибка запроса скомпилированной таблицы...');        break;    case 'set_orders_columns':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска. Требуется 6+');        }        $err = isset_columns($_POST, ['table', 'orders']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table'], Permiss::COLUMN_EDIT) === false) {                error('Колонки данной таблицы защищены от редактирования.');            }            if(count($post['orders']) > 0) {                foreach($post['orders'] as $k=>$v) {                    if($k === 'undefined') continue;                    $ask = q("                         SELECT * FROM `access` WHERE                          `table_name`='".db_secur($post['table'])."' AND                         `column_name`='".db_secur($k)."' LIMIT 1                         ");                    if($ask->num_rows) {                        $row = $ask->fetch_assoc();                        q("UPDATE `access` SET `ord`=".(int)$v." WHERE `id`=".(int)$row['id']);                    } else {                        q("                         INSERT INTO `access` SET                          `table_name`='".db_secur($post['table'])."',                         `column_name`='".db_secur($k)."',                         `ord`=".(int)$v."                         ");                    }                }            }            ans('Выполненно успешно');        }        break;    case 'set_name_column':        if(Access::scanLevel() < 6) {            error('Низкий уровень допуска. Требуется 6+');        }        $err = isset_columns($_POST, ['table', 'column', 'new_name']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if($PERM->get_permission($post['table'], Permiss::COLUMN_EDIT) === false) {                error('Колонки данной таблицы защищены от редактирования.');            }            $ask = q("SELECT * FROM `access` WHERE `table_name`='".db_secur($post['table'])."' AND `column_name`='".db_secur($post['column'])."' LIMIT 1");            if($ask->num_rows) {                q("UPDATE `access` SET `column_title`='".db_secur($post['new_name'])."' WHERE `table_name`='".db_secur($post['table'])."' AND `column_name`='".db_secur($post['column'])."' ");            } else {                q("                    INSERT INTO `access` SET                     `column_title`='".db_secur($post['new_name'])."',                    `table_name`='".db_secur($post['table'])."',                    `column_name`='".db_secur($post['column'])."'                     ");            }            ans('Успешно');        }        break;    case 'get_value_table':        $err = isset_columns($_POST, ['table', 'id', 'column']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if(Access::scanLevel() < 6)  {                error('Разрешено только пользователям с уровнем доступа 6+...');            } else {                $ask = q("SELECT ".db_secur($post['table']).".".db_secur($post['column'])." FROM `".db_secur($post['table'])."` WHERE `id`=".(int)$post['id']);                if($ask->num_rows) {                    $line = $ask->fetch_assoc()[$post['column']];                    if($line !== null && mb_strlen($line) >= 2 && str_starts_with($line, 'a:')) {                        $unser = unserialize($line);                        if ($unser !== false) {                            $line = json_encode($unser, JSON_UNESCAPED_UNICODE);                        }                    }                    ans($line);                } else {                    error('Данные по запросу - не найдены...');                }            }        }    break;    case 'set_value_table':        $err = isset_columns($_POST, ['table', 'id', 'column', 'value']);        if(is_array($err)) {            error('Отсутствуют следующие поля: ', $err);        } else {            if(!Access::access_exception_table($post['table'], $post['column'], Access::scanLevel()) &&                ($PERM->get_permission($post['table'], Permiss::FIELDS_EDIT) === false &&                Access::get_access(Access::userName(), 'self-edit') === false)) {                error('Поля данной таблицы защищены от редактирования.');            }            if(Access::scanLevel() < 6)  {                error('Разрешено только пользователям с уровнем доступа 6+...');            } else {                if($post['table'] === 'file' && $post['column'] === 'sys_name') {                    error('Таблица file - не является ссылочной.<br>В ней хранятся оригиналы всех файлов.');                }                if($post['table'] === 'users' && Access::userID() === (int)$post['id'] && Access::get_access(Access::userName(), 'self-edit') === false) {                    error('Вы пытаетесь изменять параметры собственной учётной записи,<br>что может привести к блокировке при следующем входе.<br>Если вы понимаете, что делаете - в нижней панели нажмите кнопку "КЛЮЧ"');                }                if(Access::access_to_change_column($post['table'], $post['column'])) {                    $params = Access::get_fields_params_for_table($post['table'])[$post['column']];                    if($params['type'] === 'text' && is_array($params['params']) &&                        isset($params['params']['type']) && $params['params']['type'] === 'json' &&                        $post['value'] !== 'NULL') {                        $post['value'] = serialize($post['value']);                    }                    $ask = q("SELECT " . db_secur($post['table']) . "." . db_secur($post['column']) . " FROM `" . db_secur($post['table']) . "` WHERE `id`=" . (int)$post['id']);                    if ($ask->num_rows) {                        if($post['value'] === 'NULL') {                            q("UPDATE `" . db_secur($post['table']) . "` SET `" . db_secur($post['column']) . "`= NULL WHERE `id`=" . (int)$post['id']);                        } else {                            q("UPDATE `" . db_secur($post['table']) . "` SET `" . db_secur($post['column']) . "`='" . db_secur($post['value']) . "' WHERE `id`=" . (int)$post['id']);                        }                    } else {                        q("INSERT INTO `" . db_secur($post['table']) . "` SET `" . db_secur($post['column']) . "`='" . db_secur($post['value']) . "'");                    }                    ans('ok');                } else {                    error('Отсутствует разрешение на редактирование этого параметра!..', [$post['column']]);                }            }        }    break;    case 'exist_table':        $table_name = $post['name'] ?? '';        if($table_name === '') {            echo 'error clear';        } else {            if(SUBD::existsTable($table_name)) {                echo 'error exist';            } else {                echo 'ok';            }        }        exit;        break;    case 'create_new_table':        $table_name = $post['name'] ?? '';        if($table_name === '') {            error('Ошибка задания имени новой таблицы.');            exit;        } else {            $table_name = VALUES::translit($table_name);            if(q("            CREATE TABLE `".$table_name."` (                `id` INT(11) NOT NULL AUTO_INCREMENT,                PRIMARY KEY (`id`)            )            ")) {                q("                    INSERT INTO `access` SET                    `table_name` = '".db_secur($table_name)."',                    `column_name` = 'id',                    `edited` = 0,                    `column_title` = 'ID',                    `ord` = 0,                    `type` = 'int',                    `params` = '',                    `showed` = 1                ");                q("                    INSERT INTO `tables_list` SET                     `table_name` = '".db_secur($table_name)."',                    `for_user` = 1,                    `table_del` = 1,                    `column_add` = 1,                    `column_del` = 1,                    `column_edit` = 1,                    `row_add` = 1,                    `row_del` = 1,                    `fields_edit` = 1                ");                ans('ok');                exit;            } else {                error('Не удалось создать таблицу.');            }        }        exit;}echo json_encode($ans, JSON_UNESCAPED_UNICODE);exit;