$(document).ready(function(e) {    apply_filter();});$(document).on('blur', 'input[min]', function(e) {    let obj = $(this);    const min_v = parseFloat(obj.attr('min'));    let i = parseFloat(obj.val());    if(i<min_v) {        obj.val(min_v);    }});$(document).on('blur', 'input[max]', function(e) {    let obj = $(this);    const max_v = parseFloat(obj.attr('max'));    let i = parseFloat(obj.val());    if(i>max_v) {        obj.val(max_v);    }});$(document).on('click', 'details', function(e) {    let obj = this;    setTimeout(function() {        let html = '';        if($mobile) {            html = $('#mobile-side-menu').html();            localStorage.removeItem('create-form');        localStorage.setItem('side-menu', html);        } else {            html = $(obj).closest('.filter.grey-panel').html();            localStorage.removeItem('create-form');        localStorage.setItem('side-menu', html);        }    }, 200);});$(document).on('change', '.filter.grey-panel input[type="checkbox"]', function(e) {    let obj = this;    let cont = $(obj).closest('div.column');    let checked = false;    let arr = [];    $(cont).find('input').each(function(e,t) {        if($(t).prop('checked')) {            checked = true;            arr.push($(t).closest('label').find('span').text());        }    })    if(checked) {        $(obj).closest('tr').attr('data-changed', 'true').attr('data-real', arr.join('|'));    } else {        $(obj).closest('tr').removeAttr('data-changed');    }});$(document).on('input', '.filter.grey-panel input[type="number"], .filter.grey-panel input[type="text"]', function(e) {    let obj = this;    if($(obj).val().length > 0) {        $(obj).closest('tr').attr('data-changed', 'true').attr('data-real', $(obj).val());    } else {        $(obj).closest('tr').removeAttr('data-changed');    }});function change_bool_state(obj, state) {    let cont = $(obj).closest('.toggler');    let tr = cont.closest('tr');    if($(obj).hasClass('sel')) {        $(obj).removeClass('sel');        tr.attr('data-real', 1).removeAttr('data-changed');    } else {        cont.find('.sel').removeClass('sel');        if (state) {            cont.find('button:first-child').addClass('sel');            tr.attr('data-real', 1).attr('data-changed', true);        } else {            cont.find('button:last-child').addClass('sel');            tr.attr('data-real', 0).attr('data-changed', true);        }    }}function apply_filter() {    let params = [];    $('.filter-table tr[data-changed="true"]').each(function(e,t) {        let obj = $(t);        let field_name = obj.find('td:first-child').text();        let real_name = obj.find('td:first-child').attr('data-real-name');        if(typeof real_name !== 'undefined') {            field_name = real_name;        }        let field_type = obj.attr('data-field');        let val = $(t).attr('data-real');        switch(field_type) {            case 'bool':                params.push('('+field_name+') = '+val);                break;            case 'list':                let lst = val.split('|');                for(let i in lst) {                    params.push('('+field_name+') = ('+lst[i]+')');                }                break;            case 'input':                let compare = '=';                if(typeof obj.attr('data-compare') !== 'undefined') {                    compare = obj.attr('data-compare');                }                if(typeof obj.attr('data-compare-field') !== 'undefined') {                    field_name = obj.attr('data-compare-field');                }                if(compare === '=') {                    params.push('('+field_name+') '+compare+' ('+val+')');                } else {                    switch(compare) {                        case '>=':                            params.push('('+field_name+') '+compare+' ('+val+')min');                            break;                        case '<=':                            params.push('('+field_name+') '+compare+' ('+val+')max');                            break;                        case '<>':                            params.push('('+field_name+') '+compare+' ('+val+')not');                            break;                    }                }                break;        }    });    if(filter_matrix[0] !== -1) {        params.push('(Тип (категория)) = '+filter_matrix[0]);    }    if(filter_matrix[1] !== -1) {        params.push('(Подкатегория) = '+filter_matrix[1]);    }    if(filter_matrix[2] !== -1) {        params.push('(Множество) = '+filter_matrix[2]);    }    if(only_my_city === 'true' && city_id > 0) {        params.push('(IDcity) = '+city_id);    }    console.dir(params);    if($mobile) {        update_products(params, 'card');    } else {        update_products(params, 'list');    }}/** * Обновляет по AJAX список товаров * @param filter_array - массив со списком условий фильтров * @param type - mobile | desktop */function update_products(filter_array, type='card') {    BACK('products', 'render_filter_products', {arr: filter_array, items_type: type}, function(mess) {        mess_executer(mess, function(mess) {            console.dir(mess);            let cont = null;            switch(type) {                case 'list':                    cont = $('.vertical-list-products');                    cont.empty();                    cont.html(mess.params);                    break;                case 'card':                    cont = $('.products-list ul');                    cont.empty();                    cont.html(mess.params);                    break;            }        });    });}