$(document).on('dblclick', '.tb-card .edited-field td:last-child', function(e) {    let o = this;    if($(o).find('input[type="text"]').length === 0 ) {        let mass = get_data_cell_card(o);        if($(o).attr('data-params') !== undefined) {            console.dir(mass);            mass.value = $(o).attr('data-params');            obj_cell = {                table: buff_row.table_name,                id: buff_row.id,                column: buff_row.column_name,                reload_table: buff_row.reload_card,            }        }        execute_dblclick_on_card_item(mass);        console.dir(buff_row);    }});$(document).on('blur', '#sel-enum', function(e) {    let sel = $(this).val();    let obj = this;    change_value_card(obj, sel);});$(document).on('change', '#sel-enum', function(e) {    $(this).blur();});$(document).on('blur', '#inpt-dt', function(e) {    let sel = $(this).val();    let obj = this;    change_value_card(obj, sel);});$(document).on('change', '#inpt-dt', function(e) {    $(this).blur();});function change_value_card(obj, new_value) {    if(new_value !== buff_row.value) {        SENDER('set_value_table', {            table: buff_row.table_name,            id: buff_row.id,            column: buff_row.column_name,            value: new_value        }, function (mess) {            mess = JSON.parse(mess);            if (mess.status !== 'ok') {                error_executing(mess);            } else {                open_card($(buff_row.obj).closest('.content'), buff_row.table_name, buff_row.id, {}, function() {});            }        });    }    $(obj).remove();}function execute_dblclick_on_card_item(arr) {    console.dir(arr);    switch(arr.type) {        case 'enum':            let lst = $(arr.obj).attr('data-list').split('||');            let obj = arr.obj;            let sel = $('<select id="sel-enum"></select>');            for(let i of lst) {                if(i === arr.value) {                    $(sel).append('<option selected>'+i+'</option>');                } else {                    $(sel).append('<option>'+i+'</option>');                }            }            $(obj).append(sel);            break;        case 'select':            let find_block = arr.table_name+'-'+arr.column_name;            if($('#'+find_block).length === 0) {                SENDER('get_list_of_column_items', {table: $(arr.obj).attr('data-table-from'), column: $(arr.obj).attr('data-column-from')}, function(mess) {                    mess = JSON.parse(mess);                    console.dir(mess);                    let dtlist = $('<datalist id="'+find_block+'"></datalist>');                    for(let i in mess.params) {                        $(dtlist).append('<option data-id="'+i+'" value="'+mess.params[i]+'"></option>');                    }                    $('#body').append(dtlist);                });            }            let it = $('<input list="'+find_block+'" value="'+arr.value+'" class="input-edit-select" type="text">');            $(arr.obj).html(it);            break;        case 'file':            let llist = {};            llist['Загрузить с компьютера'] = function() {                setTimeout(function() {                    just_form_upload(buff_row.obj, buff_row.table_name, buff_row.column_name, buff_row.id);                }, 100);            };            if($(buff_row.obj).find('img').length > 0) {                llist['Очистить слот'] = function () {                    SENDER('set_value_table', {                        table: buff_row.table_name,                        id: buff_row.id,                        column: buff_row.column_name,                        value: '-'                    }, function (mess) {                        mess = JSON.parse(mess);                        if (mess.status !== 'ok') {                            error_executing(mess);                        } else {                            open_card($(buff_row.obj).closest('.content'), buff_row.table_name, buff_row.id, {}, function() {});                        }                    });                }                llist['Получить имя для вставки'] = function () {                    let name = $(buff_row.obj).find('img').attr('data-name');                    copyToClipboard(name);                    say('Имя файла скопировано в буфер<br>«<b>' + name + '</b>»<br>Для вставки - Ctrl + V');                }                if (buff_row.type === 'file') {                    llist['Скачать этот ресурс'] = function () {                        let link = document.createElement('a');                        let name = $(buff_row.obj).find('img').attr('data-name');                        link.href = './DOWNLOAD/' + name;                        link.download = 'download';                        link.target = '_blank';                        document.body.append(link);                        link.click();                    };                }            }            info_variants(undefined, llist);            break;        case 'tinyint':            let ans = [$(arr.obj).attr('data-true'), $(arr.obj).attr('data-false'), parseInt($(arr.obj).attr('data-value'))];            if(ans.length === 3) {                if(ans[2] === 0) {                    change_card_item(1, function() {                        $(arr.obj).attr('data-value', 1);                    });                    $(arr.obj).text($(arr.obj).attr('data-true'));                    $(arr.obj).css('text-shadow', '0 0 2px lime');                } else {                    change_card_item(0, function() {                        $(arr.obj).attr('data-value', 0);                    });                    $(arr.obj).text($(arr.obj).attr('data-false'));                    $(arr.obj).css('text-shadow', '0 0 2px red');                }            }            break;        case 'datetime':            let inpt_dt = $('<input id="inpt-dt" type="datetime-local" value="'+$(arr.obj).attr('data-value')+'">');            $(arr.obj).append(inpt_dt);            break;        case 'date':            let inpt_dt2 = $('<input id="inpt-dt" type="date" value="'+$(arr.obj).attr('data-value')+'">');            $(arr.obj).append(inpt_dt2);            break;        case 'time':            let inpt_dt3 = $('<input id="inpt-dt" type="time" value="'+$(arr.obj).attr('data-value')+'">');            $(arr.obj).append(inpt_dt3);            break;        case 'text':            console.log('+++++++++');            let types = $(arr.obj).attr('data-params')            console.log(types);            console.dir(arr);            if(types === undefined) {                let inpt_dt3 = $('<textarea id="inpt-dt" type="time">'+arr.value+'</textarea>');                $(arr.obj).append(inpt_dt3);            } else {                let mess = {                    body: arr.value,                    params: [],                    status: 'ok'                }                edit_micro_table(mess);            }            break;        default:            let inpt = $('<input value="'+arr.value+'" class="input-edit" type="text">');            $(arr.obj).html(inpt);            setTimeout(function() {                $(arr.obj).find('input').select();                $(arr.obj).find('input').focus();            }, 10);            break;    }}function change_card_item(new_value, correct_change=function() {}, uncorrect_change=function() {}) {    SENDER('set_value_table', {        table: buff_row.table_name,        id: buff_row.id,        column: buff_row.column_name,        value: new_value    }, function(mess) {        mess = JSON.parse(mess);        if(mess.status !== 'ok') {            $(buff_row.obj).text(buff_row.value);            error_executing(mess);            uncorrect_change();        } else {            correct_change();        }    });}